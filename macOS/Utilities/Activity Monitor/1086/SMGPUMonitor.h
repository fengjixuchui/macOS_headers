//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 25 2017 03:49:04).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSArray, NSMutableDictionary, NSTimer;
@protocol NSObject, OS_dispatch_queue;

@interface SMGPUMonitor : NSObject
{
    struct os_unfair_lock_s dictionary_lock;
    int _numSlottedGPUs;
    int _numExternalGPUs;
    NSArray *_GPUs;
    id <NSObject> _metalObserver;
    NSObject<OS_dispatch_queue> *_notificationQueue;
    NSTimer *_gpuMonitorUpdateTimer;
    double _gpuMonitorSampleInterval;
    double _activeProcessExpirationLimit;
    NSMutableDictionary *_GpuidToGPUMetric;
    NSObject<OS_dispatch_queue> *_update_gpu_queue;
    double _lastGPUUpdateTime;
}

+ (id)sharedGPUMonitor;
- (void).cxx_destruct;
@property(nonatomic) double lastGPUUpdateTime; // @synthesize lastGPUUpdateTime=_lastGPUUpdateTime;
@property(retain) NSObject<OS_dispatch_queue> *update_gpu_queue; // @synthesize update_gpu_queue=_update_gpu_queue;
@property(retain) NSMutableDictionary *GpuidToGPUMetric; // @synthesize GpuidToGPUMetric=_GpuidToGPUMetric;
@property double activeProcessExpirationLimit; // @synthesize activeProcessExpirationLimit=_activeProcessExpirationLimit;
@property double gpuMonitorSampleInterval; // @synthesize gpuMonitorSampleInterval=_gpuMonitorSampleInterval;
@property(retain) NSTimer *gpuMonitorUpdateTimer; // @synthesize gpuMonitorUpdateTimer=_gpuMonitorUpdateTimer;
@property(retain) NSObject<OS_dispatch_queue> *notificationQueue; // @synthesize notificationQueue=_notificationQueue;
@property(retain) id <NSObject> metalObserver; // @synthesize metalObserver=_metalObserver;
@property int numExternalGPUs; // @synthesize numExternalGPUs=_numExternalGPUs;
@property int numSlottedGPUs; // @synthesize numSlottedGPUs=_numSlottedGPUs;
@property(copy) NSArray *GPUs; // @synthesize GPUs=_GPUs;
- (BOOL)isMultiGPUSystem;
- (void)updateGPUStats;
- (struct GPUMetrics)getGPUMetricsForPID:(id)arg1;
- (struct GPUMetrics)getGPUMetricsForGPUID:(id)arg1 andPID:(id)arg2;
- (struct GPUMetrics)getGPUMetricsForGPUID:(id)arg1;
- (void)removeGPUProcess:(id)arg1 ForGPUID:(id)arg2;
- (id)getGPUProcessesForGPUID:(id)arg1;
- (BOOL)isProcess:(id)arg1 SubmittingToGPUID:(id)arg2;
- (long long)numInactiveGPUProcessesForGPUID:(id)arg1;
- (long long)numActiveGPUProcessesForGPUID:(id)arg1;
- (id)loadHistoryForGPUID:(id)arg1;
- (id)percentUtilForGPUID:(id)arg1;
- (void)setSampleInterval:(unsigned long long)arg1;
- (void)destroyMetricsForGPUID:(id)arg1;
- (id)initializeMetricsForPID:(id)arg1;
- (void)initializeMetricsForGPUID:(id)arg1;
- (id)GPUForIdentifer:(unsigned long long)arg1;
- (void)removeGPUs:(id)arg1;
- (void)updateGPUs;
- (void)dealloc;
- (id)init;

@end

