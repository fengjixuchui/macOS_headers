//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

@class GPBMessage, NSCursor, NSData, NSIndexSet, NSOutputStream, NSString, VT100Output;

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGColor;

struct CGContext;

struct CGImage;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct EventHotKeyID {
    unsigned int signature;
    unsigned int id;
};

struct GPBCodedInputStreamState {
    char *bytes;
    unsigned long long bufferSize;
    unsigned long long bufferPos;
    unsigned long long currentLimit;
    int lastTag;
    unsigned long long recursionDepth;
};

struct GPBExtensionDescription {
    CDUnion_319e3a73 _field1;
    char *_field2;
    char *_field3;
    char *_field4;
    CDUnknownFunctionPointerType _field5;
    int _field6;
    unsigned char _field7;
    unsigned char _field8;
};

struct GPBExtensionRange {
    unsigned int _field1;
    unsigned int _field2;
};

struct GPBMessageFieldDescription {
    char *_field1;
    union {
        char *_field1;
        CDUnknownFunctionPointerType _field2;
        CDUnknownFunctionPointerType _field3;
    } _field2;
    unsigned int _field3;
    int _field4;
    unsigned int _field5;
    unsigned short _field6;
    unsigned char _field7;
};

struct GPBMessage_Storage {
    unsigned int _field1[0];
};

struct GPBOutputBufferState {
    char *bytes;
    unsigned long long size;
    unsigned long long position;
    NSOutputStream *output;
};

struct Highlight;

struct NSEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct PIUArray<iTermBackgroundColorPIU> {
    unsigned long long _capacity;
    unsigned long long _size;
    struct vector<std::__1::vector<iTermBackgroundColorPIU, std::__1::allocator<iTermBackgroundColorPIU>>, std::__1::allocator<std::__1::vector<iTermBackgroundColorPIU, std::__1::allocator<iTermBackgroundColorPIU>>>> _arrays;
};

struct PIUArray<iTermTextPIU> {
    unsigned long long _capacity;
    unsigned long long _size;
    struct vector<std::__1::vector<iTermTextPIU, std::__1::allocator<iTermTextPIU>>, std::__1::allocator<std::__1::vector<iTermTextPIU, std::__1::allocator<iTermTextPIU>>>> _arrays;
};

struct TexturePage;

struct TexturePageCollection {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    int _field3;
    int _field4;
    struct unordered_map<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*, std::__1::hash<iTerm2::GlyphKey>, std::__1::equal_to<iTerm2::GlyphKey>, std::__1::allocator<std::__1::pair<const iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>>> _field5;
    struct set<iTerm2::TexturePage *, std::__1::less<iTerm2::TexturePage *>, std::__1::allocator<iTerm2::TexturePage *>> _field6;
    struct TexturePage *_field7;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct __CFString;

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *>*> *_field1;
};

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct __va_list_tag {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
    void *_field4;
};

struct cmsghdr {
    unsigned int cmsg_len;
    int cmsg_level;
    int cmsg_type;
};

struct deque<long, std::__1::allocator<long>> {
    struct __split_buffer<long *, std::__1::allocator<long *>> {
        long long **__first_;
        long long **__begin_;
        long long **__end_;
        struct __compressed_pair<long **, std::__1::allocator<long *>> {
            long long **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<long>> {
        unsigned long long __value_;
    } __size_;
};

struct fd_set {
    int _field1[32];
};

struct iTermMetalBackgroundColorRLE {
    unsigned short _field1;
    unsigned short _field2;
};

struct iTermMultiServerReportChild {
    int isLast;
    int pid;
    char *path;
    char **argv;
    int argc;
    char **envp;
    int envc;
    int isUTF8;
    char *pwd;
    int terminated;
    char *tty;
    int fd;
};

struct iTermTextColorContext {
    id _field1;
    double _field2;
    double _field3;
    char _field4;
    id _field5;
    id _field6;
    id _field7;
    char _field8;
    struct screen_char_t _field9;
    char _field10;
    id _field11;
    id _field12;
    double _field13;
    id _field14;
};

struct iTermTextPIU {
    int _field1;
};

struct in4in6_addr {
    unsigned int _field1[3];
    struct in_addr _field2;
};

struct in6_addr {
    union {
        unsigned char _field1[16];
        unsigned short _field2[8];
        unsigned int _field3[4];
    } _field1;
};

struct in_addr {
    unsigned int s_addr;
};

struct in_sockinfo {
    int _field1;
    int _field2;
    unsigned long long _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned char _field6;
    unsigned char _field7;
    unsigned int _field8;
    CDUnion_b47be01f _field9;
    CDUnion_b47be01f _field10;
    struct {
        unsigned char _field1;
    } _field11;
    struct {
        unsigned char _field1;
        int _field2;
        unsigned short _field3;
        short _field4;
    } _field12;
};

struct iovec {
    void *iov_base;
    unsigned long long iov_len;
};

struct kern_ctl_info {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    char _field7[96];
};

struct kern_event_info {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct map<iTerm2::TexturePage *, iTerm2::PIUArray<iTermTextPIU>*, std::__1::less<iTerm2::TexturePage *>, std::__1::allocator<std::__1::pair<iTerm2::TexturePage *const, iTerm2::PIUArray<iTermTextPIU>*>>> {
    struct __tree<std::__1::__value_type<iTerm2::TexturePage *, iTerm2::PIUArray<iTermTextPIU>*>, std::__1::__map_value_compare<iTerm2::TexturePage *, std::__1::__value_type<iTerm2::TexturePage *, iTerm2::PIUArray<iTermTextPIU>*>, std::__1::less<iTerm2::TexturePage *>, true>, std::__1::allocator<std::__1::__value_type<iTerm2::TexturePage *, iTerm2::PIUArray<iTermTextPIU>*>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<iTerm2::TexturePage *, iTerm2::PIUArray<iTermTextPIU>*>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<iTerm2::TexturePage *, std::__1::__value_type<iTerm2::TexturePage *, iTerm2::PIUArray<iTermTextPIU>*>, std::__1::less<iTerm2::TexturePage *>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<iTerm2::TexturePage *, std::__1::vector<iTermTextFixup, std::__1::allocator<iTermTextFixup>>*, std::__1::less<iTerm2::TexturePage *>, std::__1::allocator<std::__1::pair<iTerm2::TexturePage *const, std::__1::vector<iTermTextFixup, std::__1::allocator<iTermTextFixup>>*>>> {
    struct __tree<std::__1::__value_type<iTerm2::TexturePage *, std::__1::vector<iTermTextFixup, std::__1::allocator<iTermTextFixup>>*>, std::__1::__map_value_compare<iTerm2::TexturePage *, std::__1::__value_type<iTerm2::TexturePage *, std::__1::vector<iTermTextFixup, std::__1::allocator<iTermTextFixup>>*>, std::__1::less<iTerm2::TexturePage *>, true>, std::__1::allocator<std::__1::__value_type<iTerm2::TexturePage *, std::__1::vector<iTermTextFixup, std::__1::allocator<iTermTextFixup>>*>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<iTerm2::TexturePage *, std::__1::vector<iTermTextFixup, std::__1::allocator<iTermTextFixup>>*>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<iTerm2::TexturePage *, std::__1::__value_type<iTerm2::TexturePage *, std::__1::vector<iTermTextFixup, std::__1::allocator<iTermTextFixup>>*>, std::__1::less<iTerm2::TexturePage *>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned char, unsigned char, std::__1::less<unsigned char>, std::__1::allocator<std::__1::pair<const unsigned char, unsigned char>>> {
    struct __tree<std::__1::__value_type<unsigned char, unsigned char>, std::__1::__map_value_compare<unsigned char, std::__1::__value_type<unsigned char, unsigned char>, std::__1::less<unsigned char>, true>, std::__1::allocator<std::__1::__value_type<unsigned char, unsigned char>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned char, unsigned char>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned char, std::__1::__value_type<unsigned char, unsigned char>, std::__1::less<unsigned char>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct msghdr {
    void *msg_name;
    unsigned int msg_namelen;
    struct iovec *msg_iov;
    int msg_iovlen;
    void *msg_control;
    unsigned int msg_controllen;
    int msg_flags;
};

struct ndrv_info {
    unsigned int _field1;
    unsigned int _field2;
    char _field3[16];
};

struct proc_fdinfo {
    int _field1;
    unsigned int _field2;
};

struct proc_fileinfo {
    unsigned int _field1;
    unsigned int _field2;
    long long _field3;
    int _field4;
    unsigned int _field5;
};

struct proc_fileportinfo {
    unsigned int _field1;
    unsigned int _field2;
};

struct screen_char_t {
    unsigned short code;
    unsigned int foregroundColor:8;
    unsigned int fgGreen:8;
    unsigned int fgBlue:8;
    unsigned int backgroundColor:8;
    unsigned int bgGreen:8;
    unsigned int bgBlue:8;
    unsigned int foregroundColorMode:2;
    unsigned int backgroundColorMode:2;
    unsigned int complexChar:1;
    unsigned int bold:1;
    unsigned int faint:1;
    unsigned int italic:1;
    unsigned int blink:1;
    unsigned int underline:1;
    unsigned int image:1;
    unsigned int strikethrough:1;
    unsigned int underlineStyle:1;
    unsigned int unused:3;
    unsigned short urlCode;
};

struct set<iTerm2::TexturePage *, std::__1::less<iTerm2::TexturePage *>, std::__1::allocator<iTerm2::TexturePage *>> {
    struct __tree<iTerm2::TexturePage *, std::__1::less<iTerm2::TexturePage *>, std::__1::allocator<iTerm2::TexturePage *>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<iTerm2::TexturePage *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<iTerm2::TexturePage *>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct sockaddr {
    unsigned char _field1;
    unsigned char _field2;
    char _field3[14];
};

struct sockaddr_in {
    unsigned char sin_len;
    unsigned char sin_family;
    unsigned short sin_port;
    struct in_addr sin_addr;
    char sin_zero[8];
};

struct sockaddr_storage {
    unsigned char _field1;
    unsigned char _field2;
    char _field3[6];
    long long _field4;
    char _field5[112];
};

struct sockaddr_un {
    unsigned char sun_len;
    unsigned char sun_family;
    char sun_path[104];
};

struct sockbuf_info {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    short _field6;
    short _field7;
};

struct socket_fdinfo {
    struct proc_fileinfo _field1;
    struct socket_info _field2;
};

struct socket_info {
    struct vinfo_stat _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    int _field4;
    int _field5;
    int _field6;
    short _field7;
    short _field8;
    short _field9;
    short _field10;
    short _field11;
    short _field12;
    short _field13;
    unsigned short _field14;
    unsigned int _field15;
    struct sockbuf_info _field16;
    struct sockbuf_info _field17;
    int _field18;
    unsigned int _field19;
    union {
        struct in_sockinfo _field1;
        struct tcp_sockinfo _field2;
        struct un_sockinfo _field3;
        struct ndrv_info _field4;
        struct kern_event_info _field5;
        struct kern_ctl_info _field6;
    } _field20;
};

struct tcp_sockinfo {
    struct in_sockinfo _field1;
    int _field2;
    int _field3[4];
    int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned long long _field7;
};

struct termios {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned char _field5[20];
    unsigned long long _field6;
    unsigned long long _field7;
};

struct un_sockinfo {
    unsigned long long _field1;
    unsigned long long _field2;
    CDUnion_35ba739b _field3;
    CDUnion_35ba739b _field4;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unordered_map<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*, std::__1::hash<iTerm2::GlyphKey>, std::__1::equal_to<iTerm2::GlyphKey>, std::__1::allocator<std::__1::pair<const iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>>> {
    struct __hash_table<std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>, std::__1::__unordered_map_hasher<iTerm2::GlyphKey, std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>, std::__1::hash<iTerm2::GlyphKey>, true>, std::__1::__unordered_map_equal<iTerm2::GlyphKey, std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>, std::__1::equal_to<iTerm2::GlyphKey>, true>, std::__1::allocator<std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<iTerm2::GlyphKey, std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>, std::__1::hash<iTerm2::GlyphKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<iTerm2::GlyphKey, std::__1::__hash_value_type<iTerm2::GlyphKey, std::__1::vector<const iTerm2::GlyphEntry *, std::__1::allocator<const iTerm2::GlyphEntry *>>*>, std::__1::equal_to<iTerm2::GlyphKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<iTermNumFullLinesCacheKey, int, iTermNumFullLinesCacheKeyHasher, std::__1::equal_to<iTermNumFullLinesCacheKey>, std::__1::allocator<std::__1::pair<const iTermNumFullLinesCacheKey, int>>> {
    struct __hash_table<std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>, std::__1::__unordered_map_hasher<iTermNumFullLinesCacheKey, std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>, iTermNumFullLinesCacheKeyHasher, true>, std::__1::__unordered_map_equal<iTermNumFullLinesCacheKey, std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>, std::__1::equal_to<iTermNumFullLinesCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<iTermNumFullLinesCacheKey, std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>, iTermNumFullLinesCacheKeyHasher, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<iTermNumFullLinesCacheKey, std::__1::__hash_value_type<iTermNumFullLinesCacheKey, int>, std::__1::equal_to<iTermNumFullLinesCacheKey>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<int, int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, int>>> {
    struct __hash_table<std::__1::__hash_value_type<int, int>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, int>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, int>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, int>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, int>, std::__1::hash<int>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, int>, std::__1::equal_to<int>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct uregex;

struct vector<iTerm2::Highlight, std::__1::allocator<iTerm2::Highlight>> {
    struct Highlight *__begin_;
    struct Highlight *__end_;
    struct __compressed_pair<iTerm2::Highlight *, std::__1::allocator<iTerm2::Highlight>> {
        struct Highlight *__value_;
    } __end_cap_;
};

struct vector<iTermBackgroundColorPIU, std::__1::allocator<iTermBackgroundColorPIU>>;

struct vector<iTermTextPIU, std::__1::allocator<iTermTextPIU>>;

struct vector<std::__1::vector<iTermBackgroundColorPIU, std::__1::allocator<iTermBackgroundColorPIU>>, std::__1::allocator<std::__1::vector<iTermBackgroundColorPIU, std::__1::allocator<iTermBackgroundColorPIU>>>> {
    struct vector<iTermBackgroundColorPIU, std::__1::allocator<iTermBackgroundColorPIU>> *__begin_;
    struct vector<iTermBackgroundColorPIU, std::__1::allocator<iTermBackgroundColorPIU>> *__end_;
    struct __compressed_pair<std::__1::vector<iTermBackgroundColorPIU, std::__1::allocator<iTermBackgroundColorPIU>>*, std::__1::allocator<std::__1::vector<iTermBackgroundColorPIU, std::__1::allocator<iTermBackgroundColorPIU>>>> {
        struct vector<iTermBackgroundColorPIU, std::__1::allocator<iTermBackgroundColorPIU>> *__value_;
    } __end_cap_;
};

struct vector<std::__1::vector<iTermTextPIU, std::__1::allocator<iTermTextPIU>>, std::__1::allocator<std::__1::vector<iTermTextPIU, std::__1::allocator<iTermTextPIU>>>> {
    struct vector<iTermTextPIU, std::__1::allocator<iTermTextPIU>> *__begin_;
    struct vector<iTermTextPIU, std::__1::allocator<iTermTextPIU>> *__end_;
    struct __compressed_pair<std::__1::vector<iTermTextPIU, std::__1::allocator<iTermTextPIU>>*, std::__1::allocator<std::__1::vector<iTermTextPIU, std::__1::allocator<iTermTextPIU>>>> {
        struct vector<iTermTextPIU, std::__1::allocator<iTermTextPIU>> *__value_;
    } __end_cap_;
};

struct vector<void *, std::__1::allocator<void *>> {
    void **__begin_;
    void **__end_;
    struct __compressed_pair<void **, std::__1::allocator<void *>> {
        void **__value_;
    } __end_cap_;
};

struct vinfo_stat {
    unsigned int _field1;
    unsigned short _field2;
    unsigned short _field3;
    unsigned long long _field4;
    unsigned int _field5;
    unsigned int _field6;
    long long _field7;
    long long _field8;
    long long _field9;
    long long _field10;
    long long _field11;
    long long _field12;
    long long _field13;
    long long _field14;
    long long _field15;
    long long _field16;
    int _field17;
    unsigned int _field18;
    unsigned int _field19;
    unsigned int _field20;
    long long _field21[2];
};

struct winsize {
    unsigned short _field1;
    unsigned short _field2;
    unsigned short _field3;
    unsigned short _field4;
};

#pragma mark Typedef'd Structures

typedef struct {
    VT100Output *outputFactory;
    unsigned long long encoding;
    int leftOptionKey;
    int rightOptionKey;
    char screenlike;
} CDStruct_e34b728c;

typedef struct {
    id _field1;
    char _field2;
    long long _field3;
} CDStruct_45ac3c53;

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
} CDStruct_14f26992;

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
} CDStruct_4bcfbbae;

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    unsigned long long encoding;
    int leftOptionKey;
    int rightOptionKey;
    char applicationCursorMode;
    char applicationKeypadMode;
} CDStruct_a924b415;

typedef struct {
    unsigned short _field1;
    unsigned short _field2;
    char _field3;
    char _field4;
    char _field5;
    char _field6;
    unsigned int :2;
} CDStruct_8e3f450a;

typedef struct {
    unsigned short width;
    unsigned short height;
} CDStruct_0d6b4eb6;

typedef struct {
    char *path;
    char **argv;
    int argc;
    char **envp;
    int envc;
    int columns;
    int rows;
    int pixel_width;
    int pixel_height;
    int isUTF8;
    char *pwd;
    unsigned long long uniqueId;
} CDStruct_41c3387a;

typedef struct {
    char *_field1;
    int _field2;
    int _field3;
} CDStruct_9c718cc4;

typedef struct {
    unsigned int :4;
    char _field1;
} CDStruct_f4bab6ad;

typedef struct {
    char _field1;
    char _field2;
    id _field3;
    char _field4;
    id _field5;
    char _field6;
    char _field7;
    char _field8;
    unsigned char _field9;
    char _field10;
    char _field11;
    long long _field12;
    char _field13;
} CDStruct_28116007;

typedef struct {
    char bold;
    char blink;
    char underline;
    unsigned int underlineStyle;
    char strikethrough;
    char reversed;
    char faint;
    char italic;
    int fgColorCode;
    int fgGreen;
    int fgBlue;
    int fgColorMode;
    int bgColorCode;
    int bgGreen;
    int bgBlue;
    int bgColorMode;
} CDStruct_4ca89c9d;

typedef struct {
    char _field1;
    char _field2;
    char _field3;
    char _field4;
    long long _field5;
    double _field6;
    char _field7;
} CDStruct_cc801f57;

typedef struct {
    char _field1;
    int _field2;
    int _field3;
    char _field4;
} CDStruct_41394ce2;

typedef struct {
    double minX;
    double maxX;
    double minY;
    double maxY;
    SEL selector;
    NSCursor *cursor;
} CDStruct_b893d084;

typedef struct {
    double outerRadius;
    double innerRadius;
    double strokeWidth;
} CDStruct_83c7a34f;

typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct {
    int _field1;
    void **_field2;
    int _field3;
} CDStruct_88c1e25a;

typedef struct {
    int _field1;
    char *_field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
} CDStruct_0b102396;

typedef struct {
    int _field1;
    double *_field2;
    int _field3;
} CDStruct_39016ee6;

typedef struct {
    int _field1;
    int _field2;
    int _field3[2];
    int _field4;
    int _field5;
} CDStruct_89ae11fa;

typedef struct {
    int status;
    int pid;
    int fd;
    unsigned long long uniqueId;
    char *tty;
} CDStruct_d4b14471;

typedef struct {
    int width;
    int height;
    int cursorX;
    int cursorY;
    long long timestamp;
    int frameType;
} CDStruct_fdbd985a;

typedef struct {
    int x;
    long long y;
} CDStruct_dc106ac8;

typedef struct {
    int pid;
} CDStruct_1cfece13;

typedef struct {
    long long count;
    long long currentIndex;
    double width;
} CDStruct_7447a437;

typedef struct {
    long long _field1;
    long long _field2;
} CDStruct_912cb5d2;

typedef struct CDStruct_183601bc;

typedef struct {
    int _field1[16];
    int _field2;
    int _field3;
    struct {
        int _field1;
        int _field2;
        int _field3;
    } _field4[16];
    int _field5;
} CDStruct_d9a8690f;

typedef struct {
    char name[20];
    struct {
        unsigned long long start;
        double total;
        long long eventCount;
    } timer;
    long long n;
    long long totalEventCount;
    double mean;
    double m2;
    double min;
    double max;
    int level;
} CDStruct_ce758b68;

typedef struct {
    struct screen_char_t _field1[3][3];
    char _field2[3][3];
} CDStruct_210bb996;

typedef struct {
    char *buffer;
    int length;
    char staticBuffer[128];
    CDStruct_183601bc *screenChars;
} CDStruct_0a2cd81d;

typedef struct {
    struct CGColor *outlineColor;
    struct CGColor *fillColor;
    NSIndexSet *indexes;
} CDStruct_9d0a8532;

typedef struct {
    struct CGContext *_field1;
    struct CGImage *_field2;
} CDStruct_078aa1c5;

typedef struct {
    struct screen_char_t *buffer;
    int length;
    struct screen_char_t staticBuffer[16];
} CDStruct_a17839f1;

typedef struct {
    double _field1;
    struct screen_char_t _field2;
    int _field3;
    int _field4;
    id _field5;
    int _field6;
    long long _field7;
} CDStruct_5549a546;

typedef struct {
    CDStruct_ffe6b7c1 position;
    int charset;
    char lineDrawing[4];
    CDStruct_4ca89c9d graphicRendition;
    char origin;
    char wraparound;
    long long unicodeVersion;
} CDStruct_8235477b;

typedef struct {
    struct {
        int _field1;
        int _field2;
    } _field1;
    int _field2;
} CDStruct_aa20e8de;

typedef struct {
    CDStruct_ffe6b7c1 start;
    CDStruct_ffe6b7c1 end;
} CDStruct_7a47e81c;

typedef struct {
    CDStruct_dc106ac8 start;
    CDStruct_dc106ac8 end;
} CDStruct_7ab14d82;

typedef struct {
    struct CGSize _field1;
    struct {
        int _field1;
        int _field2;
    } _field2;
} CDStruct_db3faf0b;

typedef struct {
    struct CGSize viewportSize__cellSize;
    struct CGSize cellSizeWithoutSpacing;
    int rows;
    int columns;
    double scale;
    struct CGSize glyphSize;
    struct CGSize asciiOffset;
    struct CGContext *context;
    long long unfamiliarTextureCount;
} CDStruct_285c1e15;

typedef struct {
    struct CGSize _field1;
    struct CGSize _field2;
} CDStruct_90e057aa;

typedef struct {
    struct _NSRange range;
    int bgColor;
    int bgGreen;
    int bgBlue;
    int bgColorMode;
    char selected;
    char isMatch;
} CDStruct_56368ce9;

typedef struct {
    struct termios _field1;
    struct winsize _field2;
    char _field3[1024];
} CDStruct_a0b32efc;

typedef struct {
    unsigned long long _field1;
    union {
        CDStruct_0b102396 _field1;
        struct {
            int _field1;
            int _field2;
        } _field2;
    } _field2;
} CDStruct_daf9c769;

typedef struct {
    int type;
    union {
        struct {
            int protocolVersion;
            int numChildren;
            int pid;
        } handshake;
        CDStruct_d4b14471 launch;
        struct {
            int pid;
            int status;
            int resultType;
        } wait;
        CDStruct_1cfece13 termination;
        struct iTermMultiServerReportChild reportChild;
        CDStruct_183601bc hello;
    } payload;
} CDStruct_31e02936;

typedef struct {
    int _field1;
    union {
        CDStruct_1cfece13 _field1;
        CDStruct_41c3387a _field2;
        struct {
            int _field1;
            int _field2;
        } _field3;
    } _field2;
} CDStruct_6cd7f98b;

typedef struct {
    CDStruct_83c7a34f geometry;
    double scale;
    struct CGRect frame;
    float size;
    struct CGPoint center;
    double anglePerStep;
    CDUnknownBlockType alphaFunction;
    char bigSur;
} CDStruct_a5db183e;

typedef struct {
    CDStruct_7a47e81c coordRange;
    CDStruct_dff5684f columnWindow;
} CDStruct_c7660f97;

typedef struct {
    CDStruct_7ab14d82 coordRange;
    CDStruct_dff5684f columnWindow;
} CDStruct_c5b70272;

typedef struct {
    CDStruct_a0b32efc _field1;
    id _field2;
    char **_field3;
    id _field4;
    char **_field5;
} CDStruct_aa00eabd;

typedef struct {
    struct CGRect _field1;
    id _field2;
    struct CGRect _field3;
    struct CGRect _field4;
    struct CGRect _field5[2];
    struct CGRect _field6;
} CDStruct_6c69a41e;

// Ambiguous groups
typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    double upbytes;
    double downbytes;
} CDStruct_2d29266b;

typedef struct {
    int _field1;
    int _field2;
    int _field3;
} CDStruct_77932685;

typedef struct {
    int _field1;
    int _field2;
} CDStruct_1ef3fb1f;

typedef struct {
    int location;
    int length;
} CDStruct_dff5684f;

typedef struct {
    int width;
    int height;
} CDStruct_79c71658;

typedef struct {
    int x;
    int y;
} CDStruct_ffe6b7c1;

typedef struct PIUArray<iTermTextPIU> {
    unsigned long long _capacity;
    unsigned long long _size;
    struct vector<std::__1::vector<iTermTextPIU, std::__1::allocator<iTermTextPIU>>, std::__1::allocator<std::__1::vector<iTermTextPIU, std::__1::allocator<iTermTextPIU>>>> _arrays;
} PIUArray_6164018f;

typedef struct map<unsigned char, unsigned char, std::__1::less<unsigned char>, std::__1::allocator<std::__1::pair<const unsigned char, unsigned char>>> {
    struct __tree<std::__1::__value_type<unsigned char, unsigned char>, std::__1::__map_value_compare<unsigned char, std::__1::__value_type<unsigned char, unsigned char>, std::__1::less<unsigned char>, true>, std::__1::allocator<std::__1::__value_type<unsigned char, unsigned char>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned char, unsigned char>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned char, std::__1::__value_type<unsigned char, unsigned char>, std::__1::less<unsigned char>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
} map_a21ec322;

#pragma mark Typedef'd Unions

typedef union {
    char valueBool;
    int valueInt32;
    long long valueInt64;
    unsigned int valueUInt32;
    unsigned long long valueUInt64;
    float valueFloat;
    double valueDouble;
    NSData *valueData;
    NSString *valueString;
    GPBMessage *valueMessage;
    int valueEnum;
} CDUnion_319e3a73;

typedef union {
    struct sockaddr_un _field1;
    char _field2[255];
} CDUnion_35ba739b;

typedef union {
    struct in4in6_addr _field1;
    struct in6_addr _field2;
} CDUnion_b47be01f;

