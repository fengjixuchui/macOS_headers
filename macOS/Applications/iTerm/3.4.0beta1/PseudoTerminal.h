//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSWindowController.h"

#import "NSCandidateListTouchBarItemDelegate.h"
#import "NSComboBoxDelegate.h"
#import "NSScrubberDataSource.h"
#import "NSScrubberDelegate.h"
#import "NSTouchBarDelegate.h"
#import "NSWindowDelegate.h"
#import "PSMMinimalTabStyleDelegate.h"
#import "PSMTabBarControlDelegate.h"
#import "PSMTabViewDelegate.h"
#import "PTYWindowDelegateProtocol.h"
#import "WindowControllerInterface.h"
#import "iTermBroadcastInputHelperDelegate.h"
#import "iTermInstantReplayDelegate.h"
#import "iTermObject.h"
#import "iTermPasswordManagerDelegate.h"
#import "iTermPresentationControllerManagedWindowController.h"
#import "iTermRootTerminalViewDelegate.h"
#import "iTermSubscribable.h"
#import "iTermTabBarControlViewDelegate.h"
#import "iTermToolbeltViewDelegate.h"
#import "iTermWeaklyReferenceable.h"
#import "iTermWindowController.h"

@class AutocompleteView, CommandHistoryPopupWindowController, DirectoriesPopupWindowController, NSAppearance, NSArray, NSButton, NSCandidateListTouchBarItem, NSColor, NSComboBox, NSCustomTouchBarItem, NSDictionary, NSMutableArray, NSPanel, NSScreen, NSString, NSView, PasteboardHistoryWindowController, iTermBroadcastInputHelper, iTermBuiltInFunctions, iTermFunctionCallTextFieldDelegate, iTermInstantReplayWindowController, iTermOrderEnforcer, iTermPasswordManagerWindowController, iTermRateLimitedIdleUpdate, iTermRootTerminalView, iTermSessionFactory, iTermSwiftyString, iTermTabBarAccessoryViewController, iTermVariableScope<iTermWindowScope>, iTermVariables, iTermWindowShortcutLabelTitlebarAccessoryViewController;

@interface PseudoTerminal : NSWindowController <NSCandidateListTouchBarItemDelegate, NSTouchBarDelegate, NSScrubberDelegate, NSScrubberDataSource, iTermBroadcastInputHelperDelegate, iTermObject, iTermTabBarControlViewDelegate, iTermPasswordManagerDelegate, iTermRootTerminalViewDelegate, iTermToolbeltViewDelegate, NSComboBoxDelegate, PSMMinimalTabStyleDelegate, iTermInstantReplayDelegate, iTermPresentationControllerManagedWindowController, iTermSubscribable, iTermWeaklyReferenceable, iTermWindowController, NSWindowDelegate, PSMTabBarControlDelegate, PSMTabViewDelegate, PTYWindowDelegateProtocol, WindowControllerInterface>
{
    struct CGPoint preferredOrigin_;
    iTermInstantReplayWindowController *_instantReplayWindowController;
    int tabViewItemsBeingAdded;
    BOOL useTransparency_;
    BOOL _fullScreen;
    struct CGRect oldFrame_;
    BOOL oldFrameSizeIsBogus_;
    BOOL oldUseTransparency_;
    BOOL restoreUseTransparency_;
    NSColor *normalBackgroundColor;
    BOOL _resizeInProgressFlag;
    int uniqueNumber_;
    BOOL togglingFullScreen_;
    BOOL togglingLionFullScreen_;
    PasteboardHistoryWindowController *pbHistoryView;
    CommandHistoryPopupWindowController *commandHistoryPopup;
    DirectoriesPopupWindowController *_directoriesPopupWindowController;
    AutocompleteView *autocompleteView;
    int nextSessionRows_;
    int nextSessionColumns_;
    int _windowType;
    int _savedWindowType;
    BOOL _isAnchoredToScreen;
    int _anchoredScreenNumber;
    int _screenNumberFromFirstProfile;
    int number_;
    BOOL wasDraggedFromAnotherWindow_;
    BOOL zooming_;
    double lastResizeTime_;
    iTermBroadcastInputHelper *_broadcastInputHelper;
    double findCursorStartTime_;
    double cumulativeMag_;
    double lastMagChangeTime_;
    BOOL lionFullScreen_;
    NSPanel *coprocesssPanel_;
    NSButton *coprocessOkButton_;
    NSComboBox *coprocessCommand_;
    NSButton *coprocessIgnoreErrors_;
    NSDictionary *lastArrangement_;
    BOOL exitingLionFullscreen_;
    int tmuxOriginatedResizeInProgress_;
    BOOL liveResize_;
    int postponedTmuxTabLayoutChange_;
    BOOL hideAfterOpening_;
    BOOL doNotSetRestorableState_;
    int desiredRows_;
    int desiredColumns_;
    BOOL hidingToolbeltShouldResizeWindow_;
    BOOL hidingToolbeltShouldResizeWindowInitialized_;
    iTermWindowShortcutLabelTitlebarAccessoryViewController *_shortcutAccessoryViewController;
    iTermTabBarAccessoryViewController *_titleBarAccessoryTabBarViewController;
    BOOL _haveDelayedEnterFullScreenMode;
    long long _previousNumberOfTabs;
    BOOL _expectingDecodeOfRestorableState;
    BOOL _inWindowDidChangeScreen;
    iTermPasswordManagerWindowController *_passwordManagerWindowController;
    iTermRateLimitedIdleUpdate *_touchBarRateLimitedUpdate;
    NSString *_previousTouchBarWord;
    BOOL _windowWasJustCreated;
    iTermSessionFactory *_sessionFactory;
    BOOL _openingPopupWindow;
    long long _fullScreenRetryCount;
    BOOL _windowIsMoving;
    long long _screenBeforeMoving;
    BOOL _constrainFrameAfterDeminiaturization;
    CDStruct_79c71658 _previousGridSize;
    BOOL _lockTransientTitle;
    NSMutableArray *_toggleFullScreenModeCompletionBlocks;
    BOOL _windowNeedsInitialSize;
    iTermFunctionCallTextFieldDelegate *_currentTabTitleTextFieldDelegate;
    iTermVariables *_userVariables;
    iTermBuiltInFunctions *_methods;
    BOOL _anyPaneIsTransparent;
    BOOL _windowDidResize;
    BOOL _willClose;
    BOOL _updatingWindowType;
    BOOL _suppressMakeCurrentTerminal;
    NSArray *_screenConfigurationAtTimeOfForceFrame;
    struct CGRect _forceFrame;
    double _forceFrameUntil;
    BOOL _deallocing;
    iTermOrderEnforcer *_proxyIconOrderEnforcer;
    BOOL _settingStyleMask;
    BOOL _restorableStateInvalid;
    BOOL _inWindowDidMove;
    NSView *_swipeContainerView;
    BOOL _deferSetAppearance;
    BOOL _haveDesiredAppearance;
    NSAppearance *_desiredAppearance;
    BOOL _windowInitialized;
    BOOL _restoringWindow;
    BOOL _restorableStateDecodePending;
    BOOL _hasBeenKeySinceActivation;
    BOOL _isReplacingWindow;
    BOOL _closing;
    BOOL _wellFormed;
    iTermVariableScope<iTermWindowScope> *_scope;
    iTermVariables *_variables;
    iTermSwiftyString *_windowTitleOverrideSwiftyString;
    CDUnknownBlockType _didEnterLionFullscreen;
    unsigned long long _hotkeyWindowType;
    long long _spaceSetting;
    NSDictionary *_initialProfile;
    NSString *_autoCommandHistorySessionGuid;
    double _timeOfLastResize;
    NSString *_desiredTitle;
    NSString *_swipeIdentifier;
    NSCustomTouchBarItem *_tabsTouchBarItem;
    NSCandidateListTouchBarItem *_autocompleteCandidateListItem;
    iTermRootTerminalView *_contentView;
}

+ (BOOL)titleBarShouldAppearTransparentForWindowType:(int)arg1;
+ (BOOL)windowType:(int)arg1 shouldBeCompactWithSavedWindowType:(int)arg2;
+ (id)repairedArrangement:(id)arg1 replacingProfileWithGUID:(id)arg2 withProfile:(id)arg3;
+ (id)terminalWithArrangement:(id)arg1 named:(id)arg2 forceOpeningHotKeyWindow:(BOOL)arg3;
+ (id)terminalWithArrangement:(id)arg1 named:(id)arg2 sessions:(id)arg3 forceOpeningHotKeyWindow:(BOOL)arg4;
+ (struct CGRect)sanitizedWindowFrame:(struct CGRect)arg1;
+ (id)bareTerminalWithArrangement:(id)arg1 forceOpeningHotKeyWindow:(BOOL)arg2;
+ (BOOL)shouldRestoreHotKeyWindowWithGUID:(id)arg1;
+ (BOOL)arrangementIsLionFullScreen:(id)arg1;
+ (BOOL)anyWindowIsEnteringLionFullScreen;
+ (BOOL)willAutoFullScreenNewWindow;
+ (void)drawArrangementPreview:(id)arg1 screenFrames:(id)arg2;
+ (int)_screenIndexForArrangement:(id)arg1;
+ (int)_windowTypeForArrangement:(id)arg1;
+ (int)screenNumberForPreferredScreenNumber:(int)arg1 windowType:(int)arg2 defaultScreen:(id)arg3;
+ (id)expurgatedInitialProfile:(id)arg1;
+ (long long)styleMaskForWindowType:(int)arg1 savedWindowType:(int)arg2 hotkeyWindowType:(unsigned long long)arg3;
+ (BOOL)windowTypeHasFullSizeContentView:(int)arg1;
+ (void)registerSessionsInArrangement:(id)arg1;
@property(readonly, nonatomic) iTermRootTerminalView *contentView; // @synthesize contentView=_contentView;
@property(readonly, nonatomic) BOOL wellFormed; // @synthesize wellFormed=_wellFormed;
@property(retain, nonatomic) NSCandidateListTouchBarItem *autocompleteCandidateListItem; // @synthesize autocompleteCandidateListItem=_autocompleteCandidateListItem;
@property(retain, nonatomic) NSCustomTouchBarItem *tabsTouchBarItem; // @synthesize tabsTouchBarItem=_tabsTouchBarItem;
@property(copy, nonatomic) NSString *swipeIdentifier; // @synthesize swipeIdentifier=_swipeIdentifier;
@property(copy, nonatomic) NSString *desiredTitle; // @synthesize desiredTitle=_desiredTitle;
@property(nonatomic) double timeOfLastResize; // @synthesize timeOfLastResize=_timeOfLastResize;
@property(copy, nonatomic) NSString *autoCommandHistorySessionGuid; // @synthesize autoCommandHistorySessionGuid=_autoCommandHistorySessionGuid;
@property(readonly, nonatomic) BOOL closing; // @synthesize closing=_closing;
@property(nonatomic) BOOL isReplacingWindow; // @synthesize isReplacingWindow=_isReplacingWindow;
@property(readonly, nonatomic) NSDictionary *initialProfile; // @synthesize initialProfile=_initialProfile;
@property(readonly, nonatomic) BOOL hasBeenKeySinceActivation; // @synthesize hasBeenKeySinceActivation=_hasBeenKeySinceActivation;
@property(readonly, nonatomic) long long spaceSetting; // @synthesize spaceSetting=_spaceSetting;
@property(nonatomic) BOOL restorableStateDecodePending; // @synthesize restorableStateDecodePending=_restorableStateDecodePending;
@property(nonatomic) BOOL restoringWindow; // @synthesize restoringWindow=_restoringWindow;
@property(nonatomic) BOOL windowInitialized; // @synthesize windowInitialized=_windowInitialized;
@property(nonatomic) unsigned long long hotkeyWindowType; // @synthesize hotkeyWindowType=_hotkeyWindowType;
@property(copy, nonatomic) CDUnknownBlockType didEnterLionFullscreen; // @synthesize didEnterLionFullscreen=_didEnterLionFullscreen;
@property(readonly, nonatomic) iTermSwiftyString *windowTitleOverrideSwiftyString; // @synthesize windowTitleOverrideSwiftyString=_windowTitleOverrideSwiftyString;
- (void)swipeHandlerEndSession:(id)arg1 atIndex:(long long)arg2;
- (void)swipeHandlerSetOffset:(double)arg1 forSession:(id)arg2;
- (double)truncatedSwipeOffset:(double)arg1;
- (CDStruct_7447a437)swipeHandlerParameters;
- (id)swipeHandlerBeginSessionAtOffset:(double)arg1 identifier:(id)arg2;
- (id)presentationControllerManagedWindowControllerWindow;
- (BOOL)presentationControllerManagedWindowControllerIsFullScreen:(out char *)arg1;
- (id)handleAPINotificationRequest:(id)arg1 connectionKey:(id)arg2;
- (id)subscribableIdentifier;
- (id)objectScope;
- (void)setTitleWithCompletion:(CDUnknownBlockType)arg1 title:(id)arg2;
- (id)objectMethodRegistry;
- (id)broadcastInputHelperWindowForWarnings:(id)arg1;
- (void)broadcastInputHelper:(id)arg1 setCurrentTabBroadcasting:(BOOL)arg2;
- (void)broadcastInputHelperSetNoTabBroadcasting:(id)arg1;
- (BOOL)broadcastInputHelperCurrentTabIsBroadcasting:(id)arg1;
- (void)broadcastInputHelperDidUpdate:(id)arg1;
- (id)broadcastInputHelperCurrentSession:(id)arg1;
- (id)broadcastInputHelperSessionsInAllTabs:(id)arg1 includeExited:(BOOL)arg2;
- (id)broadcastInputHelperSessionsInCurrentTab:(id)arg1 includeExited:(BOOL)arg2;
- (id)minimalTabStyleBackgroundColor;
- (BOOL)tabIsSwiping;
- (void)tabActiveSessionDidUpdatePreferencesFromProfile:(id)arg1;
- (double)tabBlend;
- (unsigned long long)tabBackgroundImageMode;
- (id)tabBackgroundImage;
- (void)setSharedBackgroundImage:(id)arg1 mode:(unsigned long long)arg2 backgroundColor:(id)arg3;
- (void)tab:(id)arg1 setBackgroundImage:(id)arg2 mode:(unsigned long long)arg3 backgroundColor:(id)arg4;
- (void)updateBackgroundImage;
- (void)tabRevealActionsTool:(id)arg1;
- (void)controlTextDidChange:(id)arg1;
- (void)endPreviewPanelControl:(id)arg1;
- (void)beginPreviewPanelControl:(id)arg1;
- (BOOL)acceptsPreviewPanelControl:(id)arg1;
- (id)toolbeltCommandUsesForCurrentSession;
- (void)toolbeltApplyActionToCurrentSession:(id)arg1;
- (BOOL)toolbeltCurrentSessionHasGuid:(id)arg1;
- (void)toolbeltActivateTriggerForCapturedOutputInCurrentSession:(id)arg1;
- (void)toolbeltDidSelectMark:(id)arg1;
- (id)toolbeltLastCommandMark;
- (int)toolbeltCurrentShellProcessId;
- (id)toolbeltCurrentHost;
- (void)toolbeltInsertText:(id)arg1;
- (void)toolbeltUpdateMouseCursor;
- (void)updateToolbeltAppearance;
- (void)updateDocumentEdited;
- (void)tabHasNontrivialJobDidChange:(id)arg1;
- (void)tabDidSetWindowTitle:(id)arg1 to:(id)arg2;
- (id)tabWindowVariables:(id)arg1;
- (void)tabDidInvalidateStatusBar:(id)arg1;
- (void)numberOfSessionsDidChangeInTab:(id)arg1;
- (void)currentSessionWordAtCursorDidBecome:(id)arg1;
- (BOOL)tabAnyDragInProgress:(id)arg1;
- (BOOL)tabShouldUseTransparency:(id)arg1;
- (void)updateContentViewExpectsMetal;
- (void)tabDidChangeMetalViewVisibility:(id)arg1;
- (BOOL)tabCanUseMetal:(id)arg1 reason:(out unsigned long long *)arg2;
- (void)tab:(id)arg1 didSetMetalEnabled:(BOOL)arg2;
- (void)tab:(id)arg1 didChangeToState:(unsigned long long)arg2;
- (void)tabSessionDidChangeBackgroundColor:(id)arg1;
- (void)tabKeyLabelsDidChangeForSession:(id)arg1;
- (void)tabRemoveTab:(id)arg1;
- (void)tabDidChangeTmuxLayout:(id)arg1;
- (void)tabDidChangeGraphic:(id)arg1 shouldShow:(BOOL)arg2 image:(id)arg3;
- (void)tabInvalidateProxyIcon:(id)arg1;
- (void)tab:(id)arg1 didChangeObjectCount:(long long)arg2;
- (void)tab:(id)arg1 didChangeIcon:(id)arg2;
- (void)tab:(id)arg1 didChangeProcessingStatus:(BOOL)arg2;
- (void)iTermPasswordManagerEnterUserName:(id)arg1 broadcast:(BOOL)arg2;
- (BOOL)iTermPasswordManagerCanEnterUserName;
- (void)iTermPasswordManagerEnterPassword:(id)arg1 broadcast:(BOOL)arg2;
- (void)broadcastPassword:(id)arg1;
- (BOOL)iTermPasswordManagerCanBroadcast;
- (BOOL)iTermPasswordManagerCanEnterPassword;
- (void)jumpToSelection:(id)arg1;
- (void)findNext:(id)arg1;
- (void)findPrevious:(id)arg1;
- (void)showFindPanel:(id)arg1;
- (void)toggleTmuxPausePane:(id)arg1;
- (void)moveToPreferredScreen;
- (void)openSelection:(id)arg1;
- (void)sessionDidTerminate:(id)arg1;
- (void)addSessionInNewTab:(id)arg1;
- (unsigned long long)window:(id)arg1 willUseFullScreenPresentationOptions:(unsigned long long)arg2;
- (void)window:(id)arg1 willEncodeRestorableState:(id)arg2;
- (BOOL)windowRestorationEnabled;
- (BOOL)allTabsAreTmuxTabs;
- (void)window:(id)arg1 didDecodeRestorableState:(id)arg2;
- (id)createTabWithProfile:(id)arg1 withCommand:(id)arg2 environment:(id)arg3 previousDirectory:(id)arg4 parent:(id)arg5 completion:(CDUnknownBlockType)arg6;
- (void)asyncCreateTabWithProfile:(id)arg1 withCommand:(id)arg2 environment:(id)arg3 didMakeSession:(CDUnknownBlockType)arg4 completion:(CDUnknownBlockType)arg5;
- (id)sessionForDirectoryRecycling;
- (BOOL)iTermTabBarShouldHideBacking;
- (BOOL)iTermTabBarCanDragWindow;
- (BOOL)iTermTabBarWindowIsFullScreen;
- (void)iTermTabBarDidFinishFlash;
- (void)iTermTabBarWillBeginFlash;
- (BOOL)iTermTabBarShouldFlashAutomatically;
- (BOOL)eligibleForFullScreenTabBarToFlash;
- (void)sessionHostDidChange:(id)arg1 to:(id)arg2;
- (void)incrementBadge;
- (unsigned long long)validModesForFontPanel:(id)arg1;
- (id)allSessions;
- (long long)timestampForFraction:(float)arg1;
- (void)reloadBookmarks;
- (void)closeWindow:(id)arg1;
- (void)compose:(id)arg1;
- (void)changeTabColorToMenuAction:(id)arg1;
- (id)it_moveTabToNewWindow:(id)arg1;
- (void)moveTabToNewWindowContextualMenuAction:(id)arg1;
- (void)closeTabsToTheRight:(id)arg1;
- (void)closeOtherTabs:(id)arg1;
- (void)saveTabAsWindowArrangement:(id)arg1;
- (void)createDuplicateOfTab:(id)arg1;
- (void)duplicateTab:(id)arg1;
- (void)closeTabContextualMenuAction:(id)arg1;
- (id)tabBarControl;
- (BOOL)showCloseWindow;
- (void)fitTabsToWindow;
- (void)enableSendInputToAllTabs:(id)arg1;
- (void)disableBroadcasting:(id)arg1;
- (void)enableSendInputToAllPanes:(id)arg1;
- (void)toggleAutoCommandHistory:(id)arg1;
- (void)returnToDefaultSize:(id)arg1;
- (void)smallerFont:(id)arg1;
- (void)biggerFont:(id)arg1;
- (void)toggleSizeChangesAffectProfile:(id)arg1;
- (void)mergeAllWindows:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;
- (void)addRevivedSession:(id)arg1;
- (void)startStopLogging:(id)arg1;
- (void)exportRecording:(id)arg1;
- (void)saveContents:(id)arg1;
- (void)clearScrollbackBuffer:(id)arg1;
- (void)clearBuffer:(id)arg1;
- (void)resetCharset:(id)arg1;
- (void)reset:(id)arg1;
- (void)assignUniqueNumberToWindow;
- (void)setName:(id)arg1 forSession:(id)arg2;
- (id)undecoratedWindowTitle;
- (id)insertSession:(id)arg1 atIndex:(int)arg2;
- (void)insertTab:(id)arg1 atIndex:(int)arg2;
- (void)fitTabToWindow:(id)arg1;
- (void)safelySetSessionSize:(id)arg1 rows:(int)arg2 columns:(int)arg3;
- (struct CGRect)maxFrame;
- (void)moveSessionToWindow:(id)arg1;
- (void)setupSession:(id)arg1 withSize:(struct CGSize *)arg2;
- (id)profileForNewSessionPreferringProfile:(id)arg1;
- (void)copySettingsFrom:(id)arg1;
- (float)tallestSessionHeight:(int *)arg1;
- (float)widestSessionWidth:(int *)arg1;
- (float)maxCharHeight:(int *)arg1;
- (float)maxCharWidth:(int *)arg1;
- (void)repositionWidgets;
- (void)flagsChanged:(id)arg1;
- (struct CGSize)windowDecorationSize;
- (BOOL)tabBarIsVisibleInTitleBarAccessory;
- (BOOL)shouldPlaceStatusBarOutsideTabview;
- (BOOL)haveRightBorder;
- (BOOL)haveRightBorderRegardlessOfScrollBar;
- (BOOL)haveTopBorder;
- (BOOL)haveBottomBorder;
- (BOOL)haveLeftBorder;
- (BOOL)shouldShowBorder;
- (BOOL)isDark;
- (BOOL)exitingLionFullscreen;
- (BOOL)enteringLionFullscreen;
- (void)setInstantReplayBarVisible:(BOOL)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)updateTabBarStyle;
- (id)rootTerminalViewWindowSizeViewDetailString;
- (CDStruct_1ef3fb1f)rootTerminalViewCurrentSessionSize;
- (BOOL)rootTerminalViewShouldHideTabBarBackingWhenTabBarIsHidden;
- (BOOL)rootTerminalViewShouldLeaveEmptyAreaAtTop;
- (BOOL)rootTerminalViewWindowHasFullSizeContentView;
- (id)rootTerminalViewSharedStatusBarViewController;
- (BOOL)rootTerminalViewShouldDrawStoplightButtons;
- (BOOL)rootTerminalViewShouldRevealStandardWindowButtons;
- (id)rootTerminalViewCurrentTabIcon;
- (double)rootTerminalViewStoplightButtonsOffset:(id)arg1;
- (double)rootTerminalViewHeightOfTabBar:(id)arg1;
- (double)desiredTabBarHeight;
- (BOOL)shouldHaveTallTabBar;
- (void)rootTerminalViewDidChangeEffectiveAppearance;
- (id)rootTerminalViewTabBarTextColorForTitle;
- (id)rootTerminalViewTabBarTextColorForWindowNumber;
- (id)windowDecorationColor;
- (id)rootTerminalViewTabBarBackgroundColorIgnoringTabColor:(BOOL)arg1;
- (BOOL)rootTerminalViewWindowNumberLabelShouldBeVisible;
- (void)refreshTerminal:(id)arg1;
- (void)updateWindowForWindowType:(int)arg1;
- (void)updateWindowType;
- (void)scrollerStyleDidChange:(id)arg1;
- (void)updateWindowNumberVisibility:(id)arg1;
- (int)_screenAtPoint:(struct CGPoint)arg1;
- (void)setDimmingForSessions;
- (void)setDimmingForSession:(id)arg1;
- (void)fitWindowToIdealizedTabsPreservingHeight:(BOOL)arg1;
- (void)decreaseWidth:(id)arg1;
- (void)increaseWidth:(id)arg1;
- (void)decreaseHeight:(id)arg1;
- (void)increaseHeight:(id)arg1;
- (void)moveTabRight:(id)arg1;
- (void)moveTabAtIndex:(long long)arg1 toIndex:(long long)arg2;
- (void)moveTabLeft:(id)arg1;
- (void)setSplitSelectionMode:(BOOL)arg1 excludingSession:(id)arg2 move:(BOOL)arg3;
- (void)toggleBroadcastingInputToSession:(id)arg1;
- (void)setBroadcastMode:(long long)arg1;
- (void)setBroadcastingSessions:(id)arg1;
- (long long)broadcastMode;
- (id)lastResizeTime;
@property(readonly, nonatomic) NSArray *tabs;
- (void)addTabAtAutomaticallyDeterminedLocation:(id)arg1;
- (void)appendTab:(id)arg1;
- (id)openTabWithArrangement:(id)arg1 named:(id)arg2 hasFlexibleView:(BOOL)arg3 viewMap:(id)arg4 sessionMap:(id)arg5;
- (float)minWidth;
- (void)sessionWasRemoved;
- (void)toggleAlertOnNextMark:(id)arg1;
- (void)previousAnnotation:(id)arg1;
- (void)nextAnnotation:(id)arg1;
- (void)previousMark:(id)arg1;
- (void)nextMark:(id)arg1;
- (void)addNoteAtCursor:(id)arg1;
- (void)swapPaneDown;
- (void)swapPaneUp;
- (void)swapPaneRight;
- (void)swapPaneLeft;
- (void)movePaneDividerUp:(id)arg1;
- (void)movePaneDividerDown:(id)arg1;
- (void)movePaneDividerLeft:(id)arg1;
- (void)movePaneDividerRight:(id)arg1;
- (void)selectPaneDown:(id)arg1;
- (void)selectPaneUp:(id)arg1;
- (void)selectPaneRight:(id)arg1;
- (void)selectPaneLeft:(id)arg1;
- (BOOL)fitWindowToTabSize:(struct CGSize)arg1 preferredHeight:(id)arg2;
- (BOOL)fitWindowToTabSize:(struct CGSize)arg1;
- (void)fitWindowToTabsExcludingTmuxTabs:(BOOL)arg1 preservingHeight:(BOOL)arg2 sizeOfLargestTab:(struct CGSize)arg3;
- (void)fitWindowToTabsExcludingTmuxTabs:(BOOL)arg1 preservingHeight:(BOOL)arg2;
- (struct CGSize)sizeOfLargestTabExcludingTmux:(BOOL)arg1;
- (void)fitWindowToTabsExcludingTmuxTabs:(BOOL)arg1;
- (void)fitWindowToTabs;
- (void)tabActiveSessionDidChange;
- (void)splitHorizontally:(id)arg1;
- (void)splitVertically:(id)arg1;
- (id)profileForSplittingCurrentSession;
- (id)splitVertically:(BOOL)arg1 before:(BOOL)arg2 profile:(id)arg3 targetSession:(id)arg4 oldCWD:(id)arg5 parentScope:(id)arg6 completion:(CDUnknownBlockType)arg7;
- (void)asyncSplitVertically:(BOOL)arg1 before:(BOOL)arg2 profile:(id)arg3 targetSession:(id)arg4 completion:(CDUnknownBlockType)arg5 ready:(CDUnknownBlockType)arg6;
@property(readonly, nonatomic) iTermSessionFactory *sessionFactory;
- (void)willSplitTmuxPane;
- (void)splitVertically:(BOOL)arg1 before:(BOOL)arg2 addingSession:(id)arg3 targetSession:(id)arg4 performSetup:(BOOL)arg5;
- (int)indexForTabWithPredecessors:(id)arg1;
- (unsigned long long)indexOfTabWithUniqueId:(int)arg1;
- (void)addTabWithArrangement:(id)arg1 uniqueId:(int)arg2 sessions:(id)arg3 predecessors:(id)arg4;
- (void)recreateTab:(id)arg1 withArrangement:(id)arg2 sessions:(id)arg3 revive:(BOOL)arg4;
- (void)newTabWithBookmarkGuid:(id)arg1;
- (void)newWindowWithBookmarkGuid:(id)arg1;
- (void)toggleMaximizeActivePane;
- (BOOL)canSplitPaneVertically:(BOOL)arg1 withBookmark:(id)arg2;
- (void)openAutocomplete:(id)arg1;
- (BOOL)autoCommandHistoryIsOpenForSession:(id)arg1;
- (void)reallyShowAutoCommandHistoryForSession:(id)arg1;
- (void)showAutoCommandHistoryForSession:(id)arg1;
- (void)updateAutoCommandHistoryForPrefix:(id)arg1 inSession:(id)arg2 popIfNeeded:(BOOL)arg3;
- (BOOL)wantsCommandHistoryUpdatesFromSession:(id)arg1;
- (void)hideAutoCommandHistoryForSession:(id)arg1;
- (void)hideAutoCommandHistory;
- (void)openDirectories:(id)arg1;
- (void)openCommandHistory:(id)arg1;
- (void)openPasteHistory:(id)arg1;
- (void)openSplitVerticallySheet:(id)arg1;
- (void)openSplitHorizontallySheet:(id)arg1;
- (void)coprocessHelp:(id)arg1;
- (void)coprocessPanelEnd:(id)arg1;
- (void)runCoprocess:(id)arg1;
- (void)stopCoprocess:(id)arg1;
- (void)_openSplitSheetForVertical:(BOOL)arg1;
- (void)irNext:(id)arg1;
- (void)irPrev:(id)arg1;
- (id)windowScreen;
- (struct CGRect)windowFrame;
- (BOOL)windowIsMiniaturized;
- (void)windowOrderBack:(id)arg1;
- (void)windowOrderFront:(id)arg1;
- (void)windowDeminiaturize:(id)arg1;
- (void)windowPerformMiniaturize:(id)arg1;
- (void)windowSetFrameTopLeftPoint:(struct CGPoint)arg1;
- (void)showLiveSession:(id)arg1 inPlaceOf:(id)arg2;
- (void)showRangeOfLines:(struct _NSRange)arg1 inSession:(id)arg2;
- (void)showLinesMatchingQuery:(id)arg1 fromSession:(id)arg2;
- (void)copyModeShortcuts:(id)arg1;
- (void)toggleCopyMode:(id)arg1;
- (void)zoomOnSelection:(id)arg1;
- (void)filter:(id)arg1;
- (void)zoomOut:(id)arg1;
- (void)captureNextMetalFrame:(id)arg1;
- (void)replaySession:(id)arg1;
- (id)syntheticSessionForSession:(id)arg1;
- (void)fitWindowToTab:(id)arg1;
- (BOOL)closeInstantReplay:(id)arg1 orTerminateSession:(BOOL)arg2;
- (void)showHideInstantReplay;
- (struct CGPoint)originForAccessoryOfSize:(struct CGSize)arg1;
- (BOOL)inInstantReplay;
- (void)irAdvance:(int)arg1;
- (void)instantReplayStep:(int)arg1;
- (void)instantReplaySeekTo:(float)arg1;
- (void)replaceSyntheticActiveSessionWithLiveSessionIfNeeded;
- (void)instantReplayExportFrom:(long long)arg1 to:(long long)arg2;
- (long long)instantReplayTimestampAfter:(long long)arg1;
- (long long)instantReplayLastTimestamp;
- (long long)instantReplayFirstTimestamp;
- (long long)instantReplayCurrentTimestamp;
- (void)openPopupWindow:(id)arg1;
- (void)genericCloseSheet:(id)arg1 returnCode:(int)arg2 contextInfo:(id)arg3;
- (void)tabDidClearScrollbackBufferInSession:(id)arg1;
- (void)openPasswordManagerToAccountName:(id)arg1 inSession:(id)arg2;
- (id)accessoryTextColorForMini:(BOOL)arg1;
- (void)fillPath:(id)arg1;
- (BOOL)isInitialized;
- (BOOL)tabViewShouldDragWindow:(id)arg1 event:(id)arg2;
- (BOOL)themeSupportsAlternateDragModes;
- (void)tabViewDidClickAddTabButton:(id)arg1;
- (id)tabView:(id)arg1 valueOfOption:(id)arg2;
- (BOOL)shouldTweakMinimalTabOutlineAlpha;
- (id)tabView;
- (void)tabsDidReorder;
- (void)setLegacyBackgroundColor:(id)arg1;
- (BOOL)titleBarShouldAppearTransparent;
- (void)setMojaveBackgroundColor:(id)arg1;
- (void)safeSetAppearance:(id)arg1;
- (void)disableDeferSetAppearance;
- (BOOL)anyPaneIsTransparent;
- (void)setBackgroundColor:(id)arg1;
- (void)updateTabColors;
- (void)tabView:(id)arg1 updateStateForTabViewItem:(id)arg2;
- (void)tabViewDoubleClickTabBar:(id)arg1;
- (void)setCurrentTabTitle:(id)arg1;
- (void)releaseTabTitleTextFieldDelegate;
- (void)openEditTabTitleWindow;
- (void)editTabTitle:(id)arg1;
- (void)tabView:(id)arg1 doubleClickTabViewItem:(id)arg2;
- (id)tabView:(id)arg1 toolTipForTabViewItem:(id)arg2;
- (BOOL)tabView:(id)arg1 shouldAcceptDragFromSender:(id)arg2;
- (id)tabView:(id)arg1 unknownObjectWasDropped:(id)arg2;
- (unsigned long long)tabView:(id)arg1 draggingEnteredTabBarForSender:(id)arg2;
- (id)allowedDraggedTypesForTabView:(id)arg1;
- (id)tabView:(id)arg1 newTabBarForDraggedTabViewItem:(id)arg2 atPoint:(struct CGPoint)arg3;
- (id)tabView:(id)arg1 menuForTabViewItem:(id)arg2;
- (void)tabViewDidChangeNumberOfTabViewItems:(id)arg1;
- (BOOL)useSeparateStatusbarsPerPane;
- (id)tabView:(id)arg1 imageForTabViewItem:(id)arg2 styleMask:(unsigned long long *)arg3;
- (BOOL)tabViewDragShouldExitWindow:(id)arg1;
- (id)imageFromNonSelectedTabViewItem:(id)arg1;
- (id)imageFromSelectedTabView:(id)arg1 tabViewItem:(id)arg2;
- (void)tabView:(id)arg1 closeWindowForLastTabViewItem:(id)arg2;
- (void)didDonateTab:(id)arg1 toWindowController:(id)arg2;
- (void)tabView:(id)arg1 didDropTabViewItem:(id)arg2 inTabBar:(id)arg3;
- (void)_updateTabObjectCounts;
- (void)tabView:(id)arg1 willDropTabViewItem:(id)arg2 inTabBar:(id)arg3;
- (BOOL)tabView:(id)arg1 shouldDropTabViewItem:(id)arg2 inTabBar:(id)arg3 moveSourceWindow:(char *)arg4;
- (BOOL)droppingTabOutsideWindowMovesWindow;
- (BOOL)tabView:(id)arg1 shouldDragTabViewItem:(id)arg2 fromTabBar:(id)arg3;
- (BOOL)tabView:(id)arg1 shouldCloseTabViewItem:(id)arg2 suppressConfirmation:(BOOL)arg3;
- (BOOL)tabView:(id)arg1 shouldCloseTabViewItem:(id)arg2;
- (void)tabView:(id)arg1 willInsertTabViewItem:(id)arg2 atIndex:(int)arg3;
- (void)tabView:(id)arg1 willAddTabViewItem:(id)arg2;
- (void)tabView:(id)arg1 willRemoveTabViewItem:(id)arg2;
- (void)saveAffinitiesLater:(id)arg1;
- (void)saveAffinitiesAndOriginsForController:(id)arg1;
- (void)showOrHideInstantReplayBar;
- (void)notifyTmuxOfTabChange;
- (void)updateProxyIcon;
- (BOOL)proxyIconIsAllowed;
- (void)updateUseMetalInAllTabs;
- (void)tabView:(id)arg1 didSelectTabViewItem:(id)arg2;
- (void)reallyDisableBlurIfNeeded;
- (void)disableBlur;
- (void)enableBlur:(double)arg1;
- (void)tabView:(id)arg1 willSelectTabViewItem:(id)arg2;
- (void)tabView:(id)arg1 closeTab:(id)arg2;
- (void)menuForEvent:(id)arg1 menu:(id)arg2;
- (void)editSession:(id)arg1 makeKey:(BOOL)arg2;
- (void)editCurrentSession:(id)arg1;
- (void)editSession:(id)arg1;
- (BOOL)sessionInitiatedResize:(id)arg1 width:(int)arg2 height:(int)arg3;
- (void)loadAutoSaveFrame;
- (void)windowWillShowInitial;
- (struct CGRect)windowWillUseStandardFrame:(id)arg1 defaultFrame:(struct CGRect)arg2;
- (void)windowWillBeginSheet:(id)arg1;
- (void)windowDidExitFullScreen:(id)arg1;
- (void)windowWillExitFullScreen:(id)arg1;
- (void)hideStandardWindowButtonsAndTitlebarAccessories;
- (void)windowDidFailToEnterFullScreen:(id)arg1;
- (void)didFinishFullScreenTransitionSuccessfully:(BOOL)arg1;
- (void)windowDidEnterFullScreen:(id)arg1;
- (void)windowWillEnterFullScreen:(id)arg1;
- (void)returnTabBarToContentView;
- (void)updateTabBarControlIsTitlebarAccessory;
- (BOOL)tabBarShouldBeAccessory;
- (BOOL)shouldShowPermanentFullScreenTabBar;
- (BOOL)shouldMoveTabBarToTitlebarAccessoryInLionFullScreen;
- (id)titleBarAccessoryTabBarViewController;
- (void)didChangeAnyFullScreen;
- (void)windowDidEndLiveResize:(id)arg1;
- (void)windowWillStartLiveResize:(id)arg1;
- (BOOL)windowTitleIsVisible;
- (BOOL)scrollbarShouldBeVisible;
- (long long)scrollerStyle;
- (BOOL)tabBarShouldBeVisibleWithAdditionalTabs:(int)arg1;
- (BOOL)tabBarShouldBeVisible;
- (BOOL)tabBarShouldBeVisibleEvenWhenOnLoan;
- (BOOL)fullScreen;
- (void)didChangeCompactness;
- (void)updateWindowShadowForNonFullScreenWindowDisablingIfAnySessionHasTransparency:(id)arg1;
- (void)updateForTransparency:(id)arg1;
- (void)updateWindowMenu;
- (void)didToggleTraditionalFullScreenModeWithSavedToolbeltWidth:(double)arg1;
- (void)didExitTraditionalFullScreenMode;
- (void)toggleTraditionalFullScreenMode;
- (void)updateTransparencyBeforeTogglingTraditionalFullScreenMode;
- (BOOL)shouldHaveShortcutAccessory;
- (void)addShortcutAccessorViewControllerToTitleBarIfNeeded;
- (void)willExitTraditionalFullScreenMode;
- (void)safelySetStyleMask:(unsigned long long)arg1;
- (void)willEnterTraditionalFullScreenMode;
- (BOOL)replaceWindowWithWindowOfType:(int)arg1;
- (id)setWindowWithWindowType:(int)arg1 savedWindowType:(int)arg2 windowTypeForStyleMask:(int)arg3 hotkeyWindowType:(unsigned long long)arg4 initialFrame:(struct CGRect)arg5;
- (struct CGSize)preferredWindowFrameToPerfectlyFitCurrentSessionInInitialConfiguration;
- (unsigned long long)styleMask;
- (BOOL)updateSessionScrollbars;
- (void)delayedEnterFullscreen;
- (void)toggleFullScreenMode:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (BOOL)toggleFullScreenShouldUseLionFullScreen;
- (void)toggleFullScreenMode:(id)arg1;
@property(readonly, nonatomic) BOOL togglingLionFullScreen;
- (void)enterTraditionalFullScreenMode;
- (struct CGRect)traditionalFullScreenFrameForScreen:(id)arg1;
- (BOOL)fullScreenWindowFrameShouldBeShiftedDownBelowMenuBarOnScreen:(id)arg1;
- (struct CGRect)traditionalFullScreenFrame;
- (void)enterFullScreenMode;
- (BOOL)useTransparency;
- (void)toggleUseTransparency:(id)arg1;
- (void)haveTransparentPaneDidChange;
- (void)updateUseTransparency;
- (BOOL)isShowingTransientTitle;
- (void)clearTransientTitle;
- (void)windowDidResize:(id)arg1;
- (void)windowDidMove:(id)arg1;
- (void)windowWillMove:(id)arg1;
- (void)clearForceFrame;
- (void)forceFrame:(struct CGRect)arg1;
- (id)screenConfiguration;
- (void)windowDidChangeScreen:(id)arg1;
- (void)saveTmuxWindowOrigins;
- (void)tmuxTabLayoutDidChange:(BOOL)arg1 tab:(id)arg2 variableWindowSize:(BOOL)arg3;
- (id)uniqueTmuxControllers;
- (BOOL)getAndResetRestorableState;
- (void)invalidateRestorableState;
- (struct CGSize)windowWillResize:(id)arg1 toSize:(struct CGSize)arg2;
- (BOOL)lionFullScreen;
- (BOOL)anyFullScreen;
- (BOOL)tabBarAlwaysVisible;
- (struct NSEdgeInsets)tabBarInsetsForCompactWindow;
- (struct NSEdgeInsets)tabBarInsets;
- (BOOL)enableStoplightHotbox;
- (BOOL)movesWhenDraggedOntoSelf;
- (BOOL)isEdgeWindow;
- (void)windowDidResignMain:(id)arg1;
- (void)windowDidBecomeMain:(id)arg1;
- (void)windowDidResignKey:(id)arg1;
- (void)applicationDidResignActive:(id)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)windowOcclusionDidChange:(id)arg1;
- (void)screenParametersDidChange;
- (struct CGRect)canonicalFrameForScreen:(id)arg1 windowFrame:(struct CGRect)arg2 preserveSize:(BOOL)arg3;
- (struct CGRect)visibleFrameForScreen:(id)arg1;
- (struct CGRect)screenFrameForEdgeSpanningWindows:(id)arg1;
- (struct CGRect)canonicalFrameForScreen:(id)arg1;
- (void)canonicalizeWindowFrame;
- (void)toolbeltDidFinishGrowing;
- (double)growToolbeltBy:(double)arg1;
- (BOOL)disableFocusFollowsMouse;
- (void)makeCurrentSessionFirstResponder;
- (void)windowDidBecomeKey:(id)arg1;
- (void)windowWillMiniaturize:(id)arg1;
- (void)windowWillClose:(id)arg1;
- (void)closeInstantReplayWindow;
- (void)killOrHideTmuxWindow;
- (BOOL)windowShouldClose:(id)arg1;
- (int)numRunningSessions;
- (void)refreshTools;
- (id)toolbelt;
- (id)promptOnCloseReason;
- (void)windowDidDeminiaturize:(id)arg1;
- (id)arrangement;
- (id)arrangementWithTabs:(id)arg1 includingContents:(BOOL)arg2;
- (id)expurgatedInitialProfile;
- (id)arrangementExcludingTmuxTabs:(BOOL)arg1 includingContents:(BOOL)arg2;
- (BOOL)restoreTabsFromArrangement:(id)arg1 named:(id)arg2 sessions:(id)arg3;
- (BOOL)stringIsValidTerminalGuid:(id)arg1;
- (BOOL)loadArrangement:(id)arg1 named:(id)arg2 sessions:(id)arg3;
- (BOOL)loadArrangement:(id)arg1 named:(id)arg2;
- (void)hideAfterOpening;
- (void)endTmuxOriginatedResize;
- (void)beginTmuxOriginatedResize;
- (void)loadTmuxLayout:(id)arg1 window:(int)arg2 tmuxController:(id)arg3 name:(id)arg4;
- (struct CGSize)tmuxCompatibleSize;
- (void)newTmuxTab:(id)arg1;
- (void)newTmuxWindow:(id)arg1;
- (id)currentTmuxController;
- (void)forceDetachTmux:(id)arg1;
- (void)detachTmux:(id)arg1;
- (void)findUrls:(id)arg1;
- (void)editWindowTitle:(id)arg1;
@property(readonly, nonatomic) iTermVariableScope<iTermWindowScope> *scope; // @synthesize scope=_scope;
@property(readonly, nonatomic) iTermVariables *variables; // @synthesize variables=_variables;
- (BOOL)broadcastInputToSession:(id)arg1;
- (void)sendInputToAllSessions:(id)arg1 encoding:(unsigned long long)arg2 forceEncoding:(BOOL)arg3;
- (id)broadcastSessions;
- (void)setWindowTitle:(id)arg1;
- (void)setWindowTitle;
- (id)currentSession;
- (void)makeSessionActive:(id)arg1;
- (id)currentTab;
- (int)numberOfTabs;
- (void)nextPane:(id)arg1;
- (void)previousPane:(id)arg1;
- (void)nextTab:(id)arg1;
- (void)previousTab:(id)arg1;
- (void)moveTabToNewWindow:(id)arg1;
- (void)selectPreviousTab:(id)arg1;
- (void)selectNextTab:(id)arg1;
- (void)restartSessionWithConfirmation:(id)arg1;
- (void)restartSession:(id)arg1;
- (void)closeSessionWithoutConfirmation:(id)arg1;
- (BOOL)closeSessionWithConfirmation:(id)arg1;
- (void)closeCurrentSession:(id)arg1;
- (BOOL)closeTabIfConfirmed:(id)arg1;
- (void)closeCurrentTab:(id)arg1;
- (void)colorPresetsDidChange:(id)arg1;
- (void)keyBindingsDidChange:(id)arg1;
- (void)activeSpaceDidChange:(id)arg1;
- (void)updateFullScreenTabBar:(id)arg1;
- (BOOL)hasSavedScrollPosition;
- (void)jumpToSavedScrollPosition:(id)arg1;
- (void)saveScrollPosition:(id)arg1;
- (void)toggleSelectionRespectsSoftBoundaries:(id)arg1;
- (void)toggleCursorGuide:(id)arg1;
- (void)findCursor:(id)arg1;
- (void)removeTab:(id)arg1;
- (id)restorableSessionForTab:(id)arg1;
- (void)storeWindowStateInRestorableSession:(id)arg1;
- (id)restorableSessionForSession:(id)arg1;
- (void)closeTab:(id)arg1;
- (void)closeTab:(id)arg1 soft:(BOOL)arg2;
- (BOOL)willShowTmuxWarningWhenClosingTab:(id)arg1;
- (BOOL)tabIsAttachedTmuxTabWithSessions:(id)arg1;
- (void)performClose:(id)arg1;
- (void)close;
- (void)closeTerminalWindow:(id)arg1;
- (BOOL)confirmCloseTab:(id)arg1 suppressConfirmation:(BOOL)arg2;
- (BOOL)confirmCloseForSessions:(id)arg1 identifier:(id)arg2 genericName:(id)arg3;
- (void)setWindowType:(int)arg1;
- (int)savedWindowType;
- (int)windowType;
- (void)softCloseSession:(id)arg1;
- (void)closeSession:(id)arg1;
- (BOOL)ptyWindowIsDraggable:(id)arg1;
- (unsigned long long)ptyWindowTitleBarFlavor;
- (BOOL)terminalWindowUseMinimalStyle;
- (BOOL)shouldUseMinimalStyle;
- (id)terminalWindowDecorationTextColorForBackgroundColor:(id)arg1;
- (id)terminalWindowTabStyle;
- (id)terminalWindowDecorationControlColor;
- (id)terminalWindowDecorationBackgroundColor;
- (BOOL)terminalWindowShouldConstrainFrameToScreen;
- (BOOL)miniaturizedWindowShouldPreserveFrameUntilDeminiaturized;
- (void)tabSessionDidChangeTransparency:(id)arg1;
- (void)tabAddSwiftyStringsToGraph:(id)arg1;
- (void)tabTitleDidChange:(id)arg1;
- (id)tabForSession:(id)arg1;
- (void)closeSession:(id)arg1 soft:(BOOL)arg2;
- (long long)indexOfTab:(id)arg1;
- (void)selectSessionAtIndexAction:(id)arg1;
- (void)swipeWithEvent:(id)arg1;
- (void)magnifyWithEvent:(id)arg1;
@property(readonly, nonatomic) NSScreen *screen;
- (id)tabWithUniqueId:(int)arg1;
- (id)ptyWindow;
- (void)setFrameValue:(id)arg1;
@property(readonly, nonatomic) int number;
- (id)terminalDraggedFromAnotherWindowAtPoint:(struct CGPoint)arg1;
- (void)tmuxFontDidChange:(id)arg1;
- (void)draggingDidBeginOrEnd:(id)arg1;
- (void)popupWillClose:(id)arg1;
- (void)toggleToolbeltVisibility:(id)arg1;
- (BOOL)showToolbeltNotFullScreen;
- (void)setDefaultToolbeltWidth:(id)arg1;
- (void)hideToolbelt;
@property(readonly, nonatomic) BOOL windowIsResizing;
@property(readonly, nonatomic) BOOL shouldShowToolbelt;
- (void)notifyTmuxOfWindowResize;
- (void)toggleBroadcastingToCurrentSession:(id)arg1;
- (double)tabviewWidth;
- (void)rootTerminalViewDidResizeContentArea;
- (BOOL)rootTerminalViewShouldDrawWindowTitleInPlaceOfTabBar;
- (BOOL)divisionViewShouldBeVisible;
- (BOOL)tabBarVisibleOnTop;
- (BOOL)tabBarVisibleOnTopEvenWhenOnLoan;
@property(readonly, copy) NSString *description;
- (void)iterm_dealloc;
- (void)dealloc;
- (id)weakSelf;
- (void)finishToolbeltInitialization;
@property(readonly, nonatomic) unsigned long long desiredWindowCollectionBehavior;
- (BOOL)isFloatingHotKeyWindow;
- (BOOL)isHotKeyWindow;
@property(copy, nonatomic) NSString *terminalGuid;
- (void)updateVariables;
- (void)finishInitializationWithSmartLayout:(BOOL)arg1 windowType:(int)arg2 savedWindowType:(int)arg3 screen:(int)arg4 hotkeyWindowType:(unsigned long long)arg5 profile:(id)arg6;
- (id)anchorToScreenNumber:(int)arg1;
- (id)initWithSmartLayout:(BOOL)arg1 windowType:(int)arg2 savedWindowType:(int)arg3 screen:(int)arg4 hotkeyWindowType:(unsigned long long)arg5 profile:(id)arg6;
- (id)initWithSmartLayout:(BOOL)arg1 windowType:(int)arg2 savedWindowType:(int)arg3 screen:(int)arg4 profile:(id)arg5;
- (id)initWithWindowNibName:(id)arg1;
- (struct CGSize)scrubber:(id)arg1 layout:(id)arg2 sizeForItemAtIndex:(long long)arg3;
- (id)scrubber:(id)arg1 viewForItemAtIndex:(long long)arg2;
- (id)scrubber:(id)arg1 labelAtIndex:(long long)arg2;
- (long long)numberOfItemsForScrubber:(id)arg1;
- (void)scrubber:(id)arg1 didSelectItemAtIndex:(long long)arg2;
- (void)candidateListTouchBarItem:(id)arg1 endSelectingCandidateAtIndex:(long long)arg2;
- (void)sendFunctionKeyToCurrentSession:(long long)arg1;
- (void)functionKeyTouchBarItemSelected:(id)arg1;
- (void)colorPresetTouchBarItemSelected:(id)arg1;
- (void)statusTouchBarItemSelected:(id)arg1;
- (void)manPageTouchBarItemSelected:(id)arg1;
- (void)previousMarkTouchBarItemSelected:(id)arg1;
- (void)nextMarkTouchBarItemSelected:(id)arg1;
- (void)addMarkTouchBarItemSelected:(id)arg1;
- (void)touchBarItemSelected:(id)arg1;
- (id)touchBar:(id)arg1 makeItemForIdentifier:(id)arg2;
- (id)colorPresetsScrollViewTouchBarItem;
- (void)addButtonsToColorPresetsDocumentView:(id)arg1;
- (void)constrainButton:(id)arg1 toRightOfSuperview:(id)arg2;
- (void)addConstraintsToButton:(id)arg1 superView:(id)arg2 previous:(id)arg3;
- (id)functionKeysTouchBarItem;
- (void)updateManPageButton:(id)arg1 word:(id)arg2;
- (id)amendTouchBar:(id)arg1;
- (id)idByRemovingVersion:(id)arg1;
- (id)idsByAddingVersions:(id)arg1;
- (id)versionFor:(id)arg1 withValue:(id)arg2;
- (void)updateTouchBarIfNeeded:(BOOL)arg1;
- (id)makeGenericTouchBar;
- (void)updateTouchBarFunctionKeyLabelsInScrollView:(id)arg1;
- (void)updateStatus;
- (void)updateTouchBarWithWordAtCursor:(id)arg1;
- (void)updateColorPresets;
- (void)updateTouchBarFunctionKeyLabels;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

