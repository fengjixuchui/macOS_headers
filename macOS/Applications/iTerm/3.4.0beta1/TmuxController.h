//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "iTermTmuxBufferSizeMonitorDelegate.h"

@class EquivalenceClassSet, NSArray, NSDictionary, NSMutableArray, NSMutableDictionary, NSMutableSet, NSString, NSTimer, ProfileModel, TmuxGateway, iTermTmuxBufferSizeMonitor;

@interface TmuxController : NSObject <iTermTmuxBufferSizeMonitorDelegate>
{
    TmuxGateway *gateway_;
    NSMutableDictionary *windowPanes_;
    NSMutableDictionary *_windowStates;
    NSArray *sessionObjects_;
    int numOutstandingWindowResizes_;
    NSMutableDictionary *windowPositions_;
    struct CGSize lastSize_;
    NSString *lastOrigins_;
    NSString *sessionName_;
    int sessionId_;
    NSMutableSet *pendingWindowOpens_;
    NSString *lastSaveAffinityCommand_;
    EquivalenceClassSet *affinities_;
    BOOL windowOriginsDirty_;
    BOOL haveOutstandingSaveWindowOrigins_;
    NSMutableDictionary *origins_;
    NSMutableSet *hiddenWindows_;
    NSTimer *listSessionsTimer_;
    BOOL ambiguousIsDoubleWidth_;
    NSMutableDictionary *_hotkeys;
    NSMutableSet *_paneIDs;
    NSMutableDictionary *_tabColors;
    NSMutableDictionary *_windowOpenerOptions;
    BOOL _manualOpenRequested;
    BOOL _haveOpenedInitialWindows;
    ProfileModel *_profileModel;
    NSMutableDictionary *_pendingWindows;
    BOOL _hasStatusBar;
    int _currentWindowID;
    NSMutableDictionary *_userVars;
    NSMutableDictionary *_when;
    NSMutableArray *_listWindowsQueue;
    int _paneToActivateWhenCreated;
    iTermTmuxBufferSizeMonitor *_tmuxBufferMonitor;
    NSMutableDictionary *_windowSizes;
    BOOL detached_;
    BOOL _detaching;
    BOOL _variableWindowSize;
    BOOL _shouldSetTitles;
    BOOL _serverIsLocal;
    long long _unicodeVersion;
    NSString *_clientName;
    NSDictionary *_sharedProfile;
    NSDictionary *_sharedFontOverrides;
    NSString *_sessionGuid;
    NSString *_defaultTerminal;
    struct CGRect _initialWindowHint;
}

@property(nonatomic) struct CGRect initialWindowHint; // @synthesize initialWindowHint=_initialWindowHint;
@property(readonly, nonatomic) NSString *defaultTerminal; // @synthesize defaultTerminal=_defaultTerminal;
@property(readonly, nonatomic) BOOL serverIsLocal; // @synthesize serverIsLocal=_serverIsLocal;
@property(readonly, nonatomic) BOOL shouldSetTitles; // @synthesize shouldSetTitles=_shouldSetTitles;
@property(readonly, nonatomic) BOOL variableWindowSize; // @synthesize variableWindowSize=_variableWindowSize;
@property(copy, nonatomic) NSString *sessionGuid; // @synthesize sessionGuid=_sessionGuid;
@property(readonly, nonatomic) NSDictionary *sharedFontOverrides; // @synthesize sharedFontOverrides=_sharedFontOverrides;
@property(copy, nonatomic) NSDictionary *sharedProfile; // @synthesize sharedProfile=_sharedProfile;
@property(readonly, nonatomic) BOOL detaching; // @synthesize detaching=_detaching;
@property(copy, nonatomic) NSString *clientName; // @synthesize clientName=_clientName;
@property(nonatomic) long long unicodeVersion; // @synthesize unicodeVersion=_unicodeVersion;
@property(readonly, nonatomic) BOOL detached; // @synthesize detached=detached_;
@property(readonly, nonatomic) int sessionId; // @synthesize sessionId=sessionId_;
@property(nonatomic) BOOL ambiguousIsDoubleWidth; // @synthesize ambiguousIsDoubleWidth=ambiguousIsDoubleWidth_;
@property(copy, nonatomic) NSArray *sessionObjects; // @synthesize sessionObjects=sessionObjects_;
@property(copy, nonatomic) NSString *sessionName; // @synthesize sessionName=sessionName_;
@property(retain, nonatomic) NSMutableDictionary *windowPositions; // @synthesize windowPositions=windowPositions_;
@property(readonly, nonatomic) TmuxGateway *gateway; // @synthesize gateway=gateway_;
- (void)tmuxBufferSizeMonitor:(id)arg1 updatePane:(int)arg2 ttl:(double)arg3 redzone:(BOOL)arg4;
- (void)setCurrentLatency:(double)arg1 forPane:(int)arg2;
- (void)setUserVariableWithKey:(id)arg1 value:(id)arg2 pane:(int)arg3;
- (id)mutableUserVarsForPane:(int)arg1;
- (id)userVarsForPane:(int)arg1;
- (void)setEncodedUserVars:(id)arg1 forPane:(int)arg2;
- (id)userVarsString:(int)arg1;
- (void)setCurrentWindow:(int)arg1;
- (void)didSwapWindows:(id)arg1;
- (void)responseForListWindows:(id)arg1 toSetPartialOrder:(id)arg2;
- (void)setPartialWindowIdOrder:(id)arg1;
- (void)sendInitialWindowsOpenedNotificationIfNeeded;
- (void)windowDidOpen:(id)arg1;
- (void)closeAllPanes;
- (void)newWindowWithAffinityCreated:(id)arg1 affinityWindowAndCompletion:(id)arg2;
- (void)releaseWindow:(int)arg1;
- (void)retainWindow:(int)arg1 withTab:(id)arg2;
- (void)parseListWindowsResponseAndUpdateLayouts:(id)arg1;
- (void)listWindowsResponse:(id)arg1;
- (void)listedWindowsToOpenOne:(id)arg1 forWindowIdAndAffinities:(id)arg2;
- (void)listSessionsResponse:(id)arg1;
- (void)setAffinitiesFromString:(id)arg1;
- (id)windowOptionsFromString:(id)arg1;
- (id)componentsOfAffinities:(id)arg1;
- (void)getAffinitiesResponse:(id)arg1;
- (void)getHiddenWindowsResponse:(id)arg1;
- (void)didListWindows:(id)arg1 userData:(id)arg2;
- (int)windowIdFromString:(id)arg1;
- (void)getTabColorsResponse:(id)arg1;
- (void)getHotkeysResponse:(id)arg1;
- (id)tabColorsString;
- (id)hotkeysString;
- (id)shortStringForHotkeyDictionary:(id)arg1 paneID:(int)arg2;
- (void)getOriginsResponse:(id)arg1;
- (void)activeWindowPaneDidChangeInWindow:(int)arg1 toWindowPane:(int)arg2;
@property(readonly, nonatomic) NSArray *windowPaneIDs;
- (id)clientSessions;
- (void)didListWindowsSubsequentToSettingLayout:(id)arg1;
- (void)didSetLayout:(id)arg1;
- (void)setLayoutInWindowPane:(int)arg1 toLayoutNamed:(id)arg2;
- (void)setLayoutInWindow:(int)arg1 toLayout:(id)arg2;
- (void)setTmuxFont:(id)arg1 nonAsciiFont:(id)arg2 hSpacing:(double)arg3 vSpacing:(double)arg4 window:(int)arg5;
- (void)toggleZoomForPane:(int)arg1;
- (void)swapPane:(int)arg1 withPane:(int)arg2;
- (void)listSessions;
- (void)changeWindow:(int)arg1 tabTo:(id)arg2;
- (id)windowWithAffinityForWindowId:(int)arg1;
- (id)terminalWithGuid:(id)arg1;
- (void)saveAffinities;
- (id)windowOptionsForTerminal:(id)arg1;
- (void)saveWindowOriginsResponse:(id)arg1;
- (void)saveWindowOrigins;
- (void)saveHiddenWindows;
- (void)listWindowsTimerFired:(id)arg1;
- (void)listWindowsInSessionNumber:(int)arg1 target:(id)arg2 selector:(SEL)arg3 object:(id)arg4;
- (void)attachToSessionWithNumber:(int)arg1;
- (void)addSessionWithName:(id)arg1;
- (void)killSessionNumber:(int)arg1;
- (void)renameSessionNumber:(int)arg1 to:(id)arg2;
- (id)positionForWindowWithPanes:(id)arg1 windowID:(int)arg2;
- (void)moveWindowId:(int)arg1 inSessionNumber:(int)arg2 toSessionNumber:(int)arg3;
- (void)linkWindowId:(int)arg1 inSessionNumber:(int)arg2 toSessionNumber:(int)arg3;
- (void)openWindowWithId:(int)arg1 intentional:(BOOL)arg2 profile:(id)arg3;
- (void)openWindowWithId:(int)arg1 affinities:(id)arg2 intentional:(BOOL)arg3 profile:(id)arg4;
- (void)hideWindows:(id)arg1 andCloseTabs:(BOOL)arg2;
- (void)hideWindow:(int)arg1;
- (BOOL)windowIsHidden:(int)arg1;
- (void)windowPaneBrokeOutWithWindowId:(id)arg1 setAffinityTo:(id)arg2;
- (void)breakOutWindowPane:(int)arg1 toTabAside:(id)arg2;
- (void)breakOutWindowPane:(int)arg1 toPoint:(struct CGPoint)arg2;
- (id)breakPaneWindowPaneFlag;
- (void)killWindow:(int)arg1;
- (id)tabColorStringForWindowPane:(int)arg1;
- (id)hotkeyForWindowPane:(int)arg1;
- (void)sendCommandToSetTabColors;
- (void)sendCommandToSetHotkeys;
- (id)decodedString:(id)arg1 optionalPrefix:(id)arg2;
- (id)encodedString:(id)arg1 prefix:(id)arg2;
- (void)getPaneIDsResponseAndSetTabColors:(id)arg1;
- (void)getPaneIDsResponseAndSetHotkeys:(id)arg1;
- (void)setTabColorString:(id)arg1 forWindowPane:(int)arg2;
- (void)setHotkeyForWindowPane:(int)arg1 to:(id)arg2;
- (void)renamePane:(int)arg1 toTitle:(id)arg2;
- (BOOL)canRenamePane;
- (void)renameWindowWithId:(int)arg1 inSessionNumber:(id)arg2 toName:(id)arg3;
- (id)stringByEscapingBackslashesAndRemovingNewlines:(id)arg1;
- (void)unlinkWindowWithId:(int)arg1;
- (void)killWindowPane:(int)arg1;
- (void)movePane:(int)arg1 intoPane:(int)arg2 isVertical:(BOOL)arg3 before:(BOOL)arg4;
- (void)newWindowWithAffinity:(id)arg1 size:(struct CGSize)arg2 initialDirectory:(id)arg3 scope:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)newWindowInSessionNumber:(id)arg1 scope:(id)arg2 initialDirectory:(id)arg3;
- (void)selectPane:(int)arg1;
- (void)didSplit:(id)arg1 state:(id)arg2;
- (void)recordPanes:(id)arg1 state:(id)arg2;
- (void)splitWindowPane:(int)arg1 vertically:(BOOL)arg2 scope:(id)arg3 initialDirectory:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)windowPane:(int)arg1 resizedBy:(int)arg2 horizontally:(BOOL)arg3;
@property(readonly, nonatomic) BOOL hasOutstandingWindowResize;
- (void)showWindowOptionsResponse:(id)arg1;
- (id)unsupportedGlobalOptions;
- (void)optionValidationFailedForOption:(id)arg1;
- (BOOL)recyclingSupported;
- (BOOL)versionAtLeastDecimalNumberWithString:(id)arg1;
- (void)didGuessVersion;
- (void)guessVersion18Response:(id)arg1;
- (void)guessVersion21Response:(id)arg1;
- (void)guessVersion22Response:(id)arg1;
- (void)guessVersion23Response:(id)arg1;
- (void)handleDisplayMessageVersion:(id)arg1;
- (void)checkForUTF8Response:(id)arg1;
- (void)increaseMinimumServerVersionTo:(id)arg1;
- (void)decreaseMaximumServerVersionTo:(id)arg1;
- (void)guessVersion;
- (void)handleShowSetTitles:(id)arg1;
- (void)loadTitleFormat;
- (void)didFetchDefaultTerminal:(id)arg1;
- (void)loadDefaultTerminal;
- (void)didLoadServerPID:(id)arg1;
- (void)loadServerPID;
- (void)clearHistoryForWindowPane:(int)arg1;
- (void)checkForUTF8;
- (void)handleStatusResponse:(id)arg1;
- (void)validateOptions;
- (void)didPause:(id)arg1 panes:(id)arg2;
- (void)pausePanes:(id)arg1;
- (void)panesDidUnpause:(id)arg1;
- (void)unpausePanes:(id)arg1;
- (void)didPausePane:(int)arg1;
- (void)enablePauseModeIfPossible;
- (void)handlePingResponse:(id)arg1;
- (void)ping;
- (void)setClientSize:(struct CGSize)arg1;
- (int)adjustHeightForStatusBar:(int)arg1;
- (void)handleResizeWindowResponse:(id)arg1;
- (id)commandListToSetSize:(struct CGSize)arg1 ofWindows:(id)arg2;
- (id)commandListToSetWindowSizes:(id)arg1;
- (void)setWindowSizes:(id)arg1;
- (id)commandListToSetSize:(struct CGSize)arg1 ofWindow:(int)arg2;
- (void)setSize:(struct CGSize)arg1 window:(int)arg2;
- (void)fitLayoutToVariableSizeWindows;
- (void)fitLayoutToWindows;
- (struct CGSize)sizeOfSmallestWindowAmong:(id)arg1;
- (void)variableSizeWindowDidResize:(id)arg1;
- (void)windowDidResize:(id)arg1;
- (void)detach;
- (void)requestDetach;
@property(readonly, nonatomic, getter=isAttached) BOOL attached;
- (id)sessionsInWindow:(int)arg1;
- (id)window:(int)arg1;
- (void)whenPaneRegistered:(int)arg1 call:(CDUnknownBlockType)arg2;
- (void)deregisterWindow:(int)arg1 windowPane:(int)arg2 session:(id)arg3;
- (void)registerSession:(id)arg1 withPane:(int)arg2 inWindow:(int)arg3;
- (id)sessionForWindowPane:(int)arg1;
- (id)_keyForWindowPane:(int)arg1;
- (void)getSessionGuidResponse:(id)arg1;
- (id)attachedSessionGuids;
- (void)openWindowsOfSize:(CDStruct_1ef3fb1f)arg1;
- (void)handleShowSize:(id)arg1;
- (void)openWindowsInitial;
- (void)initialListWindowsResponse:(id)arg1;
- (id)savedAffinitiesForWindow:(id)arg1;
- (id)listWindowFields;
- (void)windowsChanged;
- (void)windowWasRenamedWithId:(int)arg1 to:(id)arg2;
- (void)session:(int)arg1 renamedTo:(id)arg2;
- (void)sessionsChanged;
- (void)sessionChangedTo:(id)arg1 sessionId:(int)arg2;
- (void)setLayoutInTab:(id)arg1 toLayout:(id)arg2 zoomed:(id)arg3;
- (void)openWindowWithIndex:(int)arg1 name:(id)arg2 size:(struct CGSize)arg3 layout:(id)arg4 affinities:(id)arg5 windowFlags:(id)arg6 profile:(id)arg7 initial:(BOOL)arg8;
- (id)fontOverridesForWindow:(int)arg1;
- (id)profileForWindow:(int)arg1;
- (void)dealloc;
- (id)initWithGateway:(id)arg1 clientName:(id)arg2 profile:(id)arg3 profileModel:(id)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

