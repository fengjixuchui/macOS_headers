//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 25 2017 03:49:04).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "AMSURLProtocolDelegate-Protocol.h"
#import "MZKeyValueStoreDeserializeOperationDelegate-Protocol.h"
#import "MZKeyValueStoreOperationDelegate-Protocol.h"
#import "NSURLSessionTaskDelegate-Protocol.h"

@class IMURLRequestService, MZKeyValueStoreAuthenticationController, MZKeyValueStoreDeserializer, MZKeyValueStoreTransaction, MZTaskAssertion, NSMutableArray, NSString, NSURL;
@protocol MZKeyValueStoreControllerDelegate, OS_dispatch_queue;

@interface MZKeyValueStoreController : NSObject <MZKeyValueStoreOperationDelegate, MZKeyValueStoreDeserializeOperationDelegate, NSURLSessionTaskDelegate, AMSURLProtocolDelegate>
{
    NSURL *_defaultGetURL;
    NSURL *_defaultSetURL;
    NSString *_defaultDomain;
    BOOL _enabled;
    MZKeyValueStoreAuthenticationController *_authenticationController;
    BOOL _canRequestStoreSignIn;
    BOOL _resolvingError;
    id <MZKeyValueStoreControllerDelegate> _delegate;
    NSMutableArray *_pendingTransactions;
    MZKeyValueStoreTransaction *_currentTransaction;
    MZKeyValueStoreDeserializer *_currentDeserializer;
    NSObject<OS_dispatch_queue> *_dispatchQueue;
    MZTaskAssertion *_backgroundTaskAssertion;
    IMURLRequestService *_urlRequestService;
}

- (void).cxx_destruct;
@property(retain, nonatomic) IMURLRequestService *urlRequestService; // @synthesize urlRequestService=_urlRequestService;
@property(retain, nonatomic) MZTaskAssertion *backgroundTaskAssertion; // @synthesize backgroundTaskAssertion=_backgroundTaskAssertion;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue; // @synthesize dispatchQueue=_dispatchQueue;
@property(retain, nonatomic) MZKeyValueStoreDeserializer *currentDeserializer; // @synthesize currentDeserializer=_currentDeserializer;
@property(nonatomic, getter=isResolvingError) BOOL resolvingError; // @synthesize resolvingError=_resolvingError;
@property(retain, nonatomic) MZKeyValueStoreTransaction *currentTransaction; // @synthesize currentTransaction=_currentTransaction;
@property(retain, nonatomic) NSMutableArray *pendingTransactions; // @synthesize pendingTransactions=_pendingTransactions;
@property BOOL canRequestStoreSignIn; // @synthesize canRequestStoreSignIn=_canRequestStoreSignIn;
@property(readonly, getter=isEnabled) BOOL enabled; // @synthesize enabled=_enabled;
@property(retain) MZKeyValueStoreAuthenticationController *authenticationController; // @synthesize authenticationController=_authenticationController;
@property(copy, nonatomic) NSString *defaultDomain; // @synthesize defaultDomain=_defaultDomain;
@property(retain, nonatomic) NSURL *defaultSetURL; // @synthesize defaultSetURL=_defaultSetURL;
@property(retain, nonatomic) NSURL *defaultGetURL; // @synthesize defaultGetURL=_defaultGetURL;
@property __weak id <MZKeyValueStoreControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void)deserializeOperationDidFinish:(id)arg1 shouldReschedule:(BOOL)arg2;
- (void)keyValueStoreOperationOperationDidFinish:(id)arg1;
- (void)keyValueStoreOperation:(id)arg1 scheduleURLRequest:(id)arg2;
- (BOOL)AMSURLSession:(id)arg1 task:(id)arg2 shouldFailWithServerError:(id)arg3;
- (BOOL)AMSURLSession:(id)arg1 shouldHandleAuthenticationForAccount:(id)arg2 dialogDictionary:(id)arg3;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveResponse:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_endBackgroundTask;
- (void)_beginBackgroundTask;
- (void)_delegateTransactionDidFinish:(id)arg1;
- (void)_delegateTransactionDidCancel:(id)arg1 withError:(id)arg2;
- (BOOL)_delegateTransactionDidFail:(id)arg1 withError:(id)arg2;
- (BOOL)_delegateShouldScheduleTransaction:(id)arg1 error:(id *)arg2;
- (void)_errorResolutionDefault:(id)arg1 transaction:(id)arg2;
- (void)_errorResolutionCancel:(id)arg1 transaction:(id)arg2;
- (void)_errorResolutionRetry:(id)arg1 transaction:(id)arg2;
- (void)_resolveError:(id)arg1 transaction:(id)arg2 resolution:(int)arg3;
- (void)_enqueueStoreRequest:(id)arg1 withUrlRequest:(id)arg2;
- (void)_processOperationOutput:(id)arg1 forRequest:(id)arg2;
- (void)_transactionDidCancel:(id)arg1 withError:(id)arg2;
- (void)_transactionDidFail:(id)arg1 withError:(id)arg2;
- (void)_currentTransactionDidFinish;
- (id)_scheduleTransactionWithType:(int)arg1 sinceDomainVersion:(id)arg2 URL:(id)arg3 keys:(id)arg4 processor:(id)arg5;
- (BOOL)_authenticationCanProcessTransaction:(id)arg1 error:(id *)arg2;
- (BOOL)_clampsCanScheduleTransaction:(id)arg1 error:(id *)arg2;
- (BOOL)_isTransactionValid:(id)arg1 error:(id *)arg2;
- (BOOL)_isEnabledForTransaction:(id)arg1 error:(id *)arg2;
- (BOOL)_canScheduleTransaction:(id)arg1 error:(id *)arg2;
- (void)_addPendingTransaction:(id)arg1;
- (void)_scheduleTransaction:(id)arg1;
- (id)_requestForTransaction:(id)arg1;
- (void)_processCurrentTransaction;
- (void)_processPendingTransactions;
- (void)_cancelTransaction:(id)arg1 error:(id)arg2;
- (void)_cancelAllPendingTransactions:(id)arg1;
- (void)performBlockAndWait:(CDUnknownBlockType)arg1;
- (void)performBlock:(CDUnknownBlockType)arg1;
- (BOOL)isIdle;
- (void)reset;
- (void)resolveError:(id)arg1 transaction:(id)arg2 resolution:(int)arg3;
- (void)cancelAllTransactionsCancelCode:(long long)arg1;
- (void)cancelAllTransactions;
- (void)cancelScheduledTransaction:(id)arg1;
- (void)scheduleTransaction:(id)arg1;
- (id)scheduleSetTransactionWithKeys:(id)arg1 processor:(id)arg2;
- (id)scheduleGetTransactionWithKeys:(id)arg1 processor:(id)arg2;
- (id)scheduleGetAllTransactionWithSinceDomainVersion:(id)arg1 processor:(id)arg2;
- (void)_networkTypeChangedNotification:(id)arg1;
- (id)clampsController;
- (void)setEnabled:(BOOL)arg1;
- (BOOL)enabled;
- (void)dealloc;
- (id)initWithDomain:(id)arg1 baseURLForGETAll:(id)arg2 baseURLForPUTAll:(id)arg3;
- (id)scheduleApnSubscriptionTransactionWithDictionary:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

