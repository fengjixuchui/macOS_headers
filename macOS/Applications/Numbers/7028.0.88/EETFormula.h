//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 25 2017 03:49:04).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@interface EETFormula : NSObject
{
}

+ (id)edFormulaFromTSTFormulaPredicate:(id)arg1 atRow:(int)arg2 andCol:(int)arg3 state:(id)arg4;
+ (id)edFormulaFromTSCEFormulaInChart:(id)arg1 state:(id)arg2;
+ (id)edFormulaFromTSCEFormulaInChart:(id)arg1 coalesce:(_Bool)arg2 state:(id)arg3;
+ (void)mapCell:(id)arg1 atRow:(int)arg2 andCol:(int)arg3 toEDCell:(struct EDCellHeader *)arg4 dateOrDurationCell:(_Bool)arg5 state:(id)arg6;
+ (_Bool)buildXlPtgsForFunctionWithTooManyParametersForXl:(unsigned short)arg1 functionName:(id)arg2 argumentCount:(unsigned int)arg3 state:(id)arg4;
+ (_Bool)buildXlPtgsForInsertFunc:(unsigned short)arg1 functionName:(id)arg2 argumentCount:(unsigned int)arg3 state:(id)arg4;
+ (void)buildXlPtgsForFuncID:(unsigned short)arg1 functionName:(id)arg2 numPtgArgs:(unsigned int)arg3 state:(id)arg4;
+ (_Bool)insertDurationReferenceMultiplierToResultIfNeeded:(const struct TSCEValue *)arg1 atArgIndex:(unsigned int)arg2 state:(id)arg3;
+ (_Bool)addDurationReferenceMultiplierToResultIfNeeded:(const struct TSCEValue *)arg1 state:(id)arg2;
+ (_Bool)addOrInsertDurationReferenceMultiplierToResultIfNeeded:(const struct TSCEValue *)arg1 insert:(BOOL)arg2 atArgIndex:(unsigned int)arg3 state:(id)arg4;
+ (void)processNodeArray:(const struct TSCEASTNodeArray *)arg1 state:(id)arg2;
+ (_Bool)checkForAnyDurationCellWithTable1:(const UUIDData_5fbc143e *)arg1 table2:(const UUIDData_5fbc143e *)arg2 row1:(unsigned int)arg3 col1:(unsigned short)arg4 row2:(unsigned int)arg5 col2:(unsigned short)arg6 state:(id)arg7;
+ (int)xlReferenceTypeForFunctionName:(id)arg1 parameter:(unsigned int)arg2;
+ (int)xlReferenceTypeForFunction:(unsigned short)arg1 name:(id)arg2 parameter:(unsigned int)arg3;
+ (_Bool)isSupportedCustomFunctionName:(id)arg1 argumentCount:(unsigned int)arg2 state:(id)arg3;
+ (_Bool)isSupportedFunctionId:(int)arg1 functionName:(id)arg2 argumentCount:(unsigned int)arg3 warning:(int *)arg4 state:(id)arg5;
+ (_Bool)isColumnsOrRowsFunctionSupported:(int)arg1 argumentCount:(unsigned int)arg2 state:(id)arg3;
+ (_Bool)isColumnOrRowFunctionSupported:(int)arg1 argumentCount:(unsigned int)arg2 state:(id)arg3;
+ (_Bool)doesVariableFunctionHaveValidNumberOfParameters:(int)arg1 functionName:(id)arg2 argumentCount:(unsigned int)arg3;
+ (id)finishSharedFormula:(id)arg1 baseCell:(struct EDCellHeader *)arg2 cellRow:(unsigned int)arg3 cellCol:(unsigned int)arg4 baseRow:(unsigned int)arg5 baseCol:(unsigned int)arg6 rowBlocks:(id)arg7;
+ (id)makeSharedFormulaWithBase:(id)arg1 baseIndex:(unsigned long long)arg2 baseRow:(unsigned int)arg3 baseCol:(unsigned int)arg4 row:(unsigned int)arg5 col:(unsigned int)arg6;
+ (id)edFormulaFromTSCEFormula:(id)arg1 atRow:(int)arg2 andCol:(int)arg3 inChart:(_Bool)arg4 inPredicate:(_Bool)arg5 dateOrDurationCell:(_Bool)arg6 coalesce:(_Bool)arg7 state:(id)arg8;
+ (unsigned long long)mapFormula:(id)arg1 atRow:(unsigned int)arg2 andCol:(unsigned int)arg3 toEDCell:(struct EDCellHeader *)arg4 dateOrDurationCell:(_Bool)arg5 state:(id)arg6;
+ (BOOL)isDurationValueForTable:(id)arg1 atRow:(int)arg2 col:(int)arg3 state:(id)arg4;
+ (short)getFunctionId:(id)arg1 withNumArgs:(unsigned int *)arg2 andNameOffset:(unsigned int)arg3 state:(id)arg4;
+ (_Bool)isLogicalFunction:(id)arg1;
+ (_Bool)isValidAddInFunctionName:(id)arg1;
+ (unsigned short)minCountForXMLFunctionName:(id)arg1;
+ (_Bool)isValidXMLFunctionName:(id)arg1;
+ (_Bool)isDurationExtractionFunction:(id)arg1;
+ (id)fixFunctionName:(id)arg1;
+ (int)baseUnitFromFunctionName:(id)arg1;
+ (_Bool)isDateValueFunctionSupportedWithState:(id)arg1;
+ (_Bool)isCharFunctionSupportedWithState:(id)arg1;
+ (_Bool)isConvertSupportedWithState:(id)arg1;
+ (_Bool)isCodeFunctionSupportedWithState:(id)arg1;
+ (_Bool)isTextExtractionFunctionSupportedWithState:(id)arg1;
+ (_Bool)isArrayedFunctionSupported:(int)arg1 state:(id)arg2;
+ (_Bool)isCountIfSupportedWithState:(id)arg1;
+ (_Bool)isSumProductSupportedWithState:(id)arg1 warning:(int *)arg2;
+ (_Bool)isSumIfSupportedWithState:(id)arg1 warning:(int *)arg2;
+ (_Bool)isReferenceAffectedByCategories:(struct TSCEReferenceValue)arg1 state:(id)arg2;
+ (_Bool)isDatedIfFunctionSupportedWithState:(id)arg1;
+ (id)resolveEntity:(const UUIDData_5fbc143e *)arg1 withState:(id)arg2;
+ (id)categoryTableForSheetName:(id)arg1 state:(id)arg2;
+ (id)mappingInfoForSheetName:(id)arg1 state:(id)arg2;
+ (_Bool)isCellRangeAffectedByCategories:(struct TSCERangeCoordinate *)arg1 inViewCoords:(_Bool)arg2 sheetName:(id)arg3 state:(id)arg4;
+ (_Bool)isDurationValueForEntity:(id)arg1 atRow:(int)arg2 col:(int)arg3 state:(id)arg4;
+ (id)retrieveTableEntitiesFrom:(const UUIDData_5fbc143e *)arg1 to:(const UUIDData_5fbc143e *)arg2 state:(id)arg3;
+ (id)functionNameForFunctionSpec:(id)arg1;
+ (_Bool)isAddressFunctionSupported:(unsigned int)arg1;

@end

