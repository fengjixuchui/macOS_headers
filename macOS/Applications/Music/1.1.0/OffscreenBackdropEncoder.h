//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 25 2017 03:49:04).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class MPSImageGaussianBlur, MTLRenderPassDescriptor, NSData, QuadVtx, TransitionQueue;
@protocol MTLBuffer, MTLRenderPipelineState, MTLTexture;

@interface OffscreenBackdropEncoder : NSObject
{
    BOOL _perfShadersWorkOnThisDevice;
    float _averageLuminosity;
    long long _imageDownSample;
    id <MTLTexture> _blurredTexture;
    QuadVtx *_vertices;
    id <MTLTexture> _rotationDrawTexture;
    id <MTLTexture> _intermediateBlurredTexture;
    MPSImageGaussianBlur *_blurObj;
    MTLRenderPassDescriptor *_renderPassDescriptor;
    MTLRenderPassDescriptor *_intermediateBlurPassDescriptor;
    MTLRenderPassDescriptor *_finalBlurRenderPassDescriptor;
    NSData *_weightsInFloats;
    long long _filterWidth;
    id <MTLBuffer> _vertexBuffer;
    id <MTLBuffer> _indexBuffer;
    id <MTLRenderPipelineState> _rotatingArtworkPipelineState;
    id <MTLRenderPipelineState> _horizontalBlurPipelineState;
    id <MTLRenderPipelineState> _verticalBlurPipelineState;
    TransitionQueue *_inputTextures;
    struct CGSize _drawableSizeInPixels;
}

- (void).cxx_destruct;
@property(retain, nonatomic) TransitionQueue *inputTextures; // @synthesize inputTextures=_inputTextures;
@property(retain, nonatomic) id <MTLRenderPipelineState> verticalBlurPipelineState; // @synthesize verticalBlurPipelineState=_verticalBlurPipelineState;
@property(retain, nonatomic) id <MTLRenderPipelineState> horizontalBlurPipelineState; // @synthesize horizontalBlurPipelineState=_horizontalBlurPipelineState;
@property(retain, nonatomic) id <MTLRenderPipelineState> rotatingArtworkPipelineState; // @synthesize rotatingArtworkPipelineState=_rotatingArtworkPipelineState;
@property(retain, nonatomic) id <MTLBuffer> indexBuffer; // @synthesize indexBuffer=_indexBuffer;
@property(retain, nonatomic) id <MTLBuffer> vertexBuffer; // @synthesize vertexBuffer=_vertexBuffer;
@property(nonatomic) long long filterWidth; // @synthesize filterWidth=_filterWidth;
@property(retain, nonatomic) NSData *weightsInFloats; // @synthesize weightsInFloats=_weightsInFloats;
@property(retain, nonatomic) MTLRenderPassDescriptor *finalBlurRenderPassDescriptor; // @synthesize finalBlurRenderPassDescriptor=_finalBlurRenderPassDescriptor;
@property(retain, nonatomic) MTLRenderPassDescriptor *intermediateBlurPassDescriptor; // @synthesize intermediateBlurPassDescriptor=_intermediateBlurPassDescriptor;
@property(retain, nonatomic) MTLRenderPassDescriptor *renderPassDescriptor; // @synthesize renderPassDescriptor=_renderPassDescriptor;
@property(retain, nonatomic) MPSImageGaussianBlur *blurObj; // @synthesize blurObj=_blurObj;
@property(retain) id <MTLTexture> intermediateBlurredTexture; // @synthesize intermediateBlurredTexture=_intermediateBlurredTexture;
@property(retain) id <MTLTexture> rotationDrawTexture; // @synthesize rotationDrawTexture=_rotationDrawTexture;
@property(nonatomic) BOOL perfShadersWorkOnThisDevice; // @synthesize perfShadersWorkOnThisDevice=_perfShadersWorkOnThisDevice;
@property(retain) QuadVtx *vertices; // @synthesize vertices=_vertices;
@property(retain) id <MTLTexture> blurredTexture; // @synthesize blurredTexture=_blurredTexture;
@property(nonatomic) float averageLuminosity; // @synthesize averageLuminosity=_averageLuminosity;
@property(nonatomic) struct CGSize drawableSizeInPixels; // @synthesize drawableSizeInPixels=_drawableSizeInPixels;
@property(nonatomic) long long imageDownSample; // @synthesize imageDownSample=_imageDownSample;
- (void)setBlurValue:(long long)arg1 forDevice:(id)arg2;
- (BOOL)transitionNeeded;
- (BOOL)transitionDidFinish;
-     // Error parsing type: v36@0:8@16^{Uniforms={?=[4]}[4]ffffffffff[3f][3{Model={?=[4]}sf}]}24c32, name: encode:uniforms:dark:
- (void)buildTextures:(id)arg1 forView:(id)arg2;
- (void)calculateWeightsForSigma:(int)arg1;
- (void)addTexture:(id)arg1 withAverageLuminosity:(float)arg2;
- (id)createRotationRenderPassDescriptor;
- (id)createVerticalBlurPipelineState:(id)arg1 forView:(id)arg2 andDevice:(id)arg3;
- (id)createHorizontalBlurPipelineState:(id)arg1 forView:(id)arg2 andDevice:(id)arg3;
- (id)createRotatingArtworkPipelineState:(id)arg1 forView:(id)arg2 andDevice:(id)arg3;
- (id)createPipelineStateWithMTLRenderPipelineDescriptor:(id)arg1 forView:(id)arg2 andDevice:(id)arg3;
- (void)setSize:(struct CGSize)arg1 forDevice:(id)arg2 forView:(id)arg3;
- (id)initWithDevice:(id)arg1 andLibrary:(id)arg2 forView:(id)arg3;

@end

