//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "RWDocument.h"

#import "NSFilePresenter.h"
#import "NSSplitViewDelegate.h"
#import "NSToolbarDelegate.h"
#import "NSWindowDelegate.h"

@class FontAwesome, NSArrayController, NSBox, NSButton, NSError, NSMutableArray, NSMutableDictionary, NSObjectController, NSOperationQueue, NSPanel, NSPopover, NSProgressIndicator, NSSegmentedControl, NSSet, NSSplitView, NSString, NSTextField, NSTimer, NSToolbarItem, NSURL, NSView, NSViewController, NSWindow, RMSandwich, RWAddPagePopover, RWAdvancedSiteSettingsViewController, RWBookmarkMissingDirectoryController, RWBrowserViewController, RWCodeSiteSettingsViewController, RWContentViewController, RWExporter, RWFileReferencesEditor, RWGeneralSiteSettingsViewController, RWHTMLView, RWHealthCheckWindowController, RWMasterStyleSiteSettingsViewController, RWNotesViewController, RWPage, RWPageInfoViewController, RWPageInspectorWindowController, RWPlaceholderViewController, RWPrivacySiteSettingsViewController, RWProgressController, RWProjectViewController, RWPublishCompleteHandoffController, RWPublishingController, RWPublishingSiteSettingsViewController, RWSearchWindowController, RWSelectBrowserController, RWSidebarViewController, RWTextAttachment, RWThemeBrowserViewController, RWWebIconsSettingsViewController, RWWebServer, RWWebServerLogWindowController, ResourceBrowserWindowController, SquashWindowController;

__attribute__((visibility("hidden")))
@interface MyDocument : RWDocument <NSToolbarDelegate, NSWindowDelegate, NSSplitViewDelegate, NSFilePresenter>
{
    NSWindow *documentWindow;
    RWPageInfoViewController *pageInfoViewController;
    NSView *editView;
    NSBox *editViewContentBox;
    NSPanel *savePanelProgress;
    NSTextField *savePanelProgressLabel;
    NSProgressIndicator *savePanelProgressIndicator;
    id _webView;
    NSObjectController *documentController;
    NSArrayController *pagesController;
    NSArrayController *pageAssetsController;
    RWPublishingController *publishingController;
    NSTimer *_currentThemeFileWatcherTimer;
    NSTimer *_webViewUpdateTimer;
    long long _selectedItemBeforeToggleSetup;
    RWPage *_lastLivePreviewedPage;
    NSMutableDictionary *_currentPageSettings;
    NSMutableArray *_currentPages;
    BOOL _showingCodeView;
    BOOL _showThemeSearch;
    RWTextAttachment *_currentMedia;
    NSTimer *addPageMenuAutoSelectTimer;
    BOOL _mainEditorPreviewVisible;
    BOOL _mainEditorInspectorVisible;
    BOOL _pageInspectorVisible;
    BOOL _canTogglePageInspector;
    BOOL _projectViewVisible;
    BOOL _hasCalledCloseOnceAlready;
    BOOL _setupCompleted;
    BOOL _registeredAsfilePresenter;
    BOOL _publishing;
    NSBox *contentBox;
    NSView *emptyProjectContainerView;
    RWPage *selectedPage;
    NSToolbarItem *_addPageToolbarItem;
    NSToolbarItem *_publishToolbarItem;
    NSToolbarItem *_modeToolbarItem;
    NSToolbarItem *_editPreviewToolbarButtonItem;
    NSToolbarItem *_viewSourceToolbarButtonItem;
    RWWebServerLogWindowController *_logWindowController;
    RWContentViewController *_contentViewController;
    RWProgressController *_exportProgressController;
    RWSidebarViewController *_sidebarViewController;
    RWProjectViewController *_projectViewController;
    RWGeneralSiteSettingsViewController *_generalSettingsViewController;
    RWAdvancedSiteSettingsViewController *_advancedSettingsViewController;
    RWCodeSiteSettingsViewController *_codeSettingsViewController;
    RWMasterStyleSiteSettingsViewController *_masterStyleSettingsViewController;
    RWNotesViewController *_notesViewController;
    RWPublishingSiteSettingsViewController *_publishingSiteSettingsViewController;
    RWWebIconsSettingsViewController *_webIconsSettingsViewController;
    RWPrivacySiteSettingsViewController *_privacySettingsViewController;
    NSPopover *_themesPopover;
    NSSegmentedControl *_publishButton;
    NSButton *_setupPublishingDestinationsButton;
    NSSegmentedControl *_sidebarsSegmentedControl;
    NSViewController *_currentMainViewController;
    unsigned long long _selectedMode;
    unsigned long long _previouslySelectedMode;
    NSSegmentedControl *_modeSegmentedControl;
    NSButton *_editPreviewButton;
    NSButton *_viewSourceButton;
    NSToolbarItem *_inspectorSegmentedControl;
    NSToolbarItem *_inspectorButton;
    unsigned long long _pageInspectorArrangement;
    NSURL *_presentedDocumentURL;
    RMSandwich *_presentedSandwich;
    NSString *_webServerURL;
    NSError *_webServerError;
    RWPlaceholderViewController *_contentPlaceholderViewController;
    NSView *_previewView;
    RWExporter *_publishExporter;
    RWExporter *_previewExporter;
    RWSelectBrowserController *_selectBrowserController;
    NSSplitView *_mainSplitView;
    RWPublishCompleteHandoffController *_publishCompleteHandoffController;
    RWHealthCheckWindowController *_healthCheckWindowController;
    RWSearchWindowController *_searchWindowController;
    RWPageInspectorWindowController *_pageInspectorWindowController;
    NSMutableArray *_simulatorWindowControllers;
    NSView *_multipleSelectionView;
    NSBox *_sidebarViewPlaceholder;
    FontAwesome *_fontAwesome;
    NSTimer *_previewScheduleTimer;
    RWPage *_lastSelectedPage;
    id _selectedItem;
    RWHTMLView *_codeView;
    RWWebServer *_previewWebServer;
    NSString *_previewDirectory;
    NSOperationQueue *_exportOperationQueue;
    RWAddPagePopover *_addPagePopover;
    SquashWindowController *_squashWindowController;
    ResourceBrowserWindowController *_resourcesBrowserWindowController;
    RWBookmarkMissingDirectoryController *_bookmarkMissingDirectoryController;
    RWFileReferencesEditor *_fileReferencesEditor;
    RWBrowserViewController *_browserViewController;
    RWThemeBrowserViewController *_themeBrowserController;
    NSString *_exportPath;
    struct CGPoint _previousPreviewScrollPosition;
}

+ (BOOL)canConcurrentlyReadDocumentsOfType:(id)arg1;
+ (BOOL)autosavesInPlace;
+ (id)keyPathsForValuesAffectingValueForKey:(id)arg1;
+ (BOOL)_openURL:(id)arg1 withHandlerAtURL:(id)arg2 error:(id *)arg3;
+ (id)mediaKeyPaths;
+ (BOOL)_checkDocumentCanBeOpenedByComparingMinimumApplicationVersion:(id)arg1 error:(id *)arg2;
+ (BOOL)_isVersion:(id)arg1 lessThanVerison:(id)arg2;
+ (BOOL)_isVersionLessThanCurrentApplicationVersion:(id)arg1;
@property(nonatomic, getter=isPublishing) BOOL publishing; // @synthesize publishing=_publishing;
@property(nonatomic) BOOL registeredAsfilePresenter; // @synthesize registeredAsfilePresenter=_registeredAsfilePresenter;
@property(nonatomic) struct CGPoint previousPreviewScrollPosition; // @synthesize previousPreviewScrollPosition=_previousPreviewScrollPosition;
@property(copy, nonatomic) NSString *exportPath; // @synthesize exportPath=_exportPath;
@property(retain, nonatomic) RWThemeBrowserViewController *themeBrowserController; // @synthesize themeBrowserController=_themeBrowserController;
@property(retain, nonatomic) RWBrowserViewController *browserViewController; // @synthesize browserViewController=_browserViewController;
@property(retain, nonatomic) RWFileReferencesEditor *fileReferencesEditor; // @synthesize fileReferencesEditor=_fileReferencesEditor;
@property(retain, nonatomic) RWBookmarkMissingDirectoryController *bookmarkMissingDirectoryController; // @synthesize bookmarkMissingDirectoryController=_bookmarkMissingDirectoryController;
@property(retain, nonatomic) ResourceBrowserWindowController *resourcesBrowserWindowController; // @synthesize resourcesBrowserWindowController=_resourcesBrowserWindowController;
@property(retain, nonatomic) SquashWindowController *squashWindowController; // @synthesize squashWindowController=_squashWindowController;
@property(retain, nonatomic) RWAddPagePopover *addPagePopover; // @synthesize addPagePopover=_addPagePopover;
@property(retain, nonatomic) NSOperationQueue *exportOperationQueue; // @synthesize exportOperationQueue=_exportOperationQueue;
@property(retain, nonatomic) NSString *previewDirectory; // @synthesize previewDirectory=_previewDirectory;
@property(retain, nonatomic) RWWebServer *previewWebServer; // @synthesize previewWebServer=_previewWebServer;
@property(retain, nonatomic) RWHTMLView *codeView; // @synthesize codeView=_codeView;
@property(nonatomic) BOOL setupCompleted; // @synthesize setupCompleted=_setupCompleted;
@property(nonatomic) BOOL hasCalledCloseOnceAlready; // @synthesize hasCalledCloseOnceAlready=_hasCalledCloseOnceAlready;
@property(nonatomic) __weak id selectedItem; // @synthesize selectedItem=_selectedItem;
@property(nonatomic) __weak RWPage *lastSelectedPage; // @synthesize lastSelectedPage=_lastSelectedPage;
@property(retain, nonatomic) NSTimer *previewScheduleTimer; // @synthesize previewScheduleTimer=_previewScheduleTimer;
@property(retain, nonatomic) FontAwesome *fontAwesome; // @synthesize fontAwesome=_fontAwesome;
@property(nonatomic) __weak NSBox *sidebarViewPlaceholder; // @synthesize sidebarViewPlaceholder=_sidebarViewPlaceholder;
@property(nonatomic) __weak NSView *multipleSelectionView; // @synthesize multipleSelectionView=_multipleSelectionView;
@property(retain, nonatomic) NSMutableArray *simulatorWindowControllers; // @synthesize simulatorWindowControllers=_simulatorWindowControllers;
@property(retain, nonatomic) RWPageInspectorWindowController *pageInspectorWindowController; // @synthesize pageInspectorWindowController=_pageInspectorWindowController;
@property(retain, nonatomic) RWSearchWindowController *searchWindowController; // @synthesize searchWindowController=_searchWindowController;
@property(retain, nonatomic) RWHealthCheckWindowController *healthCheckWindowController; // @synthesize healthCheckWindowController=_healthCheckWindowController;
@property(retain, nonatomic) RWPublishCompleteHandoffController *publishCompleteHandoffController; // @synthesize publishCompleteHandoffController=_publishCompleteHandoffController;
@property(nonatomic) __weak NSSplitView *mainSplitView; // @synthesize mainSplitView=_mainSplitView;
@property(retain, nonatomic) RWSelectBrowserController *selectBrowserController; // @synthesize selectBrowserController=_selectBrowserController;
@property(retain, nonatomic) RWExporter *previewExporter; // @synthesize previewExporter=_previewExporter;
@property(retain, nonatomic) RWExporter *publishExporter; // @synthesize publishExporter=_publishExporter;
@property(nonatomic) __weak NSView *previewView; // @synthesize previewView=_previewView;
@property(retain, nonatomic) RWPlaceholderViewController *contentPlaceholderViewController; // @synthesize contentPlaceholderViewController=_contentPlaceholderViewController;
@property(retain, nonatomic) NSError *webServerError; // @synthesize webServerError=_webServerError;
@property(retain, nonatomic) NSString *webServerURL; // @synthesize webServerURL=_webServerURL;
@property(retain, nonatomic) RMSandwich *presentedSandwich; // @synthesize presentedSandwich=_presentedSandwich;
@property(retain, nonatomic) NSURL *presentedDocumentURL; // @synthesize presentedDocumentURL=_presentedDocumentURL;
@property(nonatomic) BOOL projectViewVisible; // @synthesize projectViewVisible=_projectViewVisible;
@property(nonatomic) BOOL canTogglePageInspector; // @synthesize canTogglePageInspector=_canTogglePageInspector;
@property(nonatomic) BOOL pageInspectorVisible; // @synthesize pageInspectorVisible=_pageInspectorVisible;
@property(nonatomic) unsigned long long pageInspectorArrangement; // @synthesize pageInspectorArrangement=_pageInspectorArrangement;
@property(nonatomic) BOOL mainEditorInspectorVisible; // @synthesize mainEditorInspectorVisible=_mainEditorInspectorVisible;
@property(nonatomic) BOOL mainEditorPreviewVisible; // @synthesize mainEditorPreviewVisible=_mainEditorPreviewVisible;
@property __weak NSToolbarItem *inspectorButton; // @synthesize inspectorButton=_inspectorButton;
@property __weak NSToolbarItem *inspectorSegmentedControl; // @synthesize inspectorSegmentedControl=_inspectorSegmentedControl;
@property(nonatomic) __weak NSButton *viewSourceButton; // @synthesize viewSourceButton=_viewSourceButton;
@property(nonatomic) __weak NSButton *editPreviewButton; // @synthesize editPreviewButton=_editPreviewButton;
@property(nonatomic) __weak NSSegmentedControl *modeSegmentedControl; // @synthesize modeSegmentedControl=_modeSegmentedControl;
@property(nonatomic) unsigned long long previouslySelectedMode; // @synthesize previouslySelectedMode=_previouslySelectedMode;
@property(nonatomic) unsigned long long selectedMode; // @synthesize selectedMode=_selectedMode;
@property(nonatomic) __weak NSViewController *currentMainViewController; // @synthesize currentMainViewController=_currentMainViewController;
@property(retain, nonatomic) NSSegmentedControl *sidebarsSegmentedControl; // @synthesize sidebarsSegmentedControl=_sidebarsSegmentedControl;
@property(nonatomic) __weak NSButton *setupPublishingDestinationsButton; // @synthesize setupPublishingDestinationsButton=_setupPublishingDestinationsButton;
@property(retain, nonatomic) NSSegmentedControl *publishButton; // @synthesize publishButton=_publishButton;
@property(retain, nonatomic) NSPopover *themesPopover; // @synthesize themesPopover=_themesPopover;
@property(retain, nonatomic) RWPrivacySiteSettingsViewController *privacySettingsViewController; // @synthesize privacySettingsViewController=_privacySettingsViewController;
@property(retain, nonatomic) RWWebIconsSettingsViewController *webIconsSettingsViewController; // @synthesize webIconsSettingsViewController=_webIconsSettingsViewController;
@property(retain, nonatomic) RWPublishingSiteSettingsViewController *publishingSiteSettingsViewController; // @synthesize publishingSiteSettingsViewController=_publishingSiteSettingsViewController;
@property(retain, nonatomic) RWNotesViewController *notesViewController; // @synthesize notesViewController=_notesViewController;
@property(retain, nonatomic) RWMasterStyleSiteSettingsViewController *masterStyleSettingsViewController; // @synthesize masterStyleSettingsViewController=_masterStyleSettingsViewController;
@property(retain, nonatomic) RWCodeSiteSettingsViewController *codeSettingsViewController; // @synthesize codeSettingsViewController=_codeSettingsViewController;
@property(retain, nonatomic) RWAdvancedSiteSettingsViewController *advancedSettingsViewController; // @synthesize advancedSettingsViewController=_advancedSettingsViewController;
@property(retain, nonatomic) RWGeneralSiteSettingsViewController *generalSettingsViewController; // @synthesize generalSettingsViewController=_generalSettingsViewController;
@property(retain, nonatomic) RWProjectViewController *projectViewController; // @synthesize projectViewController=_projectViewController;
@property(retain, nonatomic) RWSidebarViewController *sidebarViewController; // @synthesize sidebarViewController=_sidebarViewController;
@property(retain, nonatomic) RWProgressController *exportProgressController; // @synthesize exportProgressController=_exportProgressController;
@property(retain, nonatomic) RWContentViewController *contentViewController; // @synthesize contentViewController=_contentViewController;
@property(retain, nonatomic) RWWebServerLogWindowController *logWindowController; // @synthesize logWindowController=_logWindowController;
@property(nonatomic) __weak NSToolbarItem *viewSourceToolbarButtonItem; // @synthesize viewSourceToolbarButtonItem=_viewSourceToolbarButtonItem;
@property(nonatomic) __weak NSToolbarItem *editPreviewToolbarButtonItem; // @synthesize editPreviewToolbarButtonItem=_editPreviewToolbarButtonItem;
@property(nonatomic) __weak NSToolbarItem *modeToolbarItem; // @synthesize modeToolbarItem=_modeToolbarItem;
@property(nonatomic) __weak NSToolbarItem *publishToolbarItem; // @synthesize publishToolbarItem=_publishToolbarItem;
@property(nonatomic) __weak NSToolbarItem *addPageToolbarItem; // @synthesize addPageToolbarItem=_addPageToolbarItem;
@property(retain, nonatomic) RWPublishingController *publishingController; // @synthesize publishingController;
@property(nonatomic) __weak RWPage *selectedPage; // @synthesize selectedPage;
@property(readonly, nonatomic) __weak RWPageInfoViewController *pageInfoViewController; // @synthesize pageInfoViewController;
@property(nonatomic) __weak NSView *emptyProjectContainerView; // @synthesize emptyProjectContainerView;
@property(nonatomic) __weak NSBox *contentBox; // @synthesize contentBox;
@property(readonly, nonatomic) __weak NSBox *editViewContentBox; // @synthesize editViewContentBox;
@property(readonly, nonatomic) __weak NSView *editView; // @synthesize editView;
- (void).cxx_destruct;
- (void)windowWillClose:(id)arg1;
- (void)onThemeManagerDidRemoveThemeNotification:(id)arg1;
- (void)onThemeManagerWillRemoveThemeNotification:(id)arg1;
- (void)invalidateTouchBar;
- (void)showResourceBrowser:(id)arg1;
- (void)squashResources:(id)arg1;
- (id)previewImageForResource:(id)arg1;
- (id)macroStringForResource:(id)arg1;
- (id)resourceForURL:(id)arg1;
- (id)addResourceForURL:(id)arg1 error:(id *)arg2 internal:(BOOL)arg3;
- (id)addResourceForURL:(id)arg1 error:(id *)arg2;
- (id)addResourcesForURLs:(id)arg1 toFolder:(id)arg2 atIndex:(long long)arg3;
- (id)addResourcesForURLs:(id)arg1 toFolder:(id)arg2;
- (void)removeResource:(id)arg1;
- (void)checkiCloudDriveIncompatabilityForURLs:(id)arg1;
- (BOOL)shouldUseExistingResources;
@property(nonatomic, getter=isPluginInspectorVisible) BOOL pluginInspectorVisible;
- (void)updatePublishButtonState;
- (void)clearPublishingCache;
- (void)displayStylesInspector:(id)arg1;
- (void)endSheet:(id)arg1;
- (id)duplicatePage:(id)arg1 title:(id)arg2;
- (void)duplicatePage:(id)arg1;
- (void)addPageViaMenu:(id)arg1;
- (void)addPageToDocument:(id)arg1;
- (id)createPageOfPluginClassAndSyncUI:(Class)arg1;
- (void)postPageCreationUIActions:(id)arg1;
- (id)createPageUsingPluginClass:(Class)arg1;
- (void)setUniqueFolderNameForPage:(id)arg1;
- (id)_shortFolderNames;
- (id)uniqueFolderNameWithSuggestedName:(id)arg1;
- (id)_makeUniquePageID;
- (void)updateRemovingPages:(id)arg1 andChildren:(BOOL)arg2;
@property(readonly, nonatomic) BOOL isMasterStyleSelected;
- (void)updateRemovingPage:(id)arg1 andChildren:(BOOL)arg2;
- (void)removePage:(id)arg1;
- (void)removePages:(id)arg1;
- (void)showAddPagePanel:(id)arg1;
- (void)canCloseDocumentWithDelegate:(id)arg1 shouldCloseSelector:(SEL)arg2 contextInfo:(void *)arg3;
- (BOOL)createDuplicateOfProjectAtURL:(id)arg1 withExtension:(id)arg2 error:(id *)arg3;
- (BOOL)revertToContentsOfURL:(id)arg1 ofType:(id)arg2 error:(id *)arg3;
- (void)presentedItemDidMoveToURL:(id)arg1;
- (void)accommodatePresentedItemDeletionWithCompletionHandler:(CDUnknownBlockType)arg1;
@property(readonly, retain) NSOperationQueue *presentedItemOperationQueue;
@property(readonly, copy) NSURL *presentedItemURL;
- (BOOL)readFromRW4FileAtURL:(id)arg1 error:(id *)arg2;
- (BOOL)readFromRW6FileAtURL:(id)arg1 error:(id *)arg2;
- (BOOL)readFromRW7FileAtURL:(id)arg1 error:(id *)arg2;
- (BOOL)readFromRapidWeaverFileAtURL:(id)arg1 error:(id *)arg2;
- (BOOL)readFromURL:(id)arg1 ofType:(id)arg2 error:(id *)arg3;
- (void)saveDocumentAs:(id)arg1;
- (void)saveDocument:(id)arg1;
- (void)saveToURL:(id)arg1 ofType:(id)arg2 forSaveOperation:(unsigned long long)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (BOOL)writeToURL:(id)arg1 ofType:(id)arg2 forSaveOperation:(unsigned long long)arg3 originalContentsURL:(id)arg4 error:(id *)arg5;
- (BOOL)canAsynchronouslyWriteToURL:(id)arg1 ofType:(id)arg2 forSaveOperation:(unsigned long long)arg3;
- (void)callSelector:(SEL)arg1 onPluginInstanceForPage:(id)arg2;
- (void)_updateIndexPageBeforeSave;
- (void)commitEditsBeforeExportOrSave;
- (void)_observeNotifications;
- (void)_setupTheme;
- (void)_clearSharedPluginData;
- (void)_teardownResourcesBrowserWindowController;
- (void)_teardownAllPopoutPreviewWindows;
- (void)_teardownPopoutPreviewWindow:(id)arg1;
- (void)showNewPopoutPreviewWindowWithDeviceType:(unsigned long long)arg1 orientation:(unsigned long long)arg2 resetFrame:(BOOL)arg3;
- (void)_teardownWebServerLogsWindow;
- (void)showWebServerLogsWindow;
- (void)_teardownPageInspectorWindowController;
- (void)showPageInspectorWindow;
- (void)_teardownCodeView;
- (void)_setupCodeView;
- (void)_teardownPreviewWebServer;
- (void)clearPreviewWebServerCache;
- (void)restartPreviewWebServer;
- (void)previewWebServerInstanceWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)shouldCloseWindowController:(id)arg1 delegate:(id)arg2 shouldCloseSelector:(SEL)arg3 contextInfo:(void *)arg4;
- (void)performShowFileReferencesEditor:(id)arg1;
- (void)windowControllerDidLoadNib:(id)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)scanForChangedResources;
- (id)initWithType:(id)arg1 error:(id *)arg2;
- (void)showBookmarks:(id)arg1;
- (void)splitViewDidResizeSubviews:(id)arg1;
- (BOOL)splitView:(id)arg1 shouldHideDividerAtIndex:(long long)arg2;
- (BOOL)splitView:(id)arg1 shouldCollapseSubview:(id)arg2 forDoubleClickOnDividerAtIndex:(long long)arg3;
- (BOOL)splitView:(id)arg1 canCollapseSubview:(id)arg2;
- (struct CGRect)splitView:(id)arg1 effectiveRect:(struct CGRect)arg2 forDrawnRect:(struct CGRect)arg3 ofDividerAtIndex:(long long)arg4;
- (BOOL)splitView:(id)arg1 shouldAdjustSizeOfSubview:(id)arg2;
- (double)splitView:(id)arg1 constrainMinCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(id)arg1 constrainMaxCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (id)defaultSiteColourVariations;
- (id)defaultSiteVariationsFlags;
- (void)cleanupWebViewUpdateTimer;
- (void)notifySearchEngines;
- (void)sitePublishComplete:(id)arg1;
- (void)pagePublishComplete:(id)arg1;
- (void)siteBackupError:(id)arg1;
- (void)siteBackupDidEnd:(id)arg1;
- (void)siteBackupDidStart:(id)arg1;
- (void)pageExportUpdateMessage:(id)arg1;
- (void)pageExportDidEnd:(id)arg1;
- (void)pageExportDidStart:(id)arg1;
- (void)siteExportChecksumGenerationDidEnd:(id)arg1;
- (void)siteExportChecksumGenerationDidStart:(id)arg1;
- (void)pageLoadDidEnd:(id)arg1;
- (void)pageLoadDidStart:(id)arg1;
- (void)pageStyleDidChange:(id)arg1;
- (void)pageDidChangeGenericExternal:(id)arg1;
- (void)pageDidChangeGeneric:(id)arg1;
- (void)resourceDidChange:(id)arg1;
- (void)folderDidChange:(id)arg1;
- (void)allPagesDidChangeChanged:(id)arg1;
- (void)pageDidChangeChanged:(id)arg1;
- (void)pluginExportStatus:(id)arg1;
- (void)pluginDidChangeInvert:(id)arg1;
- (void)refreshAllPreviews;
- (void)pluginDidChange:(id)arg1;
- (void)updateTitle:(id)arg1;
- (void)broadcastPluginSettingsRequest:(id)arg1;
- (void)togglePluginSetupSheet:(id)arg1;
- (void)showPluginSetupSheet:(id)arg1;
- (void)currentMediaDoubleClicked:(id)arg1;
- (void)currentMediaChanged:(id)arg1;
- (void)themeSiteVariationsChanged:(id)arg1;
- (void)themePageVariationsChanged:(id)arg1;
- (void)selectTheme:(id)arg1;
- (id)viewControllerForType:(id)arg1;
- (void)updateUIAfterPageChange;
- (void)showHideThemeDrawer:(id)arg1;
- (void)setCurrentPages:(id)arg1;
- (id)currentPages;
- (void)setCurrentPageSettings:(id)arg1;
- (id)currentPageSettings;
- (void)setCurrentPageSettingsKeys:(id)arg1;
- (id)currentPageSettingsKeys;
- (BOOL)sourceListIsVisible;
- (BOOL)themesEnabled;
- (BOOL)pageInspectorEnabled;
- (void)showPageInspectorForPage:(id)arg1;
- (void)setImageExportSettings:(id)arg1;
- (id)imageExportSettings;
- (void)setWatchCurrentThemeFiles:(BOOL)arg1;
- (void)clearDocumentManifests;
- (void)setManifest:(id)arg1 forKey:(id)arg2;
- (id)manifestForKey:(id)arg1;
- (void)publishPagesToDefaultLocation:(id)arg1;
- (void)showBookmarkMissingDirectorySheetWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)siteIndexFilename;
- (void)setIndex:(id)arg1;
- (void)registrationStateChanged:(id)arg1;
- (BOOL)addPagesFromSandwich:(id)arg1 currentPageIndex:(unsigned long long *)arg2 parentPage:(id)arg3;
- (void)action:(id)arg1;
- (void)_showPageInspector;
- (void)_hidePageInspector;
- (void)_updatePageInspectorVisibility;
- (void)setDisplayName:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)close;
- (void)restoreDocumentStateWithDictionary:(id)arg1;
- (id)UIStateDictionary;
- (void)writeUIState:(id)arg1 toURL:(id)arg2;
- (void)restoreStateWithCoder:(id)arg1;
- (void)encodeRestorableStateWithCoder:(id)arg1;
- (id)addCacheBustingString:(id)arg1 toLinksInString:(id)arg2;
- (BOOL)startPublishExport:(id)arg1 error:(id *)arg2;
- (id)_makePublishingTemporaryDirectory;
- (id)com_rwrp_pagesOfClass:(Class)arg1;
- (long long)com_rwrp_countPagesWithCustomThemes;
- (void)com_rwrp_completeExportToDefaultLocation:(id)arg1;
- (BOOL)_openURL:(id)arg1 withHandlerAtURL:(id)arg2 error:(id *)arg3;
- (id)com_rwrp_NilOrChangedPages;
- (id)com_rwrp_changedPages;
- (void)previewPage:(id)arg1 withHandlerAtURL:(id)arg2;
- (void)hideExportProgressSheet;
- (void)showExportProgressSheet;
- (id)usedPluginClasses;
- (void)setRootPageIndex:(id)arg1 toIndex:(unsigned long long)arg2;
- (void)replacePage:(id)arg1 withPage:(id)arg2;
- (void)addPage:(id)arg1 after:(id)arg2;
- (void)switchView;
- (void)_updateModeToolbarItem;
- (void)showEmptyProjectsView:(BOOL)arg1;
- (void)showMultipleSelectionView:(BOOL)arg1;
- (void)switchMainViewController:(id)arg1;
- (id)currentlySelectedPage;
- (void)selectPage:(id)arg1;
- (void)applyDefaultPageInfoToAllPages:(id)arg1;
- (void)scheduleWebViewUpdateTimerFired:(id)arg1;
- (void)updateWebViewIfRequiredNow;
- (void)scheduleWebViewUpdateIfRequired;
- (void)updateWebView;
- (void)updateWebView:(id)arg1;
- (void)previewPageAndLoad:(id)arg1;
- (void)previewPageAndLoad:(id)arg1 mode:(id)arg2;
- (void)performFindInProject:(id)arg1;
- (void)performShowCode:(id)arg1;
- (void)performShowThemeView:(id)arg1;
- (void)performToggleChangedStatusAllItems:(id)arg1;
- (void)performDuplicatePage:(id)arg1;
- (void)performTogglePreview:(id)arg1;
- (void)performRefreshPreview:(id)arg1;
- (void)performShowWebServerLogs:(id)arg1;
- (void)performShowHealthCheck:(id)arg1;
- (void)performShowAddons:(id)arg1;
- (void)performShowPublishingSettings:(id)arg1;
- (void)performShowNotes:(id)arg1;
- (void)performShowCodeSettings:(id)arg1;
- (void)performShowFaviconSettings:(id)arg1;
- (void)performShowAdvancedSettings:(id)arg1;
- (void)performShowGeneralSettings:(id)arg1;
- (void)continuePublishingWithOptions:(id)arg1;
- (void)publishingSaveOperationCompletedForDocument:(id)arg1 didSave:(BOOL)arg2 contextInfo:(void *)arg3;
- (void)_selectPublishingBookmark:(id)arg1;
- (BOOL)performPrePublishingChecksWithOptions:(id)arg1;
- (BOOL)canPublish;
- (void)beginPublishWithOptions:(id)arg1;
- (void)performPublish:(id)arg1;
- (void)performPublishAll:(id)arg1;
- (void)performExport:(id)arg1;
- (void)performDownloadSiteBackup:(id)arg1;
- (id)publishedSiteBaseURL;
- (void)performVisitPublishedWebsite:(id)arg1;
- (void)performShowSourceButtonPressed:(id)arg1;
- (void)performChangeModeButtonPressed:(id)arg1;
- (void)performChangeMode:(id)arg1;
- (void)performShowPageList:(id)arg1;
- (void)showPageInfoWithKey:(id)arg1;
- (void)showPageInfoPlugin:(id)arg1;
- (void)showPageInfoTheme:(id)arg1;
- (void)showPageInfoMetatags:(id)arg1;
- (void)showPageInfoSEO:(id)arg1;
- (void)showPageInfoCode:(id)arg1;
- (void)showPageInfoSidebar:(id)arg1;
- (void)showPageInfoGeneral:(id)arg1;
- (void)pageInspectorSegmentedControlChanged:(id)arg1;
- (void)toggleFloatingPageInspector:(id)arg1;
- (void)toggleDockedPageInspector:(id)arg1;
- (void)toggleFloatingDockedPageInspector:(id)arg1;
- (void)performTogglePageInspector:(id)arg1;
- (void)performToggleSourceList:(id)arg1;
- (void)alertFailedResourcesWithMap:(id)arg1;
- (id)resourceFromURL:(id)arg1 error:(id *)arg2 internal:(BOOL)arg3;
- (id)resourceFromURL:(id)arg1 error:(id *)arg2;
- (id)resourcesFromURLs:(id)arg1 errors:(id)arg2 internal:(BOOL)arg3;
- (id)resourcesFromURLs:(id)arg1 errors:(id)arg2;
- (void)performActionRemovePage:(id)arg1;
- (void)previewPageWithViewer:(id)arg1;
- (void)previewPageInBrowser:(id)arg1;
- (void)previewPageInDefaultBrowser:(id)arg1;
- (void)manageSimulatorLayouts:(id)arg1;
- (void)applySimulatorLayout:(id)arg1;
- (void)performSaveSimulatorLayout:(id)arg1;
- (void)performNewSimulatorWindow:(id)arg1;
- (void)performToggleSimulators:(id)arg1;
- (void)performAddNewPage:(id)arg1;
- (void)handlePluginSupport:(id)arg1;
- (void)handleThemeSupport:(id)arg1;
- (void)_openURLForSender:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (BOOL)_validateThemeSupportMenuItem:(id)arg1;
- (BOOL)_validatePluginSupportMenuItem:(id)arg1;
- (BOOL)_isThemeSupportMenuItem:(id)arg1;
- (BOOL)_isPluginSupportMenuItem:(id)arg1;
- (BOOL)_isMenuItem:(id)arg1;
- (BOOL)_itemRequiresSelectedPage:(id)arg1;
- (id)_pageSpecificSelectorNames;
- (BOOL)exportSiteToPath:(id)arg1 pages:(id)arg2 mode:(id)arg3 websiteAddress:(id)arg4 error:(id *)arg5 completionBlock:(CDUnknownBlockType)arg6;
- (BOOL)preExportChecks:(id *)arg1;
- (id)currentMediaMovieURLAuto;
- (id)currentMediaMovieURLTarget;
- (id)currentMediaMovieURL;
- (id)currentMediaLoop;
- (id)currentMediaKioskMode;
- (id)currentMediaAutoplay;
- (id)currentMediaShowController;
- (void)setCurrentMediaBorderColour:(id)arg1;
- (id)currentMediaBorderColour;
- (void)setCurrentMediaBorderBlur:(id)arg1;
- (id)currentMediaBorderBlur;
- (void)setCurrentMediaBorderSize:(id)arg1;
- (id)currentMediaBorderSize;
- (void)setCurrentMediaEnableBorder:(id)arg1;
- (id)currentMediaEnableBorder;
- (void)setCurrentMediaShadowColour:(id)arg1;
- (id)currentMediaShadowColour;
- (void)setCurrentMediaShadowBlur:(id)arg1;
- (id)currentMediaShadowBlur;
- (void)setCurrentMediaShadowOffset:(id)arg1;
- (id)currentMediaShadowOffset;
- (void)setCurrentMediaEnableShadow:(id)arg1;
- (id)currentMediaEnableShadow;
- (void)setCurrentMediaFillColourEnabled:(id)arg1;
- (id)currentMediaFillColourEnabled;
- (void)setCurrentMediaFillColour:(id)arg1;
- (id)currentMediaFillColour;
- (void)setCurrentMediaFileName:(id)arg1;
- (id)currentMediaFileName;
- (void)setCurrentMediaAltTag:(id)arg1;
- (id)currentMediaAltTag;
- (void)setCurrentMediaClip:(id)arg1;
- (id)currentMediaClip;
- (void)setCurrentMediaRotation:(id)arg1;
- (id)currentMediaRotation;
- (void)setCurrentMediaScale:(id)arg1;
- (id)currentMediaScale;
- (void)setCurrentMediaFlipVertically:(id)arg1;
- (id)currentMediaFlipVertically;
- (void)setCurrentMediaFlipHorizontally:(id)arg1;
- (id)currentMediaFlipHorizontally;
- (void)setCurrentMediaLockRatios:(id)arg1;
- (id)currentMediaLockRatios;
- (void)setCurrentMediaHeight:(id)arg1;
- (id)currentMediaHeight;
- (void)setCurrentMediaWidth:(id)arg1;
- (id)currentMediaWidth;
- (void)setCurrentMedia:(id)arg1;
- (id)currentMedia;
- (id)currentMediaX;
- (void)currentMediaAttributesChanged;
- (void)allMediaAttributesChanged;
- (void)themePresenter:(id)arg1 urlChanged:(id)arg2;
- (id)documentForTextView:(id)arg1;
- (void)changeSiteSidebarModeTo:(long long)arg1;
- (void)changePageSidebarModeTo:(long long)arg1;
- (void)updatePageInspectorForCurrentPage;
- (void)showMediaInspector:(id)arg1;
- (id)resourceInfoList;
- (id)linkForResourceWithIdentifier:(id)arg1 appropriateForPage:(id)arg2;
- (id)linkForResourceWithIdentifier:(id)arg1;
- (id)urlForResource:(id)arg1;
- (id)urlForResourceWithIdentifier:(id)arg1;
- (void)loadDocumentDataCompleted;
- (void)warnUserAboutMissingPlugins;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) NSSet *observedPresentedItemUbiquityAttributes;
@property(readonly, copy) NSURL *primaryPresentedItemURL;
@property(readonly) Class superclass;

@end

