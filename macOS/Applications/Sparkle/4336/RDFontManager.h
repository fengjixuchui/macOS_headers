//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "NSURLConnectionDelegate.h"

@class NSArray, NSMutableDictionary, NSOperationQueue, NSString;

@interface RDFontManager : NSObject <NSURLConnectionDelegate>
{
    BOOL _currentModeIsDark;
    BOOL _darkModeValid;
    NSString *_fontsURL;
    NSMutableDictionary *_watchers;
    NSMutableDictionary *_fontsInfo;
    NSMutableDictionary *_fontsInfoByFullName;
    NSMutableDictionary *_fontsInfoByPostscriptName;
    NSMutableDictionary *_fontsInfoByDisplayName;
    NSMutableDictionary *_displayNameByFontsInfo;
    NSMutableDictionary *_fonts;
    NSArray *_installedFonts;
    NSMutableDictionary *_families;
    NSArray *_installedFamilies;
    NSArray *_activeFamilies;
    NSOperationQueue *_downloadOperationQueue;
    NSMutableDictionary *_characterSetCache;
}

+ (id)folderNameFromFamilyName:(id)arg1;
+ (id)fontManager;
@property(nonatomic) BOOL darkModeValid; // @synthesize darkModeValid=_darkModeValid;
@property(nonatomic) BOOL currentModeIsDark; // @synthesize currentModeIsDark=_currentModeIsDark;
@property(retain, nonatomic) NSMutableDictionary *characterSetCache; // @synthesize characterSetCache=_characterSetCache;
@property(retain, nonatomic) NSOperationQueue *downloadOperationQueue; // @synthesize downloadOperationQueue=_downloadOperationQueue;
@property(retain, nonatomic) NSArray *activeFamilies; // @synthesize activeFamilies=_activeFamilies;
@property(retain, nonatomic) NSArray *installedFamilies; // @synthesize installedFamilies=_installedFamilies;
@property(retain, nonatomic) NSMutableDictionary *families; // @synthesize families=_families;
@property(retain, nonatomic) NSArray *installedFonts; // @synthesize installedFonts=_installedFonts;
@property(retain, nonatomic) NSMutableDictionary *fonts; // @synthesize fonts=_fonts;
@property(retain, nonatomic) NSMutableDictionary *displayNameByFontsInfo; // @synthesize displayNameByFontsInfo=_displayNameByFontsInfo;
@property(retain, nonatomic) NSMutableDictionary *fontsInfoByDisplayName; // @synthesize fontsInfoByDisplayName=_fontsInfoByDisplayName;
@property(retain, nonatomic) NSMutableDictionary *fontsInfoByPostscriptName; // @synthesize fontsInfoByPostscriptName=_fontsInfoByPostscriptName;
@property(retain, nonatomic) NSMutableDictionary *fontsInfoByFullName; // @synthesize fontsInfoByFullName=_fontsInfoByFullName;
@property(retain, nonatomic) NSMutableDictionary *fontsInfo; // @synthesize fontsInfo=_fontsInfo;
@property(retain, nonatomic) NSMutableDictionary *watchers; // @synthesize watchers=_watchers;
@property(retain, nonatomic) NSString *fontsURL; // @synthesize fontsURL=_fontsURL;
- (void).cxx_destruct;
- (void)dumpFontsInfo:(id)arg1;
- (void)dumpInstalledFonts;
- (void)unregisterFont:(id)arg1;
- (BOOL)registerFont:(id)arg1;
- (id)createFontInternal:(id)arg1;
- (BOOL)createFont:(id)arg1;
- (id)woffDataForFontInfo:(id)arg1;
- (id)woff2DataForFontInfo:(id)arg1;
- (id)filePathForFont:(id)arg1 withExtension:(id)arg2;
- (id)filenameForFont:(id)arg1;
@property(readonly, nonatomic) NSString *fontsPath;
- (BOOL)fontsPathExists;
- (id)oldCustomFontsPath;
- (id)localPathForFont:(id)arg1;
- (void)generateListImageForFont:(id)arg1 dark:(BOOL)arg2;
- (void)generateGridImageForFont:(id)arg1 dark:(BOOL)arg2;
- (void)fillPopup:(id)arg1 withFamilies:(id)arg2 target:(id)arg3 selector:(SEL)arg4;
- (void)listImage:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)gridImage:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)urlForFont:(id)arg1;
- (void)downloadFont:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)boldItalicFontWithFamilyName:(id)arg1;
- (id)boldFontWithFamilyName:(id)arg1;
- (id)normalFontWithFamilyName:(id)arg1;
- (id)defaultFontWithFamilyName:(id)arg1;
- (void)setCSSFontFamily:(id)arg1 forFamilyWithName:(id)arg2;
- (id)cssFontFamilyForFamilyWithName:(id)arg1;
- (id)cssFontFamilyForFamily:(id)arg1;
- (void)deactivateFamily:(id)arg1;
- (BOOL)activateFamilyInternal:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)activateFamily:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (BOOL)isFamilyNotActive:(id)arg1;
- (BOOL)isFamilyActive:(id)arg1;
- (void)refreshActiveFamilies;
- (BOOL)installSystemFamilyWithName:(id)arg1;
- (BOOL)uninstallFamily:(id)arg1;
- (BOOL)uninstallFamily:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (BOOL)installFamily:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (BOOL)isFamilyNotInstalled:(id)arg1;
- (BOOL)isFamilyInstalled:(id)arg1;
- (id)installedFamilyWithName:(id)arg1;
- (id)familyWithName:(id)arg1;
- (void)refreshInstalledFamilies;
- (id)familiesByName:(id)arg1 inCategories:(id)arg2 filter:(int)arg3 includeBundle:(BOOL)arg4 includeSystem:(BOOL)arg5 includeGoogle:(BOOL)arg6 includeCustom:(BOOL)arg7 richFontsOnly:(BOOL)arg8;
- (void)updateFamilies;
- (BOOL)writeFont:(id)arg1 toPath:(id)arg2;
- (id)customFamiliesJSONPath;
- (BOOL)saveCustomFamiliesJSON;
- (id)fixedFontForFont:(id)arg1;
- (void)deactivateFontInternal:(id)arg1;
- (void)deactivateFont:(id)arg1;
- (BOOL)activateFontInternal:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)activateFont:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (BOOL)isFontActive:(id)arg1;
- (void)refreshCustomFontMetadata;
- (BOOL)uninstallFont:(id)arg1;
- (BOOL)uninstallFontInternal:(id)arg1;
- (id)installFont:(id)arg1 withFamily:(id)arg2 inCategory:(int)arg3 withStyle:(id)arg4 withWeight:(long long)arg5 withFullname:(id)arg6 withPostscriptName:(id)arg7 withFontConverter:(id)arg8 lazy:(BOOL)arg9;
- (void)uninstallFont:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)installFont:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (BOOL)isFontInstalled:(id)arg1;
- (BOOL)isInstallingFonts;
- (id)fontInfoWithFamily:(id)arg1 size:(double)arg2 weight:(long long)arg3 traits:(unsigned long long)arg4;
- (id)fontInfoWithFamily:(id)arg1 forFont:(id)arg2;
- (id)fontFamilyFromAttributes:(id)arg1;
- (id)fontInfoFromAttributes:(id)arg1;
- (id)installedFontWithFullName:(id)arg1 withSize:(double)arg2;
- (id)fontWithFullName:(id)arg1;
- (id)installedFontWithPostScriptName:(id)arg1 withSize:(double)arg2;
- (id)fontWithDisplayName:(id)arg1;
- (id)fontWithPostScriptName:(id)arg1;
- (id)installedFont:(id)arg1 withSize:(double)arg2;
- (id)generateListImageWithSize:(struct CGSize)arg1 fitSize:(struct CGSize)arg2 forFont:(id)arg3 withSize:(double)arg4 dark:(BOOL)arg5;
- (id)generateGridImageWithSize:(struct CGSize)arg1 fitSize:(struct CGSize)arg2 forFont:(id)arg3 withSize:(double)arg4 dark:(BOOL)arg5;
- (id)createString:(id)arg1 usingFont:(id)arg2 withColor:(id)arg3;
- (BOOL)drawString:(id)arg1 fitSize:(struct CGSize)arg2 atPosition:(struct CGPoint)arg3 centered:(BOOL)arg4 usingFont:(id)arg5 withSize:(double)arg6 withColor:(id)arg7;
- (void)addFontInfoFromJSONFile:(id)arg1 source:(int)arg2;
- (void)addFontInfoFromJSONBundle:(id)arg1 source:(int)arg2;
- (id)familiesConfigurationJSONPath;
- (BOOL)saveFamiliesConfigurationJSON;
- (BOOL)loadFamiliesConfigurationJSON:(id)arg1;
- (void)setActiveFamilies;
- (void)addCustomFontInfo;
- (void)addGoogleFontInfo;
- (void)addBundleWebFontInfo;
- (void)addBundleFontInfo;
- (void)addSystemFontInfo;
- (void)migrateCustomFonts;
- (void)initializeFontsInfo;
- (id)postScriptNameForFontHavingCharacter:(unsigned short)arg1;
- (id)characterSetForFontDescriptor:(id)arg1;
- (id)characterSetForFont:(id)arg1;
- (void)removeCallbackFor:(id)arg1;
- (void)addCallbackFor:(id)arg1 block:(CDUnknownBlockType)arg2;
- (id)initInternal;
- (id)init;
- (void)setupSystemTheme;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

