//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSWindowController.h"

#import "NSTextFieldDelegate.h"

@class GChButton, GChColumnView, GChCreatePanel, GChDatabase, GChEditorView, GChGlyphButton, GChGlyphPopup, GChInfoTextView, GChLibraryView, GChPopUpButton, GChProjView, GChSearchField, GChStepper, GChTabView, GChWindowView, MABorderView, MAKitOutlineView, MAKitSegmentedControl, MAKitTableView, MATextField, NSMatrix, NSString, NSTabViewItem;

@interface GChWindowController : NSWindowController <NSTextFieldDelegate>
{
    GChColumnView *main_edit_column0;
    GChColumnView *main_edit_column1;
    GChEditorView *main_edit_editorView;
    GChPopUpButton *main_edit_tuningName;
    GChPopUpButton *main_edit_capodaster;
    MATextField *main_edit_tuningPitches;
    MATextField *main_edit_numStrings;
    GChPopUpButton *main_edit_rootNote;
    GChPopUpButton *main_edit_bassNote;
    GChPopUpButton *main_edit_chordType;
    GChPopUpButton *main_edit_difficulty;
    GChButton *main_edit_isFavorite;
    GChStepper *main_edit_transpose;
    GChPopUpButton *main_edit_library;
    GChPopUpButton *main_edit_numOfFrets;
    GChButton *main_edit_lefty;
    GChGlyphButton *main_edit_preview;
    GChGlyphPopup *main_edit_gear;
    GChButton *main_edit_resetChordBtn;
    GChButton *main_edit_changeChordBtn;
    GChButton *main_edit_addChordBtn;
    GChButton *main_tun_create;
    GChButton *main_tun_delete;
    MAKitOutlineView *main_tun_tuningsTable;
    GChButton *main_tun_import;
    GChButton *main_tun_export;
    GChCreatePanel *main_create_panel;
    GChPopUpButton *main_create_tuning;
    MATextField *main_create_libraryName;
    GChPopUpButton *main_create_numberStrings;
    MAKitTableView *main_create_stringsTable;
    GChButton *main_create_cancel;
    GChButton *main_create_ok;
    GChColumnView *main_lib_column0;
    GChColumnView *main_lib_column1;
    GChLibraryView *main_lib_chordList;
    GChInfoTextView *main_lib_infoView;
    GChPopUpButton *main_lib_tuningName;
    GChPopUpButton *main_lib_capodaster;
    MATextField *main_lib_tuningPitches;
    MATextField *main_lib_numStrings;
    GChPopUpButton *main_lib_rootNote;
    MATextField *main_lib_rootNoteLabel;
    GChPopUpButton *main_lib_bassNote;
    MATextField *main_lib_bassNoteLabel;
    GChPopUpButton *main_lib_chordType;
    MATextField *main_lib_chordTypeLabel;
    GChPopUpButton *main_lib_difficulty;
    MATextField *main_lib_difficultyLabel;
    GChButton *main_lib_isFavorite;
    GChPopUpButton *main_lib_library;
    MATextField *main_lib_libraryLabel;
    GChSearchField *main_lib_search;
    MATextField *main_lib_searchLabel;
    GChPopUpButton *main_lib_numOfFrets;
    GChButton *main_lib_lefty;
    GChGlyphButton *main_lib_preview;
    GChGlyphPopup *main_lib_gear;
    GChButton *main_lib_deleteChordBtn;
    GChButton *main_lib_newChordBtn;
    GChButton *main_lib_editChordBtn;
    GChColumnView *main_proj_column0;
    GChColumnView *main_proj_column1;
    GChProjView *main_proj_chordList;
    GChInfoTextView *main_proj_infoView;
    GChPopUpButton *main_proj_tunings;
    GChPopUpButton *main_proj_rootNote;
    GChPopUpButton *main_proj_bassNote;
    GChPopUpButton *main_proj_chordType;
    GChSearchField *main_proj_search;
    GChPopUpButton *main_proj_numOfFrets;
    GChButton *main_proj_lefty;
    GChGlyphButton *main_proj_preview;
    GChGlyphPopup *main_proj_gear;
    MAKitSegmentedControl *main_toSimple;
    MABorderView *main_boxLine;
    GChButton *main_cancel;
    GChButton *main_ok;
    GChButton *main_insert;
    GChTabView *main_tabView;
    GChLibraryView *mini_lib_chordList;
    GChInfoTextView *mini_lib_infoView;
    GChPopUpButton *mini_lib_tuningName;
    GChPopUpButton *mini_lib_capodaster;
    MATextField *mini_lib_tuningPitches;
    MATextField *mini_lib_numStrings;
    GChPopUpButton *mini_lib_rootNote;
    GChPopUpButton *mini_lib_bassNote;
    GChPopUpButton *mini_lib_chordType;
    GChPopUpButton *mini_lib_difficulty;
    GChButton *mini_lib_isFavorite;
    GChPopUpButton *mini_lib_library;
    GChSearchField *mini_lib_search;
    GChPopUpButton *mini_lib_numOfFrets;
    GChButton *mini_lib_lefty;
    GChGlyphButton *mini_lib_preview;
    GChGlyphPopup *mini_lib_gear;
    GChProjView *mini_proj_chordList;
    GChInfoTextView *mini_proj_infoView;
    GChPopUpButton *mini_proj_tunings;
    GChPopUpButton *mini_proj_rootNote;
    GChPopUpButton *mini_proj_bassNote;
    GChPopUpButton *mini_proj_chordType;
    GChSearchField *mini_proj_search;
    GChPopUpButton *mini_proj_numOfFrets;
    GChButton *mini_proj_lefty;
    GChGlyphButton *mini_proj_preview;
    GChGlyphPopup *mini_proj_gear;
    GChButton *mini_cancel;
    GChButton *mini_ok;
    GChButton *mini_insert;
    GChTabView *mini_tabView;
    NSMatrix *simple_lib_location;
    GChSearchField *simple_lib_search;
    GChLibraryView *simple_lib_chordList;
    NSMatrix *simple_proj_location;
    GChSearchField *simple_proj_search;
    GChProjView *simple_proj_chordList;
    MAKitSegmentedControl *simple_toExpert;
    GChButton *simple_cancel;
    GChButton *simple_ok;
    GChButton *simple_insert;
    GChTabView *simple_tabView;
    GChWindowView *main_windowView;
    GChWindowView *mini_windowView;
    GChWindowView *simple_windowView;
    GChDatabase *gchDatabase;
    NSTabViewItem *m_removedTabItem;
    BOOL m_runsAsModalWindow;
    BOOL m_canChangeTuning;
    BOOL m_canMultipleMode;
    BOOL m_multipleModeIsActive;
    int m_windowViewID;
    int m_activeTabID;
    long long playMode;
    long long playSpeed;
    BOOL libPreviewIsActive;
    BOOL projPreviewIsActive;
    BOOL m_textWasChanged;
    int m_textEditingID;
}

+ (void)initialize;
+ (BOOL)deleteChordDescr:(id)arg1 virtualLibrary:(void *)arg2;
+ (BOOL)addChordDescr:(id)arg1 virtualLibrary:(void *)arg2;
+ (BOOL)removeVirtualLibrary:(void *)arg1;
+ (void *)createVirtualLibrary:(id)arg1 withTuningDescr:(id)arg2;
+ (BOOL)showModalGuitarChordsInspectorForChordDescr:(id)arg1 withTuningDescr:(id)arg2 filterParameters:(id)arg3 allowAllTunings:(BOOL)arg4 displayOptions:(id)arg5 scdi:(struct ScDragInsert *)arg6 scvs:(struct ScViewState *)arg7;
+ (void)closeGuitarChordsInspector;
+ (void)openGuitarChordsInspector;
+ (BOOL)guitarChordsInspectorIsOpen;
- (void)searchForGChordsInSong:(struct ScViewState *)arg1;
- (BOOL)deleteChordDescr:(id)arg1 virtualLibrary:(void *)arg2;
- (BOOL)addChordDescr:(id)arg1 virtualLibrary:(void *)arg2;
- (BOOL)removeVirtualLibrary:(void *)arg1;
- (id)createVirtualLibrary:(id)arg1 withTuningDescr:(id)arg2;
- (id)libraryFromLibraryReference:(void *)arg1;
- (void)saveWindowPosition;
- (void)windowWillClose:(id)arg1;
- (BOOL)windowShouldClose:(id)arg1;
- (void)tableView:(id)arg1 setObjectValue:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)outlineView:(id)arg1 setObjectValue:(id)arg2 forTableColumn:(id)arg3 byItem:(id)arg4;
- (BOOL)outlineView:(id)arg1 shouldEditTableColumn:(id)arg2 item:(id)arg3;
- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (void)create_arrowKeyWasPressed:(BOOL)arg1;
- (void)create_setObjectValue:(id)arg1 forTableColumn:(id)arg2 row:(long long)arg3;
- (id)create_objectValueForTableColumn:(id)arg1 row:(long long)arg2;
- (long long)create_numberOfRowsInTableView;
- (void)create_controlAction:(id)arg1;
- (void)create_sheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)create_showSheet;
- (void)create_setParameterForTuning:(id)arg1;
- (void)outlineViewSelectionDidChange:(id)arg1;
- (void)export_showSheet;
- (BOOL)returnWasPressed;
- (BOOL)multipleModeIsActive;
- (BOOL)canMultipleMode;
- (BOOL)canChangeTuning;
- (BOOL)isSimpleWindow;
- (BOOL)isMiniWindow;
- (BOOL)runsAsModalWindow;
- (void)tun_updateButtons;
- (void)tun_deleteSelectedLibraries;
- (id)tun_selectedUserLibraries;
- (void)import_sheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)import_showSheet;
- (void)searchStringAction:(id)arg1;
- (void)edit_controlAction:(id)arg1;
- (void)levelMatrixAction:(id)arg1;
- (void)locationMatrixAction:(id)arg1;
- (void)capodasterPopupAction:(id)arg1;
- (void)tuningPopupAction:(id)arg1;
- (void)controlAction:(id)arg1;
- (void)changeChordName:(id)arg1;
- (void)changeChordAction;
- (void)addChordAction;
- (BOOL)menuItemWasHandled:(id)arg1;
- (void)selectTabWithID:(int)arg1;
- (void)tabView:(id)arg1 didSelectTabViewItem:(id)arg2;
- (void)tabView:(id)arg1 willSelectTabViewItem:(id)arg2;
- (BOOL)control:(id)arg1 textView:(id)arg2 doCommandBySelector:(SEL)arg3;
- (id)currChordList;
- (void)cleanupSearchStr;
- (void)controlTextDidChange:(id)arg1;
- (void)considerSearchText:(id)arg1;
- (BOOL)searchTextIsValid:(id)arg1 resData:(struct GChSearchData *)arg2;
- (void)setTextEditingID:(int)arg1;
- (int)textEditingID;
- (void)setTextWasChanged:(BOOL)arg1;
- (BOOL)textWasChanged;
- (void)mouseDownOnResponder:(id)arg1;
- (void)endEditionOfText:(id)arg1 dontCancel:(BOOL)arg2;
- (BOOL)shouldMakeFirstResponder:(id)arg1 isMouseEvent:(BOOL)arg2;
- (BOOL)shouldMakeFirstResponder1:(id)arg1 isMouseEvent:(BOOL)arg2;
- (void)editedChordElemWasChanged:(id)arg1;
- (void)editedChordWasChanged:(id)arg1;
- (void)chordListViewDoubleClickOnItem:(id)arg1;
- (void)chordListViewSelectionChanged:(id)arg1;
- (void)createEmptyChord:(BOOL)arg1;
- (void)createEmptyChordAction;
- (void)edit_setDifficulty:(int)arg1;
- (void)edit_setChordType:(int)arg1;
- (void)edit_setBassNote:(int)arg1;
- (void)edit_setRootNote:(int)arg1;
- (void)setSelectedChordToEdit;
- (void)setChordToEdit:(id)arg1;
- (id)libraryWithRuntimeID:(long long)arg1;
- (void)edit_updateButtonsState;
- (void)edit_updateChordProperties:(BOOL)arg1;
- (void)modal_updateOkButton;
- (void)setActiveTabForIdentifier:(id)arg1;
- (BOOL)activeTabIsTuning;
- (BOOL)activeTabIsEditor;
- (BOOL)currentTabIs_tuning;
- (BOOL)currentTabIs_editor;
- (BOOL)currentTabIs_project;
- (BOOL)currentTabIs_library;
- (void)toggleWindowView;
- (struct CGRect)newFrameForNewContentView:(id)arg1;
- (void)windowDidLoad;
- (void)checkMinSize;
- (void)checkMinSize1:(struct CGSize)arg1;
- (void)awakeFromNib;
- (void)awakeFromNib_modal_simple;
- (void)awakeFromNib_modal_mini;
- (void)awakeFromNib_proj_simple;
- (void)awakeFromNib_proj_mini;
- (void)awakeFromNib_lib_simple;
- (void)awakeFromNib_lib_mini;
- (void)awakeFromNib_modal_main;
- (void)awakeFromNib_proj_main;
- (void)awakeFromNib_lib_main;
- (void)setWindowControllerFor:(id)arg1;
- (id)removeTabWithIdentifier:(id)arg1;
- (void)playEditChord;
- (void)playLibChord;
- (void)playProjChord;
- (void)gearMenuAction:(id)arg1;
- (void)setupGearMenu:(id)arg1;
- (void)setupGearPlayMode:(long long)arg1 playSpeed:(long long)arg2 forPopupButton:(id)arg3;
- (void)setupAsManagerWithTuning:(id)arg1;
- (void)setupWithChordDescr:(id)arg1 andTuningDescr:(id)arg2 filterParameters:(id)arg3 allowAllTunings:(BOOL)arg4 displayOptions:(id)arg5;
- (void)setLibraryTo:(long long)arg1;
- (void)setCapodasterTo:(long long)arg1;
- (void)setAllNumberOfFretsTo:(long long)arg1;
- (void)setAllLeftyTo:(long long)arg1;
- (void)proj_updateFilterParameters:(id)arg1;
- (void)proj_updateFilterControls:(id)arg1 asMiniWindow:(int)arg2;
- (void)lib_updateFilterParameters:(id)arg1;
- (void)lib_updateFilterControls:(id)arg1 asMiniWindow:(int)arg2;
- (void)lib_updateChordList;
- (void)lib_updateTuningAndLibraryControls_asMiniWindow:(int)arg1;
- (void)capodaster_capodasterOffset:(long long)arg1;
- (BOOL)setResultChordToChordDescr:(id)arg1 andTuningDescr:(id)arg2;
- (void)dealloc;
- (void)disableStandardWindowButtons;
- (id)initAsModalWindow:(BOOL)arg1 canChangeTuning:(BOOL)arg2 enableMultiple:(BOOL)arg3;
- (void)addToLeftColumnWidth:(int)arg1;
- (void)removeAdditionalSpace;
- (int)windowViewID;
- (id)tabView1;
- (id)libView;
- (id)projView;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

