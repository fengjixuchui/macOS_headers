//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "NSURLDownloadDelegate.h"

@class NSImage, NSMutableArray, NSMutableString, NSString, NSURL, NSURLDownload, NSURLRequest, SUDataSizeFormatter, SUTimeRemainingFormatter;

@interface MAStoreDownloader : NSObject <NSURLDownloadDelegate>
{
    SUDataSizeFormatter *_dataSizeFormatter;
    SUTimeRemainingFormatter *_timeRemainingFormatter;
    NSMutableString *_thumbnailURL;
    NSMutableArray *_dates;
    NSMutableArray *_lengthNumbers;
    double _lastProgressNotificationTime;
    NSMutableArray *_groupInfos;
    NSURLDownload *_download;
    long long _receivedContentLength;
    long long _expectedContentLength;
    NSString *_destinationPath;
    NSImage *_thumbnailImage;
    id <MAStoreDownloaderDelegate> _delegate;
    id _category;
    NSString *_state;
    NSString *_packageID;
    long long _priority;
    unsigned long long _retryCount;
    NSURLRequest *_request;
    NSURL *_originalURL;
    NSURL *_cacheURL;
}

+ (void)removeCacheForURL:(id)arg1;
+ (void)initialize;
@property(retain) NSURL *cacheURL; // @synthesize cacheURL=_cacheURL;
@property(retain) NSURL *originalURL; // @synthesize originalURL=_originalURL;
@property(retain) NSURLRequest *request; // @synthesize request=_request;
@property unsigned long long retryCount; // @synthesize retryCount=_retryCount;
@property long long priority; // @synthesize priority=_priority;
@property(copy, nonatomic) NSString *packageID; // @synthesize packageID=_packageID;
@property(copy) NSString *state; // @synthesize state=_state;
@property(retain) id category; // @synthesize category=_category;
@property id <MAStoreDownloaderDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly) NSImage *thumbnailImage; // @synthesize thumbnailImage=_thumbnailImage;
@property(readonly) NSString *thumbnailURL; // @synthesize thumbnailURL=_thumbnailURL;
@property(copy) NSString *destinationPath; // @synthesize destinationPath=_destinationPath;
@property long long expectedContentLength; // @synthesize expectedContentLength=_expectedContentLength;
@property long long receivedContentLength; // @synthesize receivedContentLength=_receivedContentLength;
@property(retain) NSURLDownload *download; // @synthesize download=_download;
- (void)_helperThread;
- (void)_downloadSerialQueuePollingTimer:(id)arg1;
- (void)_startDownloadForMAStoreDownloader:(id)arg1;
- (void)download:(id)arg1 didFailWithError:(id)arg2;
- (void)downloadDidFinish:(id)arg1;
- (void)download:(id)arg1 didCreateDestination:(id)arg2;
- (BOOL)download:(id)arg1 shouldDecodeSourceDataOfMIMEType:(id)arg2;
- (void)download:(id)arg1 didReceiveDataOfLength:(unsigned long long)arg2;
- (void)download:(id)arg1 decideDestinationWithSuggestedFilename:(id)arg2;
- (void)download:(id)arg1 willResumeWithResponse:(id)arg2 fromByte:(long long)arg3;
- (void)download:(id)arg1 didReceiveResponse:(id)arg2;
- (void)downloadDidBegin:(id)arg1;
- (id)currentUserInfo;
- (double)estimatedTimeRemaining;
- (float)averageBytesPerSecond;
- (BOOL)_isLastDateWithinTimeInterval:(double)arg1;
- (void)_finalizeDownloader:(id)arg1 error:(id)arg2;
- (void)_performDelegateSelector:(SEL)arg1 withObject:(id)arg2;
@property(readonly, copy) NSString *description;
@property(readonly) long long downloaderType;
- (id)URL;
- (void)dealloc;
- (BOOL)delete;
- (BOOL)pause;
- (BOOL)cancel;
- (void)reinit;
- (BOOL)start;
- (BOOL)belongsToGroupID:(id)arg1;
- (void)removeGroupID:(id)arg1;
- (void)addOrUpdateGroupInfos:(id)arg1;
- (id)groupIDs;
- (id)groupInfos;
- (id)initWithOriginalURL:(id)arg1 cacheURL:(id)arg2 packageID:(id)arg3 groupInfos:(id)arg4 andDelegate:(id)arg5;
- (id)initWithRequest:(id)arg1 groupInfos:(id)arg2 andDelegate:(id)arg3;
- (void)_commonInitWithRequest:(id)arg1 groupInfos:(id)arg2 packageID:(id)arg3 andDelegate:(id)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

