//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AppDelegate;

struct AppleConnectionFactory;

struct ApplicationScope;

struct ApplicationScopeStack {
    struct unique_ptr<spotify::remote_config::Fetcher, std::__1::default_delete<spotify::remote_config::Fetcher>> _field1;
};

struct AppsHandler;

struct BridgeDelegate;

struct BridgeLogger;

struct BrowserClientMac {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    struct scoped_refptr<CefBrowser> _field3;
    struct scoped_refptr<CefMessageRouterBrowserSide> _field4;
    struct MessagesHandler *_field5;
    struct CastHandler *_field6;
    struct scoped_refptr<spotify::desktop::DisplayHandler> _field7;
    struct scoped_refptr<spotify::desktop::DevToolsHandler> _field8;
    struct scoped_refptr<CefContextMenuHandler> _field9;
    struct scoped_refptr<spotify::desktop::DragHandler> _field10;
    struct scoped_refptr<spotify::desktop::KeyboardHandler> _field11;
    struct scoped_refptr<spotify::desktop::UriHandler> _field12;
    struct scoped_refptr<spotify::desktop::LoadHandler> _field13;
    struct scoped_refptr<spotify::desktop::RequestHandler> _field14;
    struct scoped_refptr<spotify::desktop::ZoomHandler> _field15;
    _Bool _field16;
    _Bool _field17;
    struct PlayerState _field18;
    _Bool _field19;
    _Bool _field20;
    struct ViewOptions _field21;
    struct vector<scoped_refptr<spotify::desktop::ProcessMessageDelegate>, std::__1::allocator<scoped_refptr<spotify::desktop::ProcessMessageDelegate>>> _field22;
    struct AppDelegate *_field23;
    _Bool _field24;
    struct unique_ptr<spotify::desktop::MainFrameLoader, std::__1::default_delete<spotify::desktop::MainFrameLoader>> _field25;
    struct shared_ptr<spotify::desktop::BrowserFileDownloader> _field26;
    struct shared_ptr<spotify::desktop::WidevineInstaller> _field27;
    struct shared_ptr<spotify::desktop::apps::AppsHandler> _field28;
    struct scoped_connection _field29;
    struct scoped_connection _field30;
    struct scoped_connection _field31;
    struct scoped_connection _field32;
    struct scoped_connection _field33;
    _Bool _field34;
    _Bool _field35;
    _Bool _field36;
    struct CefRefCount _field37;
    struct Lock _field38;
    struct NotificationBroadcaster _field39;
    vector_efe3d086 _field40;
    struct PlayerState _field41;
    struct mutex _field42;
    struct connection _field43;
    id _field44;
};

struct BrowserFileDownloader;

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct CacheInfo {
    basic_string_23d93216 _field1;
    basic_string_23d93216 _field2;
    basic_string_23d93216 _field3;
};

struct CacheMigrator;

struct CastHandler;

struct CefBrowser;

struct CefContextMenuHandler;

struct CefDraggableRegion;

struct CefMessageRouterBrowserSide;

struct CefRefCount {
    int _field1;
};

struct ClientVersionInfo {
    unsigned int _field1;
    basic_string_23d93216 _field2;
    basic_string_23d93216 _field3;
    basic_string_23d93216 _field4;
    basic_string_23d93216 _field5;
};

struct CollectionFollowedArtistsHelper;

struct CoreCreateOptions {
    struct CacheInfo _field1;
    struct DeviceInfo _field2;
    struct ClientVersionInfo _field3;
    _Bool _field4;
    basic_string_23d93216 _field5;
};

struct CoreHandler {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<spotify::desktop::CoreThread> _field2;
    _Bool _field3;
    struct ProxyDef _field4;
    _Bool _field5;
    struct signal<void (), spotify::signals::optional_last_value<void>, int, std::__1::less<int>> _field6;
    struct signal<void (spotify::connectivity::auth::Session *, spotify::hermes::HermesHandler *, const std::__1::error_code &), spotify::signals::optional_last_value<void>, int, std::__1::less<int>> _field7;
    struct signal<void (), spotify::signals::optional_last_value<void>, int, std::__1::less<int>> _field8;
    basic_string_23d93216 _field9;
    _Bool _field10;
    struct unique_ptr<spotify::desktop::audio::DriverManager, std::__1::default_delete<spotify::desktop::audio::DriverManager>> _field11;
    struct unique_ptr<spotify::desktop::CollectionFollowedArtistsHelper, std::__1::default_delete<spotify::desktop::CollectionFollowedArtistsHelper>> _field12;
    struct CoreCreateOptions _field13;
    struct unique_ptr<spotify::client::ApplicationScope, std::__1::default_delete<spotify::client::ApplicationScope>> _field14;
    struct unique_ptr<spotify::desktop::CoreSessionState, std::__1::default_delete<spotify::desktop::CoreSessionState>> _field15;
    struct unique_ptr<spotify::desktop::SessionStatePersister, std::__1::default_delete<spotify::desktop::SessionStatePersister>> _field16;
    struct Resolve _field17;
    struct Resolve _field18;
    struct CosmosHandler _field19;
    struct unique_ptr<spotify::desktop::voice::VoiceController, std::__1::default_delete<spotify::desktop::voice::VoiceController>> _field20;
    struct unique_ptr<spotify::desktop::NetworkNotifier, std::__1::default_delete<spotify::desktop::NetworkNotifier>> _field21;
    struct scoped_connection _field22;
    struct unique_ptr<sp::BridgeLogger, std::__1::default_delete<sp::BridgeLogger>> _field23;
    struct unique_ptr<spotify::desktop::BridgeDelegate, std::__1::default_delete<spotify::desktop::BridgeDelegate>> _field24;
    struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> _field25;
    struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> _field26;
    struct map<std::__1::basic_string<char>, boost::optional<std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, boost::optional<std::__1::basic_string<char>>>>> _field27;
    struct scoped_connection _field28;
    struct scoped_connection _field29;
    struct scoped_connection _field30;
    struct scoped_connection _field31;
    struct scoped_connection _field32;
    struct scoped_connection _field33;
    struct scoped_connection _field34;
    struct scoped_connection _field35;
    struct scoped_connection _field36;
    struct scoped_connection _field37;
    struct scoped_connection _field38;
    struct scoped_connection _field39;
    struct scoped_connection _field40;
    struct scoped_connection _field41;
    struct scoped_connection _field42;
    struct shared_ptr<void> _field43;
    struct unique_ptr<spotify::desktop::LoginManager, std::__1::default_delete<spotify::desktop::LoginManager>> _field44;
    struct ApplicationScopeStack _field45;
    struct unique_ptr<spotify::desktop::FeatureFlagsManager, std::__1::default_delete<spotify::desktop::FeatureFlagsManager>> _field46;
    struct PlayerDelegate _field47;
    struct mutex _field48;
    struct time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000>>> _field49;
    basic_string_23d93216 _field50;
    struct shared_ptr<spotify::event_sender::EventSenderHttp> _field51;
};

struct CoreSessionState;

struct CoreThread;

struct CosmosHandler {
    struct shared_ptr<spotify::desktop::ManagedCosmosRequests> _field1;
    struct shared_ptr<spotify::desktop::ManagedCosmosRequests> _field2;
};

struct Data;

struct DevToolsHandler;

struct DeviceInfo {
    basic_string_23d93216 _field1;
    basic_string_23d93216 _field2;
    basic_string_23d93216 _field3;
};

struct DiscoveredService {
    basic_string_23d93216 _field1;
    basic_string_23d93216 _field2;
    struct set<asio::ip::basic_endpoint<asio::ip::udp>, std::__1::less<asio::ip::basic_endpoint<asio::ip::udp>>, std::__1::allocator<asio::ip::basic_endpoint<asio::ip::udp>>> _field3;
    struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> _field4;
};

struct DisplayHandler;

struct DragHandler;

struct DriverManager;

struct EventSenderHttp;

struct FeatureFlagsManager;

struct Fetcher;

struct InternalLoadMeasurementManager;

struct InternalSystemLoadMeasurerMac {
    id _field1;
    struct function<void (spotify::desktop::EventType, bool)> _field2;
};

struct KeyboardHandler;

struct LoadHandler;

struct Lock {
    struct LockImpl _field1;
};

struct LockImpl {
    struct _opaque_pthread_mutex_t _field1;
};

struct LoginManager;

struct MainFrameLoader;

struct ManagedCosmosRequests;

struct MessagesHandler;

struct NetworkNotifier;

struct NotificationBroadcaster {
    struct SpotifyLink _field1;
    _Bool _field2;
};

struct OsxNetworkNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct signal<void (spotify::connectivity::ConnectionType), spotify::signals::optional_last_value<void>, int, std::__1::less<int>> _field2;
    struct unique_ptr<spotify::desktop::OsxNetworkNotifier::Data, std::__1::default_delete<spotify::desktop::OsxNetworkNotifier::Data>> _field3;
};

struct PlayerDelegate {
    struct unique_ptr<spotify::desktop::PlayerDelegateDetail, std::__1::default_delete<spotify::desktop::PlayerDelegateDetail>> _field1;
};

struct PlayerDelegateDetail;

struct PlayerState {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    shared_ptr_8b48272b _field14;
    int _field15;
};

struct ProxyDef {
    int _field1;
    unsigned int _field2;
    basic_string_23d93216 _field3;
    basic_string_23d93216 _field4;
    basic_string_23d93216 _field5;
};

struct Random;

struct RequestHandler;

struct Resolve {
    struct shared_ptr<spotify::cosmos::resolve::ResolveImpl> _field1;
};

struct ResolveImpl;

struct RuntimeUsageInfo;

struct SessionStatePersister;

struct SpotifyLink {
    int _field1;
    basic_string_23d93216 _field2;
    struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> _field3;
    unsigned int _field4;
    unsigned int _field5;
    int _field6;
    int _field7;
    union {
        struct gid<16, spotify::uri::detail::AlbumIdTag> _field1;
        struct gid<16, spotify::uri::detail::ArtistIdTag> _field2;
        struct gid<16, spotify::uri::detail::TrackIdTag> _field3;
        struct gid<16, spotify::uri::detail::PlaylistIdTag> _field4;
        int _field5;
        struct gid<16, spotify::uri::detail::AdIdTag> _field6;
        struct gid<16, spotify::uri::detail::AdIdTag> _field7;
        unsigned long long _field8;
        basic_string_23d93216 *_field9;
        int _field10;
        int _field11;
        struct gid<20, spotify::uri::detail::ImageIdTag> _field12;
        struct vector<spotify::uri::SpotifyLink, std::__1::allocator<spotify::uri::SpotifyLink>> *_field13;
        struct gid<16, spotify::uri::detail::ShowIdTag> _field14;
        struct gid<16, spotify::uri::detail::EpisodeIdTag> _field15;
        struct gid<16, spotify::uri::detail::DailyMixIdTag> _field16;
        struct gid<16, spotify::uri::detail::LicensorIdTag> _field17;
        struct gid<16, spotify::uri::detail::ZeroTapIdTag> _field18;
        int _field19;
        struct {
            struct vector<spotify::tl::gid<16, spotify::uri::detail::TrackIdTag>, std::__1::allocator<spotify::tl::gid<16, spotify::uri::detail::TrackIdTag>>> *_field1;
            int _field2;
        } _field20;
        struct {
            struct gid<20, spotify::uri::detail::FileIdTag> _field1;
            int _field2;
        } _field21;
        struct {
            int _field1;
            unsigned int _field2;
        } _field22;
        int _field23;
        int _field24;
    } _field8;
};

struct SystemConnectionFactory;

struct SystemLoadMeasurer;

struct TimerManager {
    CDUnknownFunctionPointerType *_field1;
};

struct TrackMetadata;

struct UriHandler;

struct UserIntent {
    basic_string_23d93216 _field1;
};

struct ViewOptions {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
};

struct VoiceController;

struct WidevineInstaller;

struct ZoomHandler;

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *_field1;
};

struct _opaque_pthread_mutex_t {
    long long _field1;
    char _field2[56];
};

struct aligned_struct<40, 8> {
    unsigned char _field1[40];
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
};

struct connected_slot;

struct connection {
    struct shared_ptr<spotify::signals::connection::shared_state> _field1;
};

struct duration<long long, std::__1::ratio<1, 1000000000>> {
    long long __rep_;
};

struct duration<long long, std::__1::ratio<1, 1000000>> {
    long long _field1;
};

struct function<void (const std::__1::vector<std::__1::shared_ptr<spotify::connect::MdnsDevice>, std::__1::allocator<std::__1::shared_ptr<spotify::connect::MdnsDevice>>>&, unsigned long long)> {
    struct __value_func<void (const std::__1::vector<std::__1::shared_ptr<spotify::connect::MdnsDevice>, std::__1::allocator<std::__1::shared_ptr<spotify::connect::MdnsDevice>>>&, unsigned long long)> {
        struct type __buf_;
        struct __base<void (const std::__1::vector<std::__1::shared_ptr<spotify::connect::MdnsDevice>, std::__1::allocator<std::__1::shared_ptr<spotify::connect::MdnsDevice>>>&, unsigned long long)> *__f_;
    } __f_;
};

struct function<void (spotify::desktop::EventType, bool)> {
    struct __value_func<void (spotify::desktop::EventType, bool)> {
        struct type _field1;
        struct __base<void (spotify::desktop::EventType, bool)> *_field2;
    } _field1;
};

struct gid<16, spotify::uri::detail::AdIdTag> {
    unsigned char _field1[16];
};

struct gid<16, spotify::uri::detail::AlbumIdTag> {
    unsigned char _field1[16];
};

struct gid<16, spotify::uri::detail::ArtistIdTag> {
    unsigned char _field1[16];
};

struct gid<16, spotify::uri::detail::DailyMixIdTag> {
    unsigned char _field1[16];
};

struct gid<16, spotify::uri::detail::EpisodeIdTag> {
    unsigned char _field1[16];
};

struct gid<16, spotify::uri::detail::LicensorIdTag> {
    unsigned char _field1[16];
};

struct gid<16, spotify::uri::detail::PlaylistIdTag> {
    unsigned char _field1[16];
};

struct gid<16, spotify::uri::detail::ShowIdTag> {
    unsigned char _field1[16];
};

struct gid<16, spotify::uri::detail::TrackIdTag> {
    unsigned char _field1[16];
};

struct gid<16, spotify::uri::detail::ZeroTapIdTag> {
    unsigned char _field1[16];
};

struct gid<20, spotify::uri::detail::FileIdTag> {
    unsigned char _field1[20];
};

struct gid<20, spotify::uri::detail::ImageIdTag> {
    unsigned char _field1[20];
};

struct in_addr {
    unsigned int _field1;
};

struct less<int>;

struct map<int, spotify::desktop::ProcessInfo, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, spotify::desktop::ProcessInfo>>>;

struct map<std::__1::basic_string<char>, boost::optional<std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, boost::optional<std::__1::basic_string<char>>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, boost::optional<std::__1::basic_string<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, boost::optional<std::__1::basic_string<char>>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, boost::optional<std::__1::basic_string<char>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, boost::optional<std::__1::basic_string<char>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, boost::optional<std::__1::basic_string<char>>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct mutex {
    struct _opaque_pthread_mutex_t _field1;
};

struct optional_last_value<void>;

struct scoped_connection {
    struct shared_ptr<spotify::signals::connection::shared_state> _field1;
};

struct scoped_refptr<CefBrowser> {
    struct CefBrowser *_field1;
};

struct scoped_refptr<CefContextMenuHandler> {
    struct CefContextMenuHandler *_field1;
};

struct scoped_refptr<CefMessageRouterBrowserSide> {
    struct CefMessageRouterBrowserSide *_field1;
};

struct scoped_refptr<spotify::desktop::DevToolsHandler> {
    struct DevToolsHandler *_field1;
};

struct scoped_refptr<spotify::desktop::DisplayHandler> {
    struct DisplayHandler *_field1;
};

struct scoped_refptr<spotify::desktop::DragHandler> {
    struct DragHandler *_field1;
};

struct scoped_refptr<spotify::desktop::KeyboardHandler> {
    struct KeyboardHandler *_field1;
};

struct scoped_refptr<spotify::desktop::LoadHandler> {
    struct LoadHandler *_field1;
};

struct scoped_refptr<spotify::desktop::ProcessMessageDelegate>;

struct scoped_refptr<spotify::desktop::RequestHandler> {
    struct RequestHandler *_field1;
};

struct scoped_refptr<spotify::desktop::UriHandler> {
    struct UriHandler *_field1;
};

struct scoped_refptr<spotify::desktop::ZoomHandler> {
    struct ZoomHandler *_field1;
};

struct set<asio::ip::basic_endpoint<asio::ip::udp>, std::__1::less<asio::ip::basic_endpoint<asio::ip::udp>>, std::__1::allocator<asio::ip::basic_endpoint<asio::ip::udp>>> {
    struct __tree<asio::ip::basic_endpoint<asio::ip::udp>, std::__1::less<asio::ip::basic_endpoint<asio::ip::udp>>, std::__1::allocator<asio::ip::basic_endpoint<asio::ip::udp>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<asio::ip::basic_endpoint<asio::ip::udp>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<asio::ip::basic_endpoint<asio::ip::udp>>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct shared_ptr<const spotify::desktop::TrackMetadata> {
    struct TrackMetadata *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<spotify::connect::MdnsDevice>;

struct shared_ptr<spotify::cosmos::resolve::ResolveImpl> {
    struct ResolveImpl *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<spotify::desktop::BrowserFileDownloader> {
    struct BrowserFileDownloader *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<spotify::desktop::CacheMigrator> {
    struct CacheMigrator *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<spotify::desktop::CoreThread> {
    struct CoreThread *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<spotify::desktop::InternalLoadMeasurementManager> {
    struct InternalLoadMeasurementManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<spotify::desktop::ManagedCosmosRequests> {
    struct ManagedCosmosRequests *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<spotify::desktop::RuntimeUsageInfo> {
    struct RuntimeUsageInfo *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<spotify::desktop::SystemLoadMeasurer> {
    struct SystemLoadMeasurer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<spotify::desktop::WidevineInstaller> {
    struct WidevineInstaller *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<spotify::desktop::apps::AppsHandler> {
    struct AppsHandler *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<spotify::event_sender::EventSenderHttp> {
    struct EventSenderHttp *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<spotify::http::AppleConnectionFactory> {
    struct AppleConnectionFactory *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<spotify::http::SystemConnectionFactory> {
    struct SystemConnectionFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<spotify::security::Random> {
    struct Random *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<spotify::signals::connection::shared_state> {
    struct shared_state *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<std::__1::map<int, spotify::desktop::ProcessInfo, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, spotify::desktop::ProcessInfo>>>> {
    struct map<int, spotify::desktop::ProcessInfo, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, spotify::desktop::ProcessInfo>>> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<void> {
    void *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_state;

struct signal<void (), spotify::signals::optional_last_value<void>, int, std::__1::less<int>> {
    struct shared_ptr<void> _field1;
    struct mutex _field2;
    struct slot_vector _field3;
    struct optional_last_value<void> _field4;
    struct less<int> _field5;
};

struct signal<void (spotify::connectivity::ConnectionType), spotify::signals::optional_last_value<void>, int, std::__1::less<int>> {
    struct shared_ptr<void> _field1;
    struct mutex _field2;
    struct slot_vector _field3;
    struct optional_last_value<void> _field4;
    struct less<int> _field5;
};

struct signal<void (spotify::connectivity::auth::Session *, spotify::hermes::HermesHandler *, const std::__1::error_code &), spotify::signals::optional_last_value<void>, int, std::__1::less<int>> {
    struct shared_ptr<void> _field1;
    struct mutex _field2;
    struct slot_vector _field3;
    struct optional_last_value<void> _field4;
    struct less<int> _field5;
};

struct slot_vector {
    struct small_vector<spotify::signals::detail::connected_slot, 16, void, void> _field1;
    _Bool _field2;
};

struct small_vector<spotify::signals::detail::connected_slot, 16, void, void> {
    struct vector_alloc_holder<boost::container::small_vector_allocator<spotify::signals::detail::connected_slot, boost::container::new_allocator<void>, void>, unsigned long, boost::move_detail::integral_constant<unsigned int, 1>> _field1;
    union aligned_struct_wrapper<40, 8> _field2;
    union aligned_struct_wrapper<40, 8> _field3[15];
};

struct sockaddr_in {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    struct in_addr _field4;
    char _field5[8];
};

struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000>>> {
    duration_673274cf __d_;
};

struct time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000>>> {
    struct duration<long long, std::__1::ratio<1, 1000000>> _field1;
};

struct type {
    unsigned char __lx[32];
};

struct unique_ptr<sp::BridgeLogger, std::__1::default_delete<sp::BridgeLogger>> {
    struct __compressed_pair<sp::BridgeLogger *, std::__1::default_delete<sp::BridgeLogger>> {
        struct BridgeLogger *_field1;
    } _field1;
};

struct unique_ptr<spotify::client::ApplicationScope, std::__1::default_delete<spotify::client::ApplicationScope>> {
    struct __compressed_pair<spotify::client::ApplicationScope *, std::__1::default_delete<spotify::client::ApplicationScope>> {
        struct ApplicationScope *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::BridgeDelegate, std::__1::default_delete<spotify::desktop::BridgeDelegate>> {
    struct __compressed_pair<spotify::desktop::BridgeDelegate *, std::__1::default_delete<spotify::desktop::BridgeDelegate>> {
        struct BridgeDelegate *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::CollectionFollowedArtistsHelper, std::__1::default_delete<spotify::desktop::CollectionFollowedArtistsHelper>> {
    struct __compressed_pair<spotify::desktop::CollectionFollowedArtistsHelper *, std::__1::default_delete<spotify::desktop::CollectionFollowedArtistsHelper>> {
        struct CollectionFollowedArtistsHelper *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::CoreSessionState, std::__1::default_delete<spotify::desktop::CoreSessionState>> {
    struct __compressed_pair<spotify::desktop::CoreSessionState *, std::__1::default_delete<spotify::desktop::CoreSessionState>> {
        struct CoreSessionState *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::FeatureFlagsManager, std::__1::default_delete<spotify::desktop::FeatureFlagsManager>> {
    struct __compressed_pair<spotify::desktop::FeatureFlagsManager *, std::__1::default_delete<spotify::desktop::FeatureFlagsManager>> {
        struct FeatureFlagsManager *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::LoginManager, std::__1::default_delete<spotify::desktop::LoginManager>> {
    struct __compressed_pair<spotify::desktop::LoginManager *, std::__1::default_delete<spotify::desktop::LoginManager>> {
        struct LoginManager *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::MainFrameLoader, std::__1::default_delete<spotify::desktop::MainFrameLoader>> {
    struct __compressed_pair<spotify::desktop::MainFrameLoader *, std::__1::default_delete<spotify::desktop::MainFrameLoader>> {
        struct MainFrameLoader *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::NetworkNotifier, std::__1::default_delete<spotify::desktop::NetworkNotifier>> {
    struct __compressed_pair<spotify::desktop::NetworkNotifier *, std::__1::default_delete<spotify::desktop::NetworkNotifier>> {
        struct NetworkNotifier *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::OsxNetworkNotifier::Data, std::__1::default_delete<spotify::desktop::OsxNetworkNotifier::Data>> {
    struct __compressed_pair<spotify::desktop::OsxNetworkNotifier::Data *, std::__1::default_delete<spotify::desktop::OsxNetworkNotifier::Data>> {
        struct Data *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::PlayerDelegateDetail, std::__1::default_delete<spotify::desktop::PlayerDelegateDetail>> {
    struct __compressed_pair<spotify::desktop::PlayerDelegateDetail *, std::__1::default_delete<spotify::desktop::PlayerDelegateDetail>> {
        struct PlayerDelegateDetail *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::SessionStatePersister, std::__1::default_delete<spotify::desktop::SessionStatePersister>> {
    struct __compressed_pair<spotify::desktop::SessionStatePersister *, std::__1::default_delete<spotify::desktop::SessionStatePersister>> {
        struct SessionStatePersister *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::audio::DriverManager, std::__1::default_delete<spotify::desktop::audio::DriverManager>> {
    struct __compressed_pair<spotify::desktop::audio::DriverManager *, std::__1::default_delete<spotify::desktop::audio::DriverManager>> {
        struct DriverManager *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::voice::VoiceController, std::__1::default_delete<spotify::desktop::voice::VoiceController>> {
    struct __compressed_pair<spotify::desktop::voice::VoiceController *, std::__1::default_delete<spotify::desktop::voice::VoiceController>> {
        struct VoiceController *_field1;
    } _field1;
};

struct unique_ptr<spotify::remote_config::Fetcher, std::__1::default_delete<spotify::remote_config::Fetcher>> {
    struct __compressed_pair<spotify::remote_config::Fetcher *, std::__1::default_delete<spotify::remote_config::Fetcher>> {
        struct Fetcher *_field1;
    } _field1;
};

struct vector<CefDraggableRegion, std::__1::allocator<CefDraggableRegion>> {
    struct CefDraggableRegion *__begin_;
    struct CefDraggableRegion *__end_;
    struct __compressed_pair<CefDraggableRegion *, std::__1::allocator<CefDraggableRegion>> {
        struct CefDraggableRegion *__value_;
    } __end_cap_;
};

struct vector<scoped_refptr<spotify::desktop::ProcessMessageDelegate>, std::__1::allocator<scoped_refptr<spotify::desktop::ProcessMessageDelegate>>> {
    struct scoped_refptr<spotify::desktop::ProcessMessageDelegate> *_field1;
    struct scoped_refptr<spotify::desktop::ProcessMessageDelegate> *_field2;
    struct __compressed_pair<scoped_refptr<spotify::desktop::ProcessMessageDelegate>*, std::__1::allocator<scoped_refptr<spotify::desktop::ProcessMessageDelegate>>> {
        struct scoped_refptr<spotify::desktop::ProcessMessageDelegate> *_field1;
    } _field3;
};

struct vector<spotify::tl::gid<16, spotify::uri::detail::TrackIdTag>, std::__1::allocator<spotify::tl::gid<16, spotify::uri::detail::TrackIdTag>>>;

struct vector<spotify::uri::SpotifyLink, std::__1::allocator<spotify::uri::SpotifyLink>>;

struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    basic_string_23d93216 *_field1;
    basic_string_23d93216 *_field2;
    struct __compressed_pair<std::__1::basic_string<char>*, std::__1::allocator<std::__1::basic_string<char>>> {
        basic_string_23d93216 *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<spotify::connect::MdnsDevice>, std::__1::allocator<std::__1::shared_ptr<spotify::connect::MdnsDevice>>> {
    struct shared_ptr<spotify::connect::MdnsDevice> *__begin_;
    struct shared_ptr<spotify::connect::MdnsDevice> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<spotify::connect::MdnsDevice>*, std::__1::allocator<std::__1::shared_ptr<spotify::connect::MdnsDevice>>> {
        struct shared_ptr<spotify::connect::MdnsDevice> *__value_;
    } __end_cap_;
};

struct vector_alloc_holder<boost::container::small_vector_allocator<spotify::signals::detail::connected_slot, boost::container::new_allocator<void>, void>, unsigned long, boost::move_detail::integral_constant<unsigned int, 1>> {
    struct connected_slot *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
};

struct weak_ptr<spotify::http::AppleConnectionFactory> {
    struct AppleConnectionFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
} basic_string_23d93216;

typedef struct duration<long long, std::__1::ratio<1, 1000000000>> {
    long long __rep_;
} duration_673274cf;

typedef struct function<void (const std::__1::vector<std::__1::shared_ptr<spotify::connect::MdnsDevice>, std::__1::allocator<std::__1::shared_ptr<spotify::connect::MdnsDevice>>>&, unsigned long long)> {
    struct __value_func<void (const std::__1::vector<std::__1::shared_ptr<spotify::connect::MdnsDevice>, std::__1::allocator<std::__1::shared_ptr<spotify::connect::MdnsDevice>>>&, unsigned long long)> {
        struct type __buf_;
        struct __base<void (const std::__1::vector<std::__1::shared_ptr<spotify::connect::MdnsDevice>, std::__1::allocator<std::__1::shared_ptr<spotify::connect::MdnsDevice>>>&, unsigned long long)> *__f_;
    } __f_;
} function_f860d105;

typedef struct shared_ptr<const spotify::desktop::TrackMetadata> {
    struct TrackMetadata *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_8b48272b;

typedef struct shared_ptr<spotify::desktop::CacheMigrator> {
    struct CacheMigrator *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_98d623b7;

typedef struct shared_ptr<spotify::desktop::InternalLoadMeasurementManager> {
    struct InternalLoadMeasurementManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_37b9480f;

typedef struct shared_ptr<spotify::desktop::RuntimeUsageInfo> {
    struct RuntimeUsageInfo *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_25c5fef7;

typedef struct shared_ptr<spotify::desktop::SystemLoadMeasurer> {
    struct SystemLoadMeasurer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_539df0a8;

typedef struct shared_ptr<spotify::http::AppleConnectionFactory> {
    struct AppleConnectionFactory *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_04bee604;

typedef struct shared_ptr<spotify::http::SystemConnectionFactory> {
    struct SystemConnectionFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_5027cb57;

typedef struct shared_ptr<std::__1::map<int, spotify::desktop::ProcessInfo, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, spotify::desktop::ProcessInfo>>>> {
    struct map<int, spotify::desktop::ProcessInfo, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, spotify::desktop::ProcessInfo>>> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_8f5bfb0f;

typedef struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000>>> {
    duration_673274cf __d_;
} time_point_e708cccf;

typedef struct vector<CefDraggableRegion, std::__1::allocator<CefDraggableRegion>> {
    struct CefDraggableRegion *__begin_;
    struct CefDraggableRegion *__end_;
    struct __compressed_pair<CefDraggableRegion *, std::__1::allocator<CefDraggableRegion>> {
        struct CefDraggableRegion *__value_;
    } __end_cap_;
} vector_efe3d086;

typedef struct vector<std::__1::shared_ptr<spotify::connect::MdnsDevice>, std::__1::allocator<std::__1::shared_ptr<spotify::connect::MdnsDevice>>> {
    struct shared_ptr<spotify::connect::MdnsDevice> *__begin_;
    struct shared_ptr<spotify::connect::MdnsDevice> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<spotify::connect::MdnsDevice>*, std::__1::allocator<std::__1::shared_ptr<spotify::connect::MdnsDevice>>> {
        struct shared_ptr<spotify::connect::MdnsDevice> *__value_;
    } __end_cap_;
} vector_023e58be;

typedef struct weak_ptr<spotify::http::AppleConnectionFactory> {
    struct AppleConnectionFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
} weak_ptr_746914f4;

#pragma mark Named Unions

union aligned_struct_wrapper<40, 8> {
    struct aligned_struct<40, 8> _field1;
    unsigned char _field2[40];
};

