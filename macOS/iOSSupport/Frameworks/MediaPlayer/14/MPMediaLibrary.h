//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 25 2017 03:49:04).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <MediaPlayer/NSSecureCoding-Protocol.h>
#import <MediaPlayer/_MPActiveUserChangeMonitorDelegate-Protocol.h>

@class ICUserIdentity, ML3MusicLibrary, NSArray, NSDate, NSMutableArray, NSMutableDictionary, NSNumber, NSPointerArray, NSString, NSURL, QueryCriteriaResultsCache, _MPActiveUserChangeMonitor;
@protocol MPMediaLibraryDataProviderPrivate, OS_dispatch_queue;

@interface MPMediaLibrary : NSObject <_MPActiveUserChangeMonitorDelegate, NSSecureCoding>
{
    id <MPMediaLibraryDataProviderPrivate> _libraryDataProvider;
    NSObject<OS_dispatch_queue> *_entityCacheQueue;
    NSObject<OS_dispatch_queue> *_fixedQueue;
    NSArray *_notificationObservers;
    QueryCriteriaResultsCache *_itemsForCriteriaCache;
    QueryCriteriaResultsCache *_hasItemsForCriteriaCache;
    QueryCriteriaResultsCache *_countOfItemsForCriteriaCache;
    QueryCriteriaResultsCache *_itemResultSetsForCriteriaCache;
    QueryCriteriaResultsCache *_collectionsForCriteriaCache;
    QueryCriteriaResultsCache *_hasCollectionsForCriteriaCache;
    QueryCriteriaResultsCache *_countOfCollectionsForCriteriaCache;
    QueryCriteriaResultsCache *_collectionsResultSetsForCriteriaCache;
    NSMutableDictionary *_hasItemsDidLoadForCriteria;
    NSMutableDictionary *_hasCollectionsDidLoadForCriteria;
    NSMutableDictionary *_countOfCollectionsDidLoadForCriteria;
    NSMutableDictionary *_countOfItemsDidLoadForCriteria;
    NSMutableArray *_additionalLibraryFilterPredicates;
    NSObject<OS_dispatch_queue> *_additionalLibraryFilterPredicatesAccessQueue;
    NSPointerArray *_connectionAssertions;
    NSObject<OS_dispatch_queue> *_connectionAssertionsQueue;
    BOOL _disconnectAfterReleasingAssertions;
    float _connectionProgress;
    long long _removalReason;
    unsigned int _determinedHasMedia:1;
    unsigned int _hasMedia:1;
    unsigned int _determinedHasSongs:1;
    unsigned int _hasSongs:1;
    unsigned int _determinedHasGeniusMixes:1;
    unsigned int _hasGeniusMixes:1;
    unsigned int _determinedHasPlaylists:1;
    unsigned int _hasPlaylists:1;
    unsigned int _determinedHasComposers:1;
    unsigned int _hasComposers:1;
    unsigned int _determinedHasPodcasts:1;
    unsigned int _hasPodcasts:1;
    unsigned int _determinedHasUbiquitousBookmarkableItems:1;
    unsigned int _hasUbiquitousBookmarkableContent:1;
    unsigned int _determinedHasAudiobooks:1;
    unsigned int _hasAudiobooks:1;
    long long _cloudFilteringType;
    BOOL _filteringDisabled;
    BOOL _hasVideos;
    BOOL _determinedHasVideos;
    BOOL _hasMusicVideos;
    BOOL _determinedHasMusicVideos;
    BOOL _hasAudibleAudioBooks;
    BOOL _determinedHasAudibleAudioBooks;
    BOOL _hasMovies;
    BOOL _determinedHasMovies;
    BOOL _hasCompilations;
    BOOL _determinedHasCompilations;
    BOOL _hasITunesU;
    BOOL _determinedHasITunesU;
    BOOL _hasVideoITunesU;
    BOOL _determinedHasVideoITunesU;
    BOOL _hasMovieRentals;
    BOOL _determinedHasMovieRentals;
    BOOL _hasTVShows;
    BOOL _determinedHasTVShows;
    BOOL _hasHomeVideos;
    BOOL _determinedHasHomeVideos;
    BOOL _hasVideoPodcasts;
    BOOL _determinedHasVideoPodcasts;
    unsigned char _originalCellNetworkFlags;
    unsigned char _originalWiFiNetworkFlags;
    id __MLCoreStorage;
    NSObject<OS_dispatch_queue> *_accessQueue;
    ICUserIdentity *_userIdentity;
    long long _libraryChangeObservers;
    _MPActiveUserChangeMonitor *_activeUserChangeMonitor;
}

+ (void)libraryPathDidChangeForDataProvider:(id)arg1;
+ (void)uniqueIdentifierDidChangeForLibraryDataProvider:(id)arg1;
+ (void)syncGenerationDidChangeForLibraryDataProvider:(id)arg1;
+ (void)reloadDisplayValuesForLibraryDataProvider:(id)arg1;
+ (void)reloadInvisiblePropertiesForLibraryDataProvider:(id)arg1;
+ (void)reloadDynamicPropertiesForLibraryDataProvider:(id)arg1;
+ (void)postEntitiesAddedOrRemovedNotificationForLibraryDataProvider:(id)arg1;
+ (void)reloadLibraryDataProvider:(id)arg1;
+ (void)removeLibraryDataProvider:(id)arg1 removalReason:(long long)arg2;
+ (void)addLibraryDataProvider:(id)arg1;
+ (id)libraryDataProviders;
+ (id)_libraryDataProviders;
+ (id)_libraryForDataProvider:(id)arg1;
+ (id)mediaLibraryWithUniqueIdentifier:(id)arg1;
+ (id)sharedMediaLibraries;
+ (id)mediaLibraries;
+ (id)_mediaLibraries;
+ (void)_endDiscoveringMediaLibrariesIfAllowed;
+ (void)setRunLoopForNotifications:(id)arg1;
+ (void)setLibraryServerDisabled:(BOOL)arg1;
+ (BOOL)isLibraryServerDisabled;
+ (void)requestAuthorization:(CDUnknownBlockType)arg1;
+ (void)validatePermissionsExpiryWithCompletion:(CDUnknownBlockType)arg1;
+ (long long)authorizationStatus;
+ (void)endDiscoveringMediaLibraries;
+ (void)beginDiscoveringMediaLibraries;
+ (void)_postNotificationName:(id)arg1 library:(id)arg2 userInfo:(id)arg3;
+ (void)_postNotificationName:(id)arg1 library:(id)arg2;
+ (BOOL)supportsSecureCoding;
+ (id)_deviceMediaLibraryWithUserIdentity:(id)arg1 createIfRequired:(BOOL)arg2;
+ (id)deviceMediaLibraryWithUserIdentity:(id)arg1;
+ (id)deviceMediaLibrary;
+ (void)setDefaultMediaLibrary:(id)arg1;
+ (id)defaultMediaLibrary;
+ (void)initialize;
- (void).cxx_destruct;
@property(retain, nonatomic) _MPActiveUserChangeMonitor *activeUserChangeMonitor; // @synthesize activeUserChangeMonitor=_activeUserChangeMonitor;
- (BOOL)recordPlayEventForPlaylistPersistentID:(long long)arg1;
- (BOOL)recordPlayEventForAlbumPersistentID:(long long)arg1;
- (void)addNonLibraryOwnedPlaylistsWithGlobalIDs:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)addNonLibraryOwnedPlaylistWithGlobalID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)addGlobalPlaylistWithID:(id)arg1 andAddToCloudLibrary:(BOOL)arg2 completion:(CDUnknownBlockType)arg3;
- (BOOL)importOriginalArtworkFromImageData:(id)arg1 withArtworkToken:(id)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 mediaType:(unsigned long long)arg5;
- (void)importArtworkTokenForEntityPersistentID:(unsigned long long)arg1 entityType:(long long)arg2 artworkToken:(id)arg3 artworkType:(long long)arg4 sourceType:(long long)arg5;
- (void)addTracksToMyLibrary:(id)arg1;
- (void)addPlaylistStoreItemsWithMetadata:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)getPlaylistWithUUID:(id)arg1 creationMetadata:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)performStoreItemLibraryImport:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)addAdvertisementItemWithDictionary:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)addStoreItemIDs:(id)arg1 referralObject:(id)arg2 andAddTracksToCloudLibrary:(BOOL)arg3 withCompletion:(CDUnknownBlockType)arg4;
- (void)addStoreItemIDs:(id)arg1 andAddTracksToCloudLibrary:(BOOL)arg2 withCompletion:(CDUnknownBlockType)arg3;
- (void)addStoreItem:(long long)arg1 andAddTracksToCloudLibrary:(BOOL)arg2 withCompletion:(CDUnknownBlockType)arg3;
- (id)completeMyCollectionArtworkDataSource;
- (id)artworkDataSource;
- (id)libraryDataProvider;
- (id)_initWithLibraryDataProvider:(id)arg1;
@property(readonly, nonatomic) long long libraryChangeObservers; // @synthesize libraryChangeObservers=_libraryChangeObservers;
@property(retain, nonatomic, setter=_setMLCoreStorage:) id _MLCoreStorage; // @synthesize _MLCoreStorage=__MLCoreStorage;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *accessQueue; // @synthesize accessQueue=_accessQueue;
@property(readonly, copy, nonatomic) ICUserIdentity *userIdentity; // @synthesize userIdentity=_userIdentity;
@property(readonly, nonatomic) ML3MusicLibrary *ml3Library;
- (void)_tearDownNotifications;
- (void)_setupNotifications;
- (void)_disconnect;
- (void)_removeConnectionAssertion:(id)arg1;
- (id)_collectionsForQueryCriteria:(id)arg1;
- (void)_setLibraryFilterPredicates;
- (long long)cloudFilteringType;
- (void)setCloudFilteringType:(long long)arg1;
- (void)_clearPendingDisconnection;
- (id)_collectionPersistentIdentifiersForQueryCriteria:(id)arg1;
- (id)_itemPersistentIdentifiersForQueryCriteria:(id)arg1;
- (unsigned long long)_countOfCollectionsForQueryCriteria:(id)arg1;
- (unsigned long long)_countOfItemsForQueryCriteria:(id)arg1;
- (BOOL)_hasCollectionsForQueryCriteria:(id)arg1;
- (BOOL)_hasItemsForQueryCriteria:(id)arg1;
- (id)_getCachedValueForQueryCritiera:(id)arg1 valueCriteriaCache:(id)arg2 entitiesForCriteriaCache:(id)arg3 didLoadBlocksByQueryCriteria:(id)arg4 valueLoadedFromEntitiesArrayBlock:(CDUnknownBlockType)arg5 loadValueFromDataProviderBlock:(CDUnknownBlockType)arg6;
- (id)_itemsForQueryCriteria:(id)arg1;
- (BOOL)collectionExistsContainedWithinSyncIDs:(id)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long *)arg3;
- (BOOL)collectionExistsWithCloudUniversalLibraryID:(id)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long *)arg3;
- (BOOL)collectionExistsWithSagaID:(long long)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long *)arg3;
- (BOOL)collectionExistsWithStoreID:(long long)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long *)arg3;
- (BOOL)collectionExistsWithName:(id)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long *)arg3;
- (BOOL)collectionExistsContainedWithinPersistentIDs:(const unsigned long long *)arg1 count:(unsigned long long)arg2 groupingType:(long long)arg3 existentPID:(unsigned long long *)arg4;
- (void)_performBlockOnLibraryHandlingTheSameAccount:(CDUnknownBlockType)arg1;
- (BOOL)_handlesSameAccountAs:(id)arg1;
- (void)activeUserChangeDidFinish;
- (unsigned long long)_persistentIDForAssetURL:(id)arg1;
- (id)pathForAssetURL:(id)arg1;
- (BOOL)isValidAssetURL:(id)arg1;
- (id)entityWithPersistentID:(long long)arg1 entityType:(long long)arg2;
- (id)entityWithSpotlightIdentifier:(id)arg1;
- (id)entityWithLibraryURL:(id)arg1;
- (id)entityWithMultiverseIdentifier:(id)arg1;
- (id)multiverseIdentifierForCollectionWithPersistentID:(long long)arg1 groupingType:(long long)arg2;
- (id)multiverseIdentifierForTrackWithPersistentID:(long long)arg1;
- (BOOL)deleteDatabaseProperty:(id)arg1;
- (BOOL)setValue:(id)arg1 forDatabaseProperty:(id)arg2;
- (id)valueForDatabaseProperty:(id)arg1;
- (id)entityCache;
- (id)syncValidity;
- (float)connectionProgress;
- (BOOL)isCurrentThreadInTransaction;
- (void)performReadTransactionWithBlock:(CDUnknownBlockType)arg1;
- (BOOL)performTransactionWithBlock:(CDUnknownBlockType)arg1;
- (id)connectionAssertionWithIdentifier:(id)arg1;
- (void)connectWithAuthenticationData:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (BOOL)requiresAuthentication;
- (id)preferredSubtitleLanguages;
- (id)preferredAudioLanguages;
- (BOOL)isGeniusEnabled;
- (void)geniusItemsForSeedItem:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)setValues:(id)arg1 forProperties:(id)arg2 forItemPersistentIDs:(id)arg3;
- (void)clearLocationPropertiesOfItem:(id)arg1;
- (void)populateLocationPropertiesOfItem:(id)arg1 withPath:(id)arg2 assetProtectionType:(long long)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)populateLocationPropertiesOfItem:(id)arg1 withPath:(id)arg2 assetProtectionType:(long long)arg3;
- (void)downloadAsset:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (BOOL)removePlaylist:(id)arg1;
- (BOOL)removeItems:(id)arg1;
- (BOOL)deleteItems:(id)arg1;
- (id)URLForHomeSharingRequest:(id)arg1;
- (unsigned int)homeSharingDatabaseID;
- (unsigned long long)syncPlaylistId;
- (void)setSyncPlaylistId:(unsigned long long)arg1;
- (id)addPlaylistWithName:(id)arg1 activeGeniusPlaylist:(BOOL)arg2;
- (id)addPlaylistWithName:(id)arg1;
- (id)playlistWithPersistentID:(unsigned long long)arg1;
- (id)playbackHistoryPlaylist;
- (id)localizedSectionIndexTitles;
- (id)localizedSectionHeaderForSectionIndex:(unsigned long long)arg1;
- (id)newPlaylistWithPersistentID:(unsigned long long)arg1;
- (id)decodeItemWithCoder:(id)arg1;
- (id)itemWithStoreID:(unsigned long long)arg1;
- (id)itemWithPersistentID:(unsigned long long)arg1 verifyExistence:(BOOL)arg2;
- (id)itemWithPersistentID:(unsigned long long)arg1;
- (id)collectionWithPersistentID:(unsigned long long)arg1 groupingType:(long long)arg2 verifyExistence:(BOOL)arg3;
- (id)collectionWithPersistentID:(unsigned long long)arg1 groupingType:(long long)arg2;
- (BOOL)collectionExistsWithPersistentID:(unsigned long long)arg1 groupingType:(long long)arg2;
- (BOOL)playlistExistsWithPersistentID:(unsigned long long)arg1;
- (BOOL)itemExistsInDatabaseWithPersistentID:(unsigned long long)arg1;
- (BOOL)itemExistsWithPersistentID:(unsigned long long)arg1;
- (BOOL)hasUserPlaylistsContainingAppleMusicContent;
- (BOOL)hasAddedToLibraryAppleMusicContent;
- (BOOL)hasUserPlaylists;
- (BOOL)hasVideoPodcasts;
- (BOOL)hasHomeVideos;
- (BOOL)hasTVShows;
- (BOOL)hasMovieRentals;
- (BOOL)hasVideoITunesUContent;
- (BOOL)hasAudioITunesUContent;
- (BOOL)hasITunesUContent;
- (BOOL)hasCompilations;
- (BOOL)hasMovies;
- (BOOL)hasAudibleAudioBooks;
- (BOOL)hasMusicVideos;
- (BOOL)hasVideos;
- (BOOL)_checkHasContent:(char *)arg1 determined:(char *)arg2 mediaType:(unsigned long long)arg3 queryHasEntitiesBlock:(CDUnknownBlockType)arg4;
- (BOOL)_checkHasContent:(char *)arg1 determined:(char *)arg2 queryHasEntitiesBlock:(CDUnknownBlockType)arg3;
- (BOOL)hasAudiobooks;
- (BOOL)hasComposers;
- (BOOL)hasGenres;
- (BOOL)hasUbiquitousBookmarkableItems;
- (BOOL)hasPodcasts;
- (BOOL)hasSongs;
- (BOOL)hasAlbums;
- (BOOL)hasArtists;
- (BOOL)hasPlaylists;
- (BOOL)hasGeniusMixes;
- (BOOL)hasMedia;
- (BOOL)hasMediaOfType:(unsigned long long)arg1;
- (id)databasePath;
- (id)uniqueIdentifier;
@property(nonatomic) long long removalReason;
- (id)name;
- (void)removeLibraryFilterPredicate:(id)arg1;
- (void)addLibraryFilterPredicate:(id)arg1;
- (id)additionalLibraryFilterPredicates;
- (long long)status;
- (BOOL)writable;
- (BOOL)isHomeSharingLibrary;
- (BOOL)isDeviceLibrary;
- (long long)playlistGeneration;
- (unsigned long long)syncGenerationID;
- (unsigned long long)currentEntityRevision;
- (void)addItemWithProductID:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
@property(readonly, nonatomic) NSDate *lastModifiedDate;
- (void)disconnect;
- (void)connectWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)endGeneratingLibraryChangeNotifications;
- (void)beginGeneratingLibraryChangeNotifications;
- (void)_displayValuesDidChangeNotification:(id)arg1;
- (void)_didReceiveMemoryWarning:(id)arg1;
- (void)_canShowCloudTracksDidChangeNotification:(id)arg1;
- (void)_activeUserDidChangeNotification:(id)arg1;
- (void)_reloadLibraryForPathChange;
- (void)_reloadLibraryForInvisiblePropertyChangeWithNotificationInfo:(id)arg1;
- (void)_reloadLibraryForDynamicPropertyChangeWithNotificationInfo:(id)arg1;
- (void)_reloadLibraryForContentsChangeWithNotificationInfo:(id)arg1;
- (void)_reloadLibraryForRestrictionsChange;
- (void)_scheduleLibraryChangeNotificationPostingBlock:(CDUnknownBlockType)arg1;
- (void)_clearCachedContentDataAndResultSets:(BOOL)arg1;
- (void)_clearCachedEntitiesIncludingResultSets:(BOOL)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
@property(readonly) unsigned long long hash;
- (BOOL)isEqual:(id)arg1;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (id)_initWithUserIdentity:(id)arg1;
- (id)init;
@property(readonly, nonatomic) NSURL *protectedContentSupportStorageURL;
- (void)enumerateEntityChangesAfterSyncAnchor:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)enumerateEntityChangesAfterSyncAnchor:(id)arg1 maximumRevisionType:(long long)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (void)enumerateEntityChangesAfterSyncAnchor:(id)arg1 maximumRevisionType:(long long)arg2 inUsersLibrary:(BOOL)arg3 usingBlock:(CDUnknownBlockType)arg4;
@property(readonly, nonatomic) NSString *_syncValidity;
- (id)errorResolverForItem:(id)arg1;
- (void)clearSagaLastPlaylistPlayDataUploadDate;
- (void)clearSagaLastItemPlayDataUploadDate;
- (void)clearSagaCloudAccountID;
@property(copy, nonatomic) NSDate *sagaLastSubscribedContainersUpdateTime;
@property(copy, nonatomic) NSDate *sagaLastLibraryUpdateTime;
@property(nonatomic) long long sagaOnDiskDatabaseRevision;
@property(copy, nonatomic) NSString *storefrontIdentifier;
@property(nonatomic) long long sagaDatabaseUserVersion;
@property(copy, nonatomic) NSDate *sagaLastPlaylistPlayDataUploadDate;
@property(copy, nonatomic) NSDate *sagaLastItemPlayDataUploadDate;
@property(copy, nonatomic) NSNumber *sagaAccountID;
- (unsigned long long)filterAvailableContentGroups:(unsigned long long)arg1 withOptions:(unsigned long long)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

