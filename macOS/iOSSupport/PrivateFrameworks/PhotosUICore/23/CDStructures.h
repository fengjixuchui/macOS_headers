//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 25 2017 03:49:04).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGAffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CLLocationCoordinate2D {
    double latitude;
    double longitude;
};

struct PHAssetResourceTableDataSpecification {
    int width;
    int height;
    int bytesPerRow;
    int dataWidth;
    int dataHeight;
    int imageDataOffset;
};

struct PXAssetBadgeInfo {
    unsigned long long badges;
    double duration;
    long long count;
};

struct PXDisplayVelocity {
    double x;
    double y;
    double scale;
    double rotation;
};

struct PXMagazineOrigin {
    long long _field1;
    long long _field2;
};

struct PXMagazineRect {
    struct PXMagazineOrigin _field1;
    struct PXMagazineSize _field2;
};

struct PXMagazineSize {
    long long _field1;
    long long _field2;
};

struct PXMediaProviderThumbnailDataFormat {
    unsigned long long _field1;
    unsigned short _field2;
    unsigned short _field3;
    char _field4;
};

struct PXMediaProviderThumbnailDataSpec {
    struct PXMediaProviderThumbnailDataFormat _field1;
    unsigned short _field2;
    unsigned short _field3;
    unsigned short _field4;
    unsigned short _field5;
    unsigned short _field6;
};

struct PXMemoryFontsSpecIdentifier {
    long long _field1;
    long long _field2;
    long long _field3;
    struct CGSize _field4;
    double _field5;
    char _field6;
};

struct PXProtectedTileState {
    char _field1;
    struct PXTileIdentifier _field2;
    struct PXTileIdentifier _field3;
    struct PXTileIdentifier _field4;
    unsigned long long _field5;
    char _field6;
    struct PXTileGeometry _field7;
    struct PXTileGeometry _field8;
    char _field9;
    char _field10;
    void *_field11;
    void *_field12;
    void *_field13;
    unsigned long long _field14;
};

struct PXSimpleIndexPath {
    unsigned long long dataSourceIdentifier;
    long long section;
    long long item;
    long long subitem;
};

struct PXTileGeometry {
    struct CGRect _field1;
    struct CGPoint _field2;
    struct CGSize _field3;
    struct CGAffineTransform _field4;
    double _field5;
    double _field6;
    char _field7;
    struct CGSize _field8;
    struct CGRect _field9;
    void *_field10;
};

struct PXTileIdentifier {
    unsigned long long length;
    unsigned long long index[10];
};

struct PXTileInfo {
    long long index;
    struct CGSize imageSize;
    struct CGSize minimumSize;
    char hasCaption;
    char hasLikes;
    long long commentCount;
    char isBatchStart;
};

struct PXTileState {
    char _field1;
    struct PXTileIdentifier _field2;
    struct PXTileIdentifier _field3;
    struct PXTileIdentifier _field4;
    unsigned long long _field5;
    char _field6;
    struct PXTileGeometry _field7;
    struct PXTileGeometry _field8;
    char _field9;
    char _field10;
    void *_field11;
    void *_field12;
    void *_field13;
    unsigned long long _field14;
};

struct PXViewSpecDescriptor {
    long long _field1;
    unsigned long long _field2;
    struct CGSize _field3;
};

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct _PXLayoutGeometry {
    long long _field1;
    struct CGPoint _field2;
    struct CGSize _field3;
    struct CGAffineTransform _field4;
    float _field5;
    long long _field6;
    struct CGRect _field7;
    struct CGSize _field8;
};

struct _PXValueAnimationSpec {
    long long type;
    double duration;
    long long curve;
    double epsilon;
    double stiffness;
    double dampingRatio;
    double initialVelocity;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *>*> *__next_;
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<PXTileIdentifier, unsigned long, std::__1::hash<PXTileIdentifier>, std::__1::equal_to<PXTileIdentifier>, std::__1::allocator<std::__1::pair<const PXTileIdentifier, unsigned long>>> {
    struct __hash_table<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, std::__1::__unordered_map_hasher<PXTileIdentifier, std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, std::__1::hash<PXTileIdentifier>, true>, std::__1::__unordered_map_equal<PXTileIdentifier, std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, std::__1::equal_to<PXTileIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<PXTileIdentifier, std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, std::__1::hash<PXTileIdentifier>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<PXTileIdentifier, std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, std::__1::equal_to<PXTileIdentifier>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
} CDStruct_14f26992;

typedef struct {
    unsigned long long needsUpdate;
    unsigned long long updated;
    char isPerformingUpdate;
} CDStruct_5f1286c4;

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    unsigned long long _field1;
    long long _field2;
} CDStruct_3f164e09;

typedef struct {
    double minValue;
    double maxValue;
    double totalValue;
    unsigned long long count;
} CDStruct_4bbd3430;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
} CDStruct_05cddbcc;

typedef struct {
    long long _field1;
    float _field2;
} CDStruct_fd7332cd;

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

typedef struct {
    long long _field1;
    long long _field2;
    char _field3;
} CDStruct_7457641b;

typedef struct {
    CDStruct_1b6d18a9 start;
    CDStruct_1b6d18a9 duration;
} CDStruct_e83c9415;

typedef struct {
    struct CLLocationCoordinate2D _field1;
    struct {
        double _field1;
        double _field2;
    } _field2;
} CDStruct_26e8d939;

typedef struct {
    union {
        struct {
            float topLeft;
            float topRight;
            float bottomLeft;
            float bottomRight;
        } ;
        float byIndex[4];
    } ;
} CDStruct_2bd92d94;

typedef struct {
    struct CGRect layoutRect;
    char onlyCalculateSize;
    struct {
        long long contentSizeCategory;
        long long layoutDirection;
        long long layoutSizeClass;
        long long layoutOrientation;
    } layoutAttributes;
} CDStruct_8c65c4f4;

// Ambiguous groups
typedef struct {
    char button;
} CDStruct_3c808251;

